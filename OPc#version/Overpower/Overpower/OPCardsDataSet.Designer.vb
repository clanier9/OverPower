'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17379
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("OPCardsDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class OPCardsDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableally As allyDataTable
    
    Private tableartifact As artifactDataTable
    
    Private tableaspect As aspectDataTable
    
    Private tablebasic_universe As basic_universeDataTable
    
    Private tablecharacters As charactersDataTable
    
    Private tablecharacters_name As characters_nameDataTable
    
    Private tablecharacters_specials As characters_specialsDataTable
    
    Private tablecharacters_specials_single As characters_specials_singleDataTable
    
    Private tablecode_variant As code_variantDataTable
    
    Private tabledccode As dccodeDataTable
    
    Private tabledoubleshot As doubleshotDataTable
    
    Private tableevent As eventDataTable
    
    Private tableexpansion As expansionDataTable
    
    Private tablehomebases As homebasesDataTable
    
    Private tablehomebases_characters As homebases_charactersDataTable
    
    Private tablehomebases_name As homebases_nameDataTable
    
    Private tablemissions As missionsDataTable
    
    Private tablemissions_name As missions_nameDataTable
    
    Private tablepower As powerDataTable
    
    Private tablerarity As rarityDataTable
    
    Private tableskill As skillDataTable
    
    Private tablespecials As specialsDataTable
    
    Private tableteamwork As teamworkDataTable
    
    Private tabletraining As trainingDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ally")) Is Nothing) Then
                MyBase.Tables.Add(New allyDataTable(ds.Tables("ally")))
            End If
            If (Not (ds.Tables("artifact")) Is Nothing) Then
                MyBase.Tables.Add(New artifactDataTable(ds.Tables("artifact")))
            End If
            If (Not (ds.Tables("aspect")) Is Nothing) Then
                MyBase.Tables.Add(New aspectDataTable(ds.Tables("aspect")))
            End If
            If (Not (ds.Tables("basic_universe")) Is Nothing) Then
                MyBase.Tables.Add(New basic_universeDataTable(ds.Tables("basic_universe")))
            End If
            If (Not (ds.Tables("characters")) Is Nothing) Then
                MyBase.Tables.Add(New charactersDataTable(ds.Tables("characters")))
            End If
            If (Not (ds.Tables("characters_name")) Is Nothing) Then
                MyBase.Tables.Add(New characters_nameDataTable(ds.Tables("characters_name")))
            End If
            If (Not (ds.Tables("characters_specials")) Is Nothing) Then
                MyBase.Tables.Add(New characters_specialsDataTable(ds.Tables("characters_specials")))
            End If
            If (Not (ds.Tables("characters_specials_single")) Is Nothing) Then
                MyBase.Tables.Add(New characters_specials_singleDataTable(ds.Tables("characters_specials_single")))
            End If
            If (Not (ds.Tables("code_variant")) Is Nothing) Then
                MyBase.Tables.Add(New code_variantDataTable(ds.Tables("code_variant")))
            End If
            If (Not (ds.Tables("dccode")) Is Nothing) Then
                MyBase.Tables.Add(New dccodeDataTable(ds.Tables("dccode")))
            End If
            If (Not (ds.Tables("doubleshot")) Is Nothing) Then
                MyBase.Tables.Add(New doubleshotDataTable(ds.Tables("doubleshot")))
            End If
            If (Not (ds.Tables("event")) Is Nothing) Then
                MyBase.Tables.Add(New eventDataTable(ds.Tables("event")))
            End If
            If (Not (ds.Tables("expansion")) Is Nothing) Then
                MyBase.Tables.Add(New expansionDataTable(ds.Tables("expansion")))
            End If
            If (Not (ds.Tables("homebases")) Is Nothing) Then
                MyBase.Tables.Add(New homebasesDataTable(ds.Tables("homebases")))
            End If
            If (Not (ds.Tables("homebases_characters")) Is Nothing) Then
                MyBase.Tables.Add(New homebases_charactersDataTable(ds.Tables("homebases_characters")))
            End If
            If (Not (ds.Tables("homebases_name")) Is Nothing) Then
                MyBase.Tables.Add(New homebases_nameDataTable(ds.Tables("homebases_name")))
            End If
            If (Not (ds.Tables("missions")) Is Nothing) Then
                MyBase.Tables.Add(New missionsDataTable(ds.Tables("missions")))
            End If
            If (Not (ds.Tables("missions_name")) Is Nothing) Then
                MyBase.Tables.Add(New missions_nameDataTable(ds.Tables("missions_name")))
            End If
            If (Not (ds.Tables("power")) Is Nothing) Then
                MyBase.Tables.Add(New powerDataTable(ds.Tables("power")))
            End If
            If (Not (ds.Tables("rarity")) Is Nothing) Then
                MyBase.Tables.Add(New rarityDataTable(ds.Tables("rarity")))
            End If
            If (Not (ds.Tables("skill")) Is Nothing) Then
                MyBase.Tables.Add(New skillDataTable(ds.Tables("skill")))
            End If
            If (Not (ds.Tables("specials")) Is Nothing) Then
                MyBase.Tables.Add(New specialsDataTable(ds.Tables("specials")))
            End If
            If (Not (ds.Tables("teamwork")) Is Nothing) Then
                MyBase.Tables.Add(New teamworkDataTable(ds.Tables("teamwork")))
            End If
            If (Not (ds.Tables("training")) Is Nothing) Then
                MyBase.Tables.Add(New trainingDataTable(ds.Tables("training")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ally() As allyDataTable
        Get
            Return Me.tableally
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property artifact() As artifactDataTable
        Get
            Return Me.tableartifact
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property aspect() As aspectDataTable
        Get
            Return Me.tableaspect
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property basic_universe() As basic_universeDataTable
        Get
            Return Me.tablebasic_universe
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property characters() As charactersDataTable
        Get
            Return Me.tablecharacters
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property characters_name() As characters_nameDataTable
        Get
            Return Me.tablecharacters_name
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property characters_specials() As characters_specialsDataTable
        Get
            Return Me.tablecharacters_specials
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property characters_specials_single() As characters_specials_singleDataTable
        Get
            Return Me.tablecharacters_specials_single
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property code_variant() As code_variantDataTable
        Get
            Return Me.tablecode_variant
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dccode() As dccodeDataTable
        Get
            Return Me.tabledccode
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property doubleshot() As doubleshotDataTable
        Get
            Return Me.tabledoubleshot
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _event() As eventDataTable
        Get
            Return Me.tableevent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property expansion() As expansionDataTable
        Get
            Return Me.tableexpansion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property homebases() As homebasesDataTable
        Get
            Return Me.tablehomebases
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property homebases_characters() As homebases_charactersDataTable
        Get
            Return Me.tablehomebases_characters
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property homebases_name() As homebases_nameDataTable
        Get
            Return Me.tablehomebases_name
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property missions() As missionsDataTable
        Get
            Return Me.tablemissions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property missions_name() As missions_nameDataTable
        Get
            Return Me.tablemissions_name
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property power() As powerDataTable
        Get
            Return Me.tablepower
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rarity() As rarityDataTable
        Get
            Return Me.tablerarity
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property skill() As skillDataTable
        Get
            Return Me.tableskill
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property specials() As specialsDataTable
        Get
            Return Me.tablespecials
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property teamwork() As teamworkDataTable
        Get
            Return Me.tableteamwork
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property training() As trainingDataTable
        Get
            Return Me.tabletraining
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As OPCardsDataSet = CType(MyBase.Clone,OPCardsDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ally")) Is Nothing) Then
                MyBase.Tables.Add(New allyDataTable(ds.Tables("ally")))
            End If
            If (Not (ds.Tables("artifact")) Is Nothing) Then
                MyBase.Tables.Add(New artifactDataTable(ds.Tables("artifact")))
            End If
            If (Not (ds.Tables("aspect")) Is Nothing) Then
                MyBase.Tables.Add(New aspectDataTable(ds.Tables("aspect")))
            End If
            If (Not (ds.Tables("basic_universe")) Is Nothing) Then
                MyBase.Tables.Add(New basic_universeDataTable(ds.Tables("basic_universe")))
            End If
            If (Not (ds.Tables("characters")) Is Nothing) Then
                MyBase.Tables.Add(New charactersDataTable(ds.Tables("characters")))
            End If
            If (Not (ds.Tables("characters_name")) Is Nothing) Then
                MyBase.Tables.Add(New characters_nameDataTable(ds.Tables("characters_name")))
            End If
            If (Not (ds.Tables("characters_specials")) Is Nothing) Then
                MyBase.Tables.Add(New characters_specialsDataTable(ds.Tables("characters_specials")))
            End If
            If (Not (ds.Tables("characters_specials_single")) Is Nothing) Then
                MyBase.Tables.Add(New characters_specials_singleDataTable(ds.Tables("characters_specials_single")))
            End If
            If (Not (ds.Tables("code_variant")) Is Nothing) Then
                MyBase.Tables.Add(New code_variantDataTable(ds.Tables("code_variant")))
            End If
            If (Not (ds.Tables("dccode")) Is Nothing) Then
                MyBase.Tables.Add(New dccodeDataTable(ds.Tables("dccode")))
            End If
            If (Not (ds.Tables("doubleshot")) Is Nothing) Then
                MyBase.Tables.Add(New doubleshotDataTable(ds.Tables("doubleshot")))
            End If
            If (Not (ds.Tables("event")) Is Nothing) Then
                MyBase.Tables.Add(New eventDataTable(ds.Tables("event")))
            End If
            If (Not (ds.Tables("expansion")) Is Nothing) Then
                MyBase.Tables.Add(New expansionDataTable(ds.Tables("expansion")))
            End If
            If (Not (ds.Tables("homebases")) Is Nothing) Then
                MyBase.Tables.Add(New homebasesDataTable(ds.Tables("homebases")))
            End If
            If (Not (ds.Tables("homebases_characters")) Is Nothing) Then
                MyBase.Tables.Add(New homebases_charactersDataTable(ds.Tables("homebases_characters")))
            End If
            If (Not (ds.Tables("homebases_name")) Is Nothing) Then
                MyBase.Tables.Add(New homebases_nameDataTable(ds.Tables("homebases_name")))
            End If
            If (Not (ds.Tables("missions")) Is Nothing) Then
                MyBase.Tables.Add(New missionsDataTable(ds.Tables("missions")))
            End If
            If (Not (ds.Tables("missions_name")) Is Nothing) Then
                MyBase.Tables.Add(New missions_nameDataTable(ds.Tables("missions_name")))
            End If
            If (Not (ds.Tables("power")) Is Nothing) Then
                MyBase.Tables.Add(New powerDataTable(ds.Tables("power")))
            End If
            If (Not (ds.Tables("rarity")) Is Nothing) Then
                MyBase.Tables.Add(New rarityDataTable(ds.Tables("rarity")))
            End If
            If (Not (ds.Tables("skill")) Is Nothing) Then
                MyBase.Tables.Add(New skillDataTable(ds.Tables("skill")))
            End If
            If (Not (ds.Tables("specials")) Is Nothing) Then
                MyBase.Tables.Add(New specialsDataTable(ds.Tables("specials")))
            End If
            If (Not (ds.Tables("teamwork")) Is Nothing) Then
                MyBase.Tables.Add(New teamworkDataTable(ds.Tables("teamwork")))
            End If
            If (Not (ds.Tables("training")) Is Nothing) Then
                MyBase.Tables.Add(New trainingDataTable(ds.Tables("training")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableally = CType(MyBase.Tables("ally"),allyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableally) Is Nothing) Then
                Me.tableally.InitVars
            End If
        End If
        Me.tableartifact = CType(MyBase.Tables("artifact"),artifactDataTable)
        If (initTable = true) Then
            If (Not (Me.tableartifact) Is Nothing) Then
                Me.tableartifact.InitVars
            End If
        End If
        Me.tableaspect = CType(MyBase.Tables("aspect"),aspectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaspect) Is Nothing) Then
                Me.tableaspect.InitVars
            End If
        End If
        Me.tablebasic_universe = CType(MyBase.Tables("basic_universe"),basic_universeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebasic_universe) Is Nothing) Then
                Me.tablebasic_universe.InitVars
            End If
        End If
        Me.tablecharacters = CType(MyBase.Tables("characters"),charactersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecharacters) Is Nothing) Then
                Me.tablecharacters.InitVars
            End If
        End If
        Me.tablecharacters_name = CType(MyBase.Tables("characters_name"),characters_nameDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecharacters_name) Is Nothing) Then
                Me.tablecharacters_name.InitVars
            End If
        End If
        Me.tablecharacters_specials = CType(MyBase.Tables("characters_specials"),characters_specialsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecharacters_specials) Is Nothing) Then
                Me.tablecharacters_specials.InitVars
            End If
        End If
        Me.tablecharacters_specials_single = CType(MyBase.Tables("characters_specials_single"),characters_specials_singleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecharacters_specials_single) Is Nothing) Then
                Me.tablecharacters_specials_single.InitVars
            End If
        End If
        Me.tablecode_variant = CType(MyBase.Tables("code_variant"),code_variantDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecode_variant) Is Nothing) Then
                Me.tablecode_variant.InitVars
            End If
        End If
        Me.tabledccode = CType(MyBase.Tables("dccode"),dccodeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledccode) Is Nothing) Then
                Me.tabledccode.InitVars
            End If
        End If
        Me.tabledoubleshot = CType(MyBase.Tables("doubleshot"),doubleshotDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledoubleshot) Is Nothing) Then
                Me.tabledoubleshot.InitVars
            End If
        End If
        Me.tableevent = CType(MyBase.Tables("event"),eventDataTable)
        If (initTable = true) Then
            If (Not (Me.tableevent) Is Nothing) Then
                Me.tableevent.InitVars
            End If
        End If
        Me.tableexpansion = CType(MyBase.Tables("expansion"),expansionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableexpansion) Is Nothing) Then
                Me.tableexpansion.InitVars
            End If
        End If
        Me.tablehomebases = CType(MyBase.Tables("homebases"),homebasesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehomebases) Is Nothing) Then
                Me.tablehomebases.InitVars
            End If
        End If
        Me.tablehomebases_characters = CType(MyBase.Tables("homebases_characters"),homebases_charactersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehomebases_characters) Is Nothing) Then
                Me.tablehomebases_characters.InitVars
            End If
        End If
        Me.tablehomebases_name = CType(MyBase.Tables("homebases_name"),homebases_nameDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehomebases_name) Is Nothing) Then
                Me.tablehomebases_name.InitVars
            End If
        End If
        Me.tablemissions = CType(MyBase.Tables("missions"),missionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemissions) Is Nothing) Then
                Me.tablemissions.InitVars
            End If
        End If
        Me.tablemissions_name = CType(MyBase.Tables("missions_name"),missions_nameDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemissions_name) Is Nothing) Then
                Me.tablemissions_name.InitVars
            End If
        End If
        Me.tablepower = CType(MyBase.Tables("power"),powerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepower) Is Nothing) Then
                Me.tablepower.InitVars
            End If
        End If
        Me.tablerarity = CType(MyBase.Tables("rarity"),rarityDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerarity) Is Nothing) Then
                Me.tablerarity.InitVars
            End If
        End If
        Me.tableskill = CType(MyBase.Tables("skill"),skillDataTable)
        If (initTable = true) Then
            If (Not (Me.tableskill) Is Nothing) Then
                Me.tableskill.InitVars
            End If
        End If
        Me.tablespecials = CType(MyBase.Tables("specials"),specialsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablespecials) Is Nothing) Then
                Me.tablespecials.InitVars
            End If
        End If
        Me.tableteamwork = CType(MyBase.Tables("teamwork"),teamworkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableteamwork) Is Nothing) Then
                Me.tableteamwork.InitVars
            End If
        End If
        Me.tabletraining = CType(MyBase.Tables("training"),trainingDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletraining) Is Nothing) Then
                Me.tabletraining.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "OPCardsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/OPCardsDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableally = New allyDataTable()
        MyBase.Tables.Add(Me.tableally)
        Me.tableartifact = New artifactDataTable()
        MyBase.Tables.Add(Me.tableartifact)
        Me.tableaspect = New aspectDataTable()
        MyBase.Tables.Add(Me.tableaspect)
        Me.tablebasic_universe = New basic_universeDataTable()
        MyBase.Tables.Add(Me.tablebasic_universe)
        Me.tablecharacters = New charactersDataTable()
        MyBase.Tables.Add(Me.tablecharacters)
        Me.tablecharacters_name = New characters_nameDataTable()
        MyBase.Tables.Add(Me.tablecharacters_name)
        Me.tablecharacters_specials = New characters_specialsDataTable()
        MyBase.Tables.Add(Me.tablecharacters_specials)
        Me.tablecharacters_specials_single = New characters_specials_singleDataTable()
        MyBase.Tables.Add(Me.tablecharacters_specials_single)
        Me.tablecode_variant = New code_variantDataTable()
        MyBase.Tables.Add(Me.tablecode_variant)
        Me.tabledccode = New dccodeDataTable()
        MyBase.Tables.Add(Me.tabledccode)
        Me.tabledoubleshot = New doubleshotDataTable()
        MyBase.Tables.Add(Me.tabledoubleshot)
        Me.tableevent = New eventDataTable()
        MyBase.Tables.Add(Me.tableevent)
        Me.tableexpansion = New expansionDataTable()
        MyBase.Tables.Add(Me.tableexpansion)
        Me.tablehomebases = New homebasesDataTable()
        MyBase.Tables.Add(Me.tablehomebases)
        Me.tablehomebases_characters = New homebases_charactersDataTable()
        MyBase.Tables.Add(Me.tablehomebases_characters)
        Me.tablehomebases_name = New homebases_nameDataTable()
        MyBase.Tables.Add(Me.tablehomebases_name)
        Me.tablemissions = New missionsDataTable()
        MyBase.Tables.Add(Me.tablemissions)
        Me.tablemissions_name = New missions_nameDataTable()
        MyBase.Tables.Add(Me.tablemissions_name)
        Me.tablepower = New powerDataTable()
        MyBase.Tables.Add(Me.tablepower)
        Me.tablerarity = New rarityDataTable()
        MyBase.Tables.Add(Me.tablerarity)
        Me.tableskill = New skillDataTable()
        MyBase.Tables.Add(Me.tableskill)
        Me.tablespecials = New specialsDataTable()
        MyBase.Tables.Add(Me.tablespecials)
        Me.tableteamwork = New teamworkDataTable()
        MyBase.Tables.Add(Me.tableteamwork)
        Me.tabletraining = New trainingDataTable()
        MyBase.Tables.Add(Me.tabletraining)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeally() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeartifact() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeaspect() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializebasic_universe() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecharacters() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecharacters_name() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecharacters_specials() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecharacters_specials_single() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecode_variant() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializedccode() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializedoubleshot() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_event() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeexpansion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehomebases() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehomebases_characters() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehomebases_name() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemissions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemissions_name() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializepower() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializerarity() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeskill() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializespecials() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeteamwork() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetraining() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As OPCardsDataSet = New OPCardsDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub allyRowChangeEventHandler(ByVal sender As Object, ByVal e As allyRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub artifactRowChangeEventHandler(ByVal sender As Object, ByVal e As artifactRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub aspectRowChangeEventHandler(ByVal sender As Object, ByVal e As aspectRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub basic_universeRowChangeEventHandler(ByVal sender As Object, ByVal e As basic_universeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub charactersRowChangeEventHandler(ByVal sender As Object, ByVal e As charactersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub characters_nameRowChangeEventHandler(ByVal sender As Object, ByVal e As characters_nameRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub characters_specialsRowChangeEventHandler(ByVal sender As Object, ByVal e As characters_specialsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub characters_specials_singleRowChangeEventHandler(ByVal sender As Object, ByVal e As characters_specials_singleRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub code_variantRowChangeEventHandler(ByVal sender As Object, ByVal e As code_variantRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub dccodeRowChangeEventHandler(ByVal sender As Object, ByVal e As dccodeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub doubleshotRowChangeEventHandler(ByVal sender As Object, ByVal e As doubleshotRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub eventRowChangeEventHandler(ByVal sender As Object, ByVal e As eventRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub expansionRowChangeEventHandler(ByVal sender As Object, ByVal e As expansionRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub homebasesRowChangeEventHandler(ByVal sender As Object, ByVal e As homebasesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub homebases_charactersRowChangeEventHandler(ByVal sender As Object, ByVal e As homebases_charactersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub homebases_nameRowChangeEventHandler(ByVal sender As Object, ByVal e As homebases_nameRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub missionsRowChangeEventHandler(ByVal sender As Object, ByVal e As missionsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub missions_nameRowChangeEventHandler(ByVal sender As Object, ByVal e As missions_nameRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub powerRowChangeEventHandler(ByVal sender As Object, ByVal e As powerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub rarityRowChangeEventHandler(ByVal sender As Object, ByVal e As rarityRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub skillRowChangeEventHandler(ByVal sender As Object, ByVal e As skillRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub specialsRowChangeEventHandler(ByVal sender As Object, ByVal e As specialsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub teamworkRowChangeEventHandler(ByVal sender As Object, ByVal e As teamworkRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trainingRowChangeEventHandler(ByVal sender As Object, ByVal e As trainingRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class allyDataTable
        Inherits Global.System.Data.TypedTableBase(Of allyRow)
        
        Private columnally_id As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columntouse_ltgt As Global.System.Data.DataColumn
        
        Private columntouse_power As Global.System.Data.DataColumn
        
        Private columntouse_skill As Global.System.Data.DataColumn
        
        Private columnactas_power As Global.System.Data.DataColumn
        
        Private columnactas_skill As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columndccode As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ally"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ally_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnally_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_ltgtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_ltgt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actas_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactas_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actas_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactas_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dccodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndccode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As allyRow
            Get
                Return CType(Me.Rows(index),allyRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event allyRowChanging As allyRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event allyRowChanged As allyRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event allyRowDeleting As allyRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event allyRowDeleted As allyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddallyRow(ByVal row As allyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddallyRow(ByVal ally_id As Object, ByVal hero As String, ByVal touse_ltgt As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal actas_power As Integer, ByVal actas_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal dccode As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As allyRow
            Dim rowallyRow As allyRow = CType(Me.NewRow,allyRow)
            Dim columnValuesArray() As Object = New Object() {ally_id, hero, touse_ltgt, touse_power, touse_skill, actas_power, actas_skill, image, image_back, expansion, dccode, commonname, comment, rarity}
            rowallyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowallyRow)
            Return rowallyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByally_id(ByVal ally_id As Object) As allyRow
            Return CType(Me.Rows.Find(New Object() {ally_id}),allyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As allyDataTable = CType(MyBase.Clone,allyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New allyDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnally_id = MyBase.Columns("ally_id")
            Me.columnhero = MyBase.Columns("hero")
            Me.columntouse_ltgt = MyBase.Columns("touse_ltgt")
            Me.columntouse_power = MyBase.Columns("touse_power")
            Me.columntouse_skill = MyBase.Columns("touse_skill")
            Me.columnactas_power = MyBase.Columns("actas_power")
            Me.columnactas_skill = MyBase.Columns("actas_skill")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columndccode = MyBase.Columns("dccode")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnally_id = New Global.System.Data.DataColumn("ally_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnally_id)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columntouse_ltgt = New Global.System.Data.DataColumn("touse_ltgt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_ltgt)
            Me.columntouse_power = New Global.System.Data.DataColumn("touse_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_power)
            Me.columntouse_skill = New Global.System.Data.DataColumn("touse_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_skill)
            Me.columnactas_power = New Global.System.Data.DataColumn("actas_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactas_power)
            Me.columnactas_skill = New Global.System.Data.DataColumn("actas_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactas_skill)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columndccode = New Global.System.Data.DataColumn("dccode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndccode)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnally_id}, true))
            Me.columnally_id.AllowDBNull = false
            Me.columnally_id.Unique = true
            Me.columnhero.AllowDBNull = false
            Me.columntouse_ltgt.AllowDBNull = false
            Me.columntouse_power.AllowDBNull = false
            Me.columntouse_skill.AllowDBNull = false
            Me.columnactas_power.AllowDBNull = false
            Me.columnactas_skill.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columndccode.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewallyRow() As allyRow
            Return CType(Me.NewRow,allyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New allyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(allyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.allyRowChangedEvent) Is Nothing) Then
                RaiseEvent allyRowChanged(Me, New allyRowChangeEvent(CType(e.Row,allyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.allyRowChangingEvent) Is Nothing) Then
                RaiseEvent allyRowChanging(Me, New allyRowChangeEvent(CType(e.Row,allyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.allyRowDeletedEvent) Is Nothing) Then
                RaiseEvent allyRowDeleted(Me, New allyRowChangeEvent(CType(e.Row,allyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.allyRowDeletingEvent) Is Nothing) Then
                RaiseEvent allyRowDeleting(Me, New allyRowChangeEvent(CType(e.Row,allyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveallyRow(ByVal row As allyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "allyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class artifactDataTable
        Inherits Global.System.Data.TypedTableBase(Of artifactRow)
        
        Private columnartifact_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columneffect As Global.System.Data.DataColumn
        
        Private columntouse_power As Global.System.Data.DataColumn
        
        Private columntouse_skill As Global.System.Data.DataColumn
        
        Private columnteammate_power As Global.System.Data.DataColumn
        
        Private columnteammate_skill As Global.System.Data.DataColumn
        
        Private columnteammate_ltgt As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columnopd As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "artifact"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property artifact_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnartifact_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property effectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate_ltgtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate_ltgt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property opdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnopd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As artifactRow
            Get
                Return CType(Me.Rows(index),artifactRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event artifactRowChanging As artifactRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event artifactRowChanged As artifactRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event artifactRowDeleting As artifactRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event artifactRowDeleted As artifactRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddartifactRow(ByVal row As artifactRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddartifactRow(ByVal artifact_id As Object, ByVal name As String, ByVal effect As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal teammate_power As Integer, ByVal teammate_skill As String, ByVal teammate_ltgt As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal opd As Integer, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As artifactRow
            Dim rowartifactRow As artifactRow = CType(Me.NewRow,artifactRow)
            Dim columnValuesArray() As Object = New Object() {artifact_id, name, effect, touse_power, touse_skill, teammate_power, teammate_skill, teammate_ltgt, image, image_back, expansion, opd, commonname, comment, rarity}
            rowartifactRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowartifactRow)
            Return rowartifactRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByartifact_id(ByVal artifact_id As Object) As artifactRow
            Return CType(Me.Rows.Find(New Object() {artifact_id}),artifactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As artifactDataTable = CType(MyBase.Clone,artifactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New artifactDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnartifact_id = MyBase.Columns("artifact_id")
            Me.columnname = MyBase.Columns("name")
            Me.columneffect = MyBase.Columns("effect")
            Me.columntouse_power = MyBase.Columns("touse_power")
            Me.columntouse_skill = MyBase.Columns("touse_skill")
            Me.columnteammate_power = MyBase.Columns("teammate_power")
            Me.columnteammate_skill = MyBase.Columns("teammate_skill")
            Me.columnteammate_ltgt = MyBase.Columns("teammate_ltgt")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columnopd = MyBase.Columns("opd")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnartifact_id = New Global.System.Data.DataColumn("artifact_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnartifact_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columneffect = New Global.System.Data.DataColumn("effect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffect)
            Me.columntouse_power = New Global.System.Data.DataColumn("touse_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_power)
            Me.columntouse_skill = New Global.System.Data.DataColumn("touse_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_skill)
            Me.columnteammate_power = New Global.System.Data.DataColumn("teammate_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate_power)
            Me.columnteammate_skill = New Global.System.Data.DataColumn("teammate_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate_skill)
            Me.columnteammate_ltgt = New Global.System.Data.DataColumn("teammate_ltgt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate_ltgt)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columnopd = New Global.System.Data.DataColumn("opd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopd)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnartifact_id}, true))
            Me.columnartifact_id.AllowDBNull = false
            Me.columnartifact_id.Unique = true
            Me.columnname.AllowDBNull = false
            Me.columneffect.AllowDBNull = false
            Me.columntouse_power.AllowDBNull = false
            Me.columntouse_skill.AllowDBNull = false
            Me.columnteammate_power.AllowDBNull = false
            Me.columnteammate_skill.AllowDBNull = false
            Me.columnteammate_ltgt.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columnopd.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewartifactRow() As artifactRow
            Return CType(Me.NewRow,artifactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New artifactRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(artifactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.artifactRowChangedEvent) Is Nothing) Then
                RaiseEvent artifactRowChanged(Me, New artifactRowChangeEvent(CType(e.Row,artifactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.artifactRowChangingEvent) Is Nothing) Then
                RaiseEvent artifactRowChanging(Me, New artifactRowChangeEvent(CType(e.Row,artifactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.artifactRowDeletedEvent) Is Nothing) Then
                RaiseEvent artifactRowDeleted(Me, New artifactRowChangeEvent(CType(e.Row,artifactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.artifactRowDeletingEvent) Is Nothing) Then
                RaiseEvent artifactRowDeleting(Me, New artifactRowChangeEvent(CType(e.Row,artifactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveartifactRow(ByVal row As artifactRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "artifactDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class aspectDataTable
        Inherits Global.System.Data.TypedTableBase(Of aspectRow)
        
        Private columnaspect_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columnhomebase_id As Global.System.Data.DataColumn
        
        Private columneffect As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_alt As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columnopd As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "aspect"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property aspect_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaspect_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property homebase_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhomebase_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property effectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_altColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_alt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property opdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnopd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As aspectRow
            Get
                Return CType(Me.Rows(index),aspectRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event aspectRowChanging As aspectRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event aspectRowChanged As aspectRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event aspectRowDeleting As aspectRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event aspectRowDeleted As aspectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddaspectRow(ByVal row As aspectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddaspectRow(ByVal aspect_id As Object, ByVal name As String, ByVal code As String, ByVal homebase_id As Integer, ByVal effect As String, ByVal image As String, ByVal image_alt As String, ByVal image_back As String, ByVal expansion As String, ByVal opd As Integer, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As aspectRow
            Dim rowaspectRow As aspectRow = CType(Me.NewRow,aspectRow)
            Dim columnValuesArray() As Object = New Object() {aspect_id, name, code, homebase_id, effect, image, image_alt, image_back, expansion, opd, commonname, comment, rarity}
            rowaspectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaspectRow)
            Return rowaspectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByaspect_id(ByVal aspect_id As Object) As aspectRow
            Return CType(Me.Rows.Find(New Object() {aspect_id}),aspectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As aspectDataTable = CType(MyBase.Clone,aspectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New aspectDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnaspect_id = MyBase.Columns("aspect_id")
            Me.columnname = MyBase.Columns("name")
            Me.columncode = MyBase.Columns("code")
            Me.columnhomebase_id = MyBase.Columns("homebase_id")
            Me.columneffect = MyBase.Columns("effect")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_alt = MyBase.Columns("image_alt")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columnopd = MyBase.Columns("opd")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnaspect_id = New Global.System.Data.DataColumn("aspect_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaspect_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnhomebase_id = New Global.System.Data.DataColumn("homebase_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhomebase_id)
            Me.columneffect = New Global.System.Data.DataColumn("effect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffect)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_alt = New Global.System.Data.DataColumn("image_alt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_alt)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columnopd = New Global.System.Data.DataColumn("opd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopd)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnaspect_id}, true))
            Me.columnaspect_id.AllowDBNull = false
            Me.columnaspect_id.Unique = true
            Me.columnname.AllowDBNull = false
            Me.columncode.AllowDBNull = false
            Me.columnhomebase_id.AllowDBNull = false
            Me.columneffect.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_alt.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columnopd.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewaspectRow() As aspectRow
            Return CType(Me.NewRow,aspectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New aspectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(aspectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.aspectRowChangedEvent) Is Nothing) Then
                RaiseEvent aspectRowChanged(Me, New aspectRowChangeEvent(CType(e.Row,aspectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.aspectRowChangingEvent) Is Nothing) Then
                RaiseEvent aspectRowChanging(Me, New aspectRowChangeEvent(CType(e.Row,aspectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.aspectRowDeletedEvent) Is Nothing) Then
                RaiseEvent aspectRowDeleted(Me, New aspectRowChangeEvent(CType(e.Row,aspectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.aspectRowDeletingEvent) Is Nothing) Then
                RaiseEvent aspectRowDeleting(Me, New aspectRowChangeEvent(CType(e.Row,aspectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveaspectRow(ByVal row As aspectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "aspectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class basic_universeDataTable
        Inherits Global.System.Data.TypedTableBase(Of basic_universeRow)
        
        Private columnbasic_universe_id As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columntouse_power As Global.System.Data.DataColumn
        
        Private columntouse_skill As Global.System.Data.DataColumn
        
        Private columnbonus_power As Global.System.Data.DataColumn
        
        Private columnbonus_skill As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "basic_universe"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property basic_universe_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbasic_universe_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonus_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonus_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonus_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonus_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As basic_universeRow
            Get
                Return CType(Me.Rows(index),basic_universeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basic_universeRowChanging As basic_universeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basic_universeRowChanged As basic_universeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basic_universeRowDeleting As basic_universeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basic_universeRowDeleted As basic_universeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addbasic_universeRow(ByVal row As basic_universeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addbasic_universeRow(ByVal basic_universe_id As Object, ByVal hero As String, ByVal name As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal bonus_power As Integer, ByVal bonus_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As basic_universeRow
            Dim rowbasic_universeRow As basic_universeRow = CType(Me.NewRow,basic_universeRow)
            Dim columnValuesArray() As Object = New Object() {basic_universe_id, hero, name, touse_power, touse_skill, bonus_power, bonus_skill, image, image_back, expansion, commonname, comment, rarity}
            rowbasic_universeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbasic_universeRow)
            Return rowbasic_universeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBybasic_universe_id(ByVal basic_universe_id As Object) As basic_universeRow
            Return CType(Me.Rows.Find(New Object() {basic_universe_id}),basic_universeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As basic_universeDataTable = CType(MyBase.Clone,basic_universeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New basic_universeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnbasic_universe_id = MyBase.Columns("basic_universe_id")
            Me.columnhero = MyBase.Columns("hero")
            Me.columnname = MyBase.Columns("name")
            Me.columntouse_power = MyBase.Columns("touse_power")
            Me.columntouse_skill = MyBase.Columns("touse_skill")
            Me.columnbonus_power = MyBase.Columns("bonus_power")
            Me.columnbonus_skill = MyBase.Columns("bonus_skill")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnbasic_universe_id = New Global.System.Data.DataColumn("basic_universe_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbasic_universe_id)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columntouse_power = New Global.System.Data.DataColumn("touse_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_power)
            Me.columntouse_skill = New Global.System.Data.DataColumn("touse_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_skill)
            Me.columnbonus_power = New Global.System.Data.DataColumn("bonus_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonus_power)
            Me.columnbonus_skill = New Global.System.Data.DataColumn("bonus_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonus_skill)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnbasic_universe_id}, true))
            Me.columnbasic_universe_id.AllowDBNull = false
            Me.columnbasic_universe_id.Unique = true
            Me.columnhero.AllowDBNull = false
            Me.columnname.AllowDBNull = false
            Me.columntouse_power.AllowDBNull = false
            Me.columnbonus_power.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newbasic_universeRow() As basic_universeRow
            Return CType(Me.NewRow,basic_universeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New basic_universeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(basic_universeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.basic_universeRowChangedEvent) Is Nothing) Then
                RaiseEvent basic_universeRowChanged(Me, New basic_universeRowChangeEvent(CType(e.Row,basic_universeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.basic_universeRowChangingEvent) Is Nothing) Then
                RaiseEvent basic_universeRowChanging(Me, New basic_universeRowChangeEvent(CType(e.Row,basic_universeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.basic_universeRowDeletedEvent) Is Nothing) Then
                RaiseEvent basic_universeRowDeleted(Me, New basic_universeRowChangeEvent(CType(e.Row,basic_universeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.basic_universeRowDeletingEvent) Is Nothing) Then
                RaiseEvent basic_universeRowDeleting(Me, New basic_universeRowChangeEvent(CType(e.Row,basic_universeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removebasic_universeRow(ByVal row As basic_universeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "basic_universeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class charactersDataTable
        Inherits Global.System.Data.TypedTableBase(Of charactersRow)
        
        Private columncid As Global.System.Data.DataColumn
        
        Private columnuid As Global.System.Data.DataColumn
        
        Private columnname_on_card As Global.System.Data.DataColumn
        
        Private columne As Global.System.Data.DataColumn
        
        Private columnf As Global.System.Data.DataColumn
        
        Private _columns As Global.System.Data.DataColumn
        
        Private columni As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columndccode As Global.System.Data.DataColumn
        
        Private columninherent As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "characters"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property uidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property name_on_cardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname_on_card
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property eColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columns
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property iColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columni
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dccodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndccode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property inherentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninherent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As charactersRow
            Get
                Return CType(Me.Rows(index),charactersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event charactersRowChanging As charactersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event charactersRowChanged As charactersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event charactersRowDeleting As charactersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event charactersRowDeleted As charactersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcharactersRow(ByVal row As charactersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcharactersRow( _
                    ByVal cid As Object,  _
                    ByVal uid As Integer,  _
                    ByVal name_on_card As String,  _
                    ByVal e As Integer,  _
                    ByVal f As Integer,  _
                    ByVal s As Integer,  _
                    ByVal i As Integer,  _
                    ByVal total As Integer,  _
                    ByVal expansion As String,  _
                    ByVal dccode As String,  _
                    ByVal inherent As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String) As charactersRow
            Dim rowcharactersRow As charactersRow = CType(Me.NewRow,charactersRow)
            Dim columnValuesArray() As Object = New Object() {cid, uid, name_on_card, e, f, s, i, total, expansion, dccode, inherent, image, image_back, commonname, comment, rarity}
            rowcharactersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcharactersRow)
            Return rowcharactersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBycid(ByVal cid As Object) As charactersRow
            Return CType(Me.Rows.Find(New Object() {cid}),charactersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As charactersDataTable = CType(MyBase.Clone,charactersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New charactersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncid = MyBase.Columns("cid")
            Me.columnuid = MyBase.Columns("uid")
            Me.columnname_on_card = MyBase.Columns("name_on_card")
            Me.columne = MyBase.Columns("e")
            Me.columnf = MyBase.Columns("f")
            Me._columns = MyBase.Columns("s")
            Me.columni = MyBase.Columns("i")
            Me.columntotal = MyBase.Columns("total")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columndccode = MyBase.Columns("dccode")
            Me.columninherent = MyBase.Columns("inherent")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncid = New Global.System.Data.DataColumn("cid", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncid)
            Me.columnuid = New Global.System.Data.DataColumn("uid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuid)
            Me.columnname_on_card = New Global.System.Data.DataColumn("name_on_card", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname_on_card)
            Me.columne = New Global.System.Data.DataColumn("e", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columne)
            Me.columnf = New Global.System.Data.DataColumn("f", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnf)
            Me._columns = New Global.System.Data.DataColumn("s", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columns.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columns")
            Me._columns.ExtendedProperties.Add("Generator_UserColumnName", "s")
            MyBase.Columns.Add(Me._columns)
            Me.columni = New Global.System.Data.DataColumn("i", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columni)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columndccode = New Global.System.Data.DataColumn("dccode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndccode)
            Me.columninherent = New Global.System.Data.DataColumn("inherent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninherent)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columncid}, true))
            Me.columncid.AllowDBNull = false
            Me.columncid.Unique = true
            Me.columnuid.AllowDBNull = false
            Me.columnname_on_card.AllowDBNull = false
            Me.columntotal.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columndccode.AllowDBNull = false
            Me.columninherent.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcharactersRow() As charactersRow
            Return CType(Me.NewRow,charactersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New charactersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(charactersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.charactersRowChangedEvent) Is Nothing) Then
                RaiseEvent charactersRowChanged(Me, New charactersRowChangeEvent(CType(e.Row,charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.charactersRowChangingEvent) Is Nothing) Then
                RaiseEvent charactersRowChanging(Me, New charactersRowChangeEvent(CType(e.Row,charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.charactersRowDeletedEvent) Is Nothing) Then
                RaiseEvent charactersRowDeleted(Me, New charactersRowChangeEvent(CType(e.Row,charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.charactersRowDeletingEvent) Is Nothing) Then
                RaiseEvent charactersRowDeleting(Me, New charactersRowChangeEvent(CType(e.Row,charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecharactersRow(ByVal row As charactersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "charactersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class characters_nameDataTable
        Inherits Global.System.Data.TypedTableBase(Of characters_nameRow)
        
        Private columnuid As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "characters_name"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property uidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As characters_nameRow
            Get
                Return CType(Me.Rows(index),characters_nameRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_nameRowChanging As characters_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_nameRowChanged As characters_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_nameRowDeleting As characters_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_nameRowDeleted As characters_nameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addcharacters_nameRow(ByVal row As characters_nameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addcharacters_nameRow(ByVal uid As Object, ByVal name As String) As characters_nameRow
            Dim rowcharacters_nameRow As characters_nameRow = CType(Me.NewRow,characters_nameRow)
            Dim columnValuesArray() As Object = New Object() {uid, name}
            rowcharacters_nameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcharacters_nameRow)
            Return rowcharacters_nameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByuid(ByVal uid As Object) As characters_nameRow
            Return CType(Me.Rows.Find(New Object() {uid}),characters_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As characters_nameDataTable = CType(MyBase.Clone,characters_nameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New characters_nameDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnuid = MyBase.Columns("uid")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnuid = New Global.System.Data.DataColumn("uid", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuid)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnuid}, true))
            Me.columnuid.AllowDBNull = false
            Me.columnuid.Unique = true
            Me.columnname.AllowDBNull = false
            Me.columnname.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newcharacters_nameRow() As characters_nameRow
            Return CType(Me.NewRow,characters_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New characters_nameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(characters_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.characters_nameRowChangedEvent) Is Nothing) Then
                RaiseEvent characters_nameRowChanged(Me, New characters_nameRowChangeEvent(CType(e.Row,characters_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.characters_nameRowChangingEvent) Is Nothing) Then
                RaiseEvent characters_nameRowChanging(Me, New characters_nameRowChangeEvent(CType(e.Row,characters_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.characters_nameRowDeletedEvent) Is Nothing) Then
                RaiseEvent characters_nameRowDeleted(Me, New characters_nameRowChangeEvent(CType(e.Row,characters_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.characters_nameRowDeletingEvent) Is Nothing) Then
                RaiseEvent characters_nameRowDeleting(Me, New characters_nameRowChangeEvent(CType(e.Row,characters_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removecharacters_nameRow(ByVal row As characters_nameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "characters_nameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class characters_specialsDataTable
        Inherits Global.System.Data.TypedTableBase(Of characters_specialsRow)
        
        Private columncid As Global.System.Data.DataColumn
        
        Private columnuid As Global.System.Data.DataColumn
        
        Private columncan_play_opd As Global.System.Data.DataColumn
        
        Private columncan_play_non_opd As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "characters_specials"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property uidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property can_play_opdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncan_play_opd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property can_play_non_opdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncan_play_non_opd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As characters_specialsRow
            Get
                Return CType(Me.Rows(index),characters_specialsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specialsRowChanging As characters_specialsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specialsRowChanged As characters_specialsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specialsRowDeleting As characters_specialsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specialsRowDeleted As characters_specialsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addcharacters_specialsRow(ByVal row As characters_specialsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addcharacters_specialsRow(ByVal cid As Integer, ByVal uid As Integer, ByVal can_play_opd As Integer, ByVal can_play_non_opd As Integer) As characters_specialsRow
            Dim rowcharacters_specialsRow As characters_specialsRow = CType(Me.NewRow,characters_specialsRow)
            Dim columnValuesArray() As Object = New Object() {cid, uid, can_play_opd, can_play_non_opd}
            rowcharacters_specialsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcharacters_specialsRow)
            Return rowcharacters_specialsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As characters_specialsDataTable = CType(MyBase.Clone,characters_specialsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New characters_specialsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncid = MyBase.Columns("cid")
            Me.columnuid = MyBase.Columns("uid")
            Me.columncan_play_opd = MyBase.Columns("can_play_opd")
            Me.columncan_play_non_opd = MyBase.Columns("can_play_non_opd")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncid = New Global.System.Data.DataColumn("cid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncid)
            Me.columnuid = New Global.System.Data.DataColumn("uid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuid)
            Me.columncan_play_opd = New Global.System.Data.DataColumn("can_play_opd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncan_play_opd)
            Me.columncan_play_non_opd = New Global.System.Data.DataColumn("can_play_non_opd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncan_play_non_opd)
            Me.columncid.AllowDBNull = false
            Me.columnuid.AllowDBNull = false
            Me.columncan_play_opd.AllowDBNull = false
            Me.columncan_play_non_opd.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newcharacters_specialsRow() As characters_specialsRow
            Return CType(Me.NewRow,characters_specialsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New characters_specialsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(characters_specialsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.characters_specialsRowChangedEvent) Is Nothing) Then
                RaiseEvent characters_specialsRowChanged(Me, New characters_specialsRowChangeEvent(CType(e.Row,characters_specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.characters_specialsRowChangingEvent) Is Nothing) Then
                RaiseEvent characters_specialsRowChanging(Me, New characters_specialsRowChangeEvent(CType(e.Row,characters_specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.characters_specialsRowDeletedEvent) Is Nothing) Then
                RaiseEvent characters_specialsRowDeleted(Me, New characters_specialsRowChangeEvent(CType(e.Row,characters_specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.characters_specialsRowDeletingEvent) Is Nothing) Then
                RaiseEvent characters_specialsRowDeleting(Me, New characters_specialsRowChangeEvent(CType(e.Row,characters_specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removecharacters_specialsRow(ByVal row As characters_specialsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "characters_specialsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class characters_specials_singleDataTable
        Inherits Global.System.Data.TypedTableBase(Of characters_specials_singleRow)
        
        Private columncid As Global.System.Data.DataColumn
        
        Private columnspecials_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "characters_specials_single"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property specials_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspecials_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As characters_specials_singleRow
            Get
                Return CType(Me.Rows(index),characters_specials_singleRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specials_singleRowChanging As characters_specials_singleRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specials_singleRowChanged As characters_specials_singleRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specials_singleRowDeleting As characters_specials_singleRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event characters_specials_singleRowDeleted As characters_specials_singleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addcharacters_specials_singleRow(ByVal row As characters_specials_singleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addcharacters_specials_singleRow(ByVal cid As Integer, ByVal specials_id As Integer) As characters_specials_singleRow
            Dim rowcharacters_specials_singleRow As characters_specials_singleRow = CType(Me.NewRow,characters_specials_singleRow)
            Dim columnValuesArray() As Object = New Object() {cid, specials_id}
            rowcharacters_specials_singleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcharacters_specials_singleRow)
            Return rowcharacters_specials_singleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As characters_specials_singleDataTable = CType(MyBase.Clone,characters_specials_singleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New characters_specials_singleDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncid = MyBase.Columns("cid")
            Me.columnspecials_id = MyBase.Columns("specials_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncid = New Global.System.Data.DataColumn("cid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncid)
            Me.columnspecials_id = New Global.System.Data.DataColumn("specials_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspecials_id)
            Me.columncid.AllowDBNull = false
            Me.columnspecials_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newcharacters_specials_singleRow() As characters_specials_singleRow
            Return CType(Me.NewRow,characters_specials_singleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New characters_specials_singleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(characters_specials_singleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.characters_specials_singleRowChangedEvent) Is Nothing) Then
                RaiseEvent characters_specials_singleRowChanged(Me, New characters_specials_singleRowChangeEvent(CType(e.Row,characters_specials_singleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.characters_specials_singleRowChangingEvent) Is Nothing) Then
                RaiseEvent characters_specials_singleRowChanging(Me, New characters_specials_singleRowChangeEvent(CType(e.Row,characters_specials_singleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.characters_specials_singleRowDeletedEvent) Is Nothing) Then
                RaiseEvent characters_specials_singleRowDeleted(Me, New characters_specials_singleRowChangeEvent(CType(e.Row,characters_specials_singleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.characters_specials_singleRowDeletingEvent) Is Nothing) Then
                RaiseEvent characters_specials_singleRowDeleting(Me, New characters_specials_singleRowChangeEvent(CType(e.Row,characters_specials_singleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removecharacters_specials_singleRow(ByVal row As characters_specials_singleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "characters_specials_singleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class code_variantDataTable
        Inherits Global.System.Data.TypedTableBase(Of code_variantRow)
        
        Private columncode_variant As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "code_variant"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property code_variantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode_variant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As code_variantRow
            Get
                Return CType(Me.Rows(index),code_variantRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event code_variantRowChanging As code_variantRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event code_variantRowChanged As code_variantRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event code_variantRowDeleting As code_variantRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event code_variantRowDeleted As code_variantRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addcode_variantRow(ByVal row As code_variantRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addcode_variantRow(ByVal code_variant As String) As code_variantRow
            Dim rowcode_variantRow As code_variantRow = CType(Me.NewRow,code_variantRow)
            Dim columnValuesArray() As Object = New Object() {code_variant}
            rowcode_variantRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcode_variantRow)
            Return rowcode_variantRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBycode_variant(ByVal code_variant As String) As code_variantRow
            Return CType(Me.Rows.Find(New Object() {code_variant}),code_variantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As code_variantDataTable = CType(MyBase.Clone,code_variantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New code_variantDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncode_variant = MyBase.Columns("code_variant")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncode_variant = New Global.System.Data.DataColumn("code_variant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode_variant)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncode_variant}, true))
            Me.columncode_variant.AllowDBNull = false
            Me.columncode_variant.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newcode_variantRow() As code_variantRow
            Return CType(Me.NewRow,code_variantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New code_variantRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(code_variantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.code_variantRowChangedEvent) Is Nothing) Then
                RaiseEvent code_variantRowChanged(Me, New code_variantRowChangeEvent(CType(e.Row,code_variantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.code_variantRowChangingEvent) Is Nothing) Then
                RaiseEvent code_variantRowChanging(Me, New code_variantRowChangeEvent(CType(e.Row,code_variantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.code_variantRowDeletedEvent) Is Nothing) Then
                RaiseEvent code_variantRowDeleted(Me, New code_variantRowChangeEvent(CType(e.Row,code_variantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.code_variantRowDeletingEvent) Is Nothing) Then
                RaiseEvent code_variantRowDeleting(Me, New code_variantRowChangeEvent(CType(e.Row,code_variantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removecode_variantRow(ByVal row As code_variantRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "code_variantDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dccodeDataTable
        Inherits Global.System.Data.TypedTableBase(Of dccodeRow)
        
        Private columndccode As Global.System.Data.DataColumn
        
        Private columntype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dccode"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dccodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndccode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dccodeRow
            Get
                Return CType(Me.Rows(index),dccodeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dccodeRowChanging As dccodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dccodeRowChanged As dccodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dccodeRowDeleting As dccodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dccodeRowDeleted As dccodeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AdddccodeRow(ByVal row As dccodeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AdddccodeRow(ByVal dccode As String, ByVal type As String) As dccodeRow
            Dim rowdccodeRow As dccodeRow = CType(Me.NewRow,dccodeRow)
            Dim columnValuesArray() As Object = New Object() {dccode, type}
            rowdccodeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdccodeRow)
            Return rowdccodeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBydccode(ByVal dccode As String) As dccodeRow
            Return CType(Me.Rows.Find(New Object() {dccode}),dccodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dccodeDataTable = CType(MyBase.Clone,dccodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dccodeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndccode = MyBase.Columns("dccode")
            Me.columntype = MyBase.Columns("type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columndccode = New Global.System.Data.DataColumn("dccode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndccode)
            Me.columntype = New Global.System.Data.DataColumn("type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columndccode}, true))
            Me.columndccode.AllowDBNull = false
            Me.columndccode.Unique = true
            Me.columntype.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewdccodeRow() As dccodeRow
            Return CType(Me.NewRow,dccodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dccodeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dccodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dccodeRowChangedEvent) Is Nothing) Then
                RaiseEvent dccodeRowChanged(Me, New dccodeRowChangeEvent(CType(e.Row,dccodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dccodeRowChangingEvent) Is Nothing) Then
                RaiseEvent dccodeRowChanging(Me, New dccodeRowChangeEvent(CType(e.Row,dccodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dccodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent dccodeRowDeleted(Me, New dccodeRowChangeEvent(CType(e.Row,dccodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dccodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent dccodeRowDeleting(Me, New dccodeRowChangeEvent(CType(e.Row,dccodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovedccodeRow(ByVal row As dccodeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dccodeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class doubleshotDataTable
        Inherits Global.System.Data.TypedTableBase(Of doubleshotRow)
        
        Private columndoubleshot_id As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columntouse_power As Global.System.Data.DataColumn
        
        Private columntouse_skill As Global.System.Data.DataColumn
        
        Private columnteammate_power As Global.System.Data.DataColumn
        
        Private columnteammate_skill As Global.System.Data.DataColumn
        
        Private columnactas_skill As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "doubleshot"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property doubleshot_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoubleshot_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actas_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactas_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As doubleshotRow
            Get
                Return CType(Me.Rows(index),doubleshotRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event doubleshotRowChanging As doubleshotRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event doubleshotRowChanged As doubleshotRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event doubleshotRowDeleting As doubleshotRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event doubleshotRowDeleted As doubleshotRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AdddoubleshotRow(ByVal row As doubleshotRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AdddoubleshotRow(ByVal doubleshot_id As Object, ByVal hero As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal teammate_power As Integer, ByVal teammate_skill As String, ByVal actas_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As doubleshotRow
            Dim rowdoubleshotRow As doubleshotRow = CType(Me.NewRow,doubleshotRow)
            Dim columnValuesArray() As Object = New Object() {doubleshot_id, hero, touse_power, touse_skill, teammate_power, teammate_skill, actas_skill, image, image_back, expansion, commonname, comment, rarity}
            rowdoubleshotRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdoubleshotRow)
            Return rowdoubleshotRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBydoubleshot_id(ByVal doubleshot_id As Object) As doubleshotRow
            Return CType(Me.Rows.Find(New Object() {doubleshot_id}),doubleshotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As doubleshotDataTable = CType(MyBase.Clone,doubleshotDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New doubleshotDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndoubleshot_id = MyBase.Columns("doubleshot_id")
            Me.columnhero = MyBase.Columns("hero")
            Me.columntouse_power = MyBase.Columns("touse_power")
            Me.columntouse_skill = MyBase.Columns("touse_skill")
            Me.columnteammate_power = MyBase.Columns("teammate_power")
            Me.columnteammate_skill = MyBase.Columns("teammate_skill")
            Me.columnactas_skill = MyBase.Columns("actas_skill")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columndoubleshot_id = New Global.System.Data.DataColumn("doubleshot_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoubleshot_id)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columntouse_power = New Global.System.Data.DataColumn("touse_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_power)
            Me.columntouse_skill = New Global.System.Data.DataColumn("touse_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_skill)
            Me.columnteammate_power = New Global.System.Data.DataColumn("teammate_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate_power)
            Me.columnteammate_skill = New Global.System.Data.DataColumn("teammate_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate_skill)
            Me.columnactas_skill = New Global.System.Data.DataColumn("actas_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactas_skill)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columndoubleshot_id}, true))
            Me.columndoubleshot_id.AllowDBNull = false
            Me.columndoubleshot_id.Unique = true
            Me.columnhero.AllowDBNull = false
            Me.columntouse_power.AllowDBNull = false
            Me.columntouse_skill.AllowDBNull = false
            Me.columnteammate_power.AllowDBNull = false
            Me.columnteammate_skill.AllowDBNull = false
            Me.columnactas_skill.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewdoubleshotRow() As doubleshotRow
            Return CType(Me.NewRow,doubleshotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New doubleshotRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(doubleshotRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.doubleshotRowChangedEvent) Is Nothing) Then
                RaiseEvent doubleshotRowChanged(Me, New doubleshotRowChangeEvent(CType(e.Row,doubleshotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.doubleshotRowChangingEvent) Is Nothing) Then
                RaiseEvent doubleshotRowChanging(Me, New doubleshotRowChangeEvent(CType(e.Row,doubleshotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.doubleshotRowDeletedEvent) Is Nothing) Then
                RaiseEvent doubleshotRowDeleted(Me, New doubleshotRowChangeEvent(CType(e.Row,doubleshotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.doubleshotRowDeletingEvent) Is Nothing) Then
                RaiseEvent doubleshotRowDeleting(Me, New doubleshotRowChangeEvent(CType(e.Row,doubleshotRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovedoubleshotRow(ByVal row As doubleshotRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "doubleshotDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class eventDataTable
        Inherits Global.System.Data.TypedTableBase(Of eventRow)
        
        Private columnevent_id As Global.System.Data.DataColumn
        
        Private columnmission_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columnevent_text As Global.System.Data.DataColumn
        
        Private columneffect As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "event"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property event_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevent_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mission_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmission_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property event_textColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevent_text
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property effectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As eventRow
            Get
                Return CType(Me.Rows(index),eventRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event eventRowChanging As eventRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event eventRowChanged As eventRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event eventRowDeleting As eventRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event eventRowDeleted As eventRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddeventRow(ByVal row As eventRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddeventRow(ByVal event_id As Object, ByVal mission_id As Integer, ByVal name As String, ByVal hero As String, ByVal event_text As String, ByVal effect As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As eventRow
            Dim roweventRow As eventRow = CType(Me.NewRow,eventRow)
            Dim columnValuesArray() As Object = New Object() {event_id, mission_id, name, hero, event_text, effect, image, image_back, expansion, commonname, comment, rarity}
            roweventRow.ItemArray = columnValuesArray
            Me.Rows.Add(roweventRow)
            Return roweventRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByevent_id(ByVal event_id As Object) As eventRow
            Return CType(Me.Rows.Find(New Object() {event_id}),eventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As eventDataTable = CType(MyBase.Clone,eventDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New eventDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnevent_id = MyBase.Columns("event_id")
            Me.columnmission_id = MyBase.Columns("mission_id")
            Me.columnname = MyBase.Columns("name")
            Me.columnhero = MyBase.Columns("hero")
            Me.columnevent_text = MyBase.Columns("event_text")
            Me.columneffect = MyBase.Columns("effect")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnevent_id = New Global.System.Data.DataColumn("event_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnevent_id)
            Me.columnmission_id = New Global.System.Data.DataColumn("mission_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmission_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columnevent_text = New Global.System.Data.DataColumn("event_text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnevent_text)
            Me.columneffect = New Global.System.Data.DataColumn("effect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffect)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnevent_id}, true))
            Me.columnevent_id.AllowDBNull = false
            Me.columnevent_id.Unique = true
            Me.columnmission_id.AllowDBNull = false
            Me.columnname.AllowDBNull = false
            Me.columnhero.AllowDBNull = false
            Me.columnevent_text.AllowDBNull = false
            Me.columneffect.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "eventRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "eventRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "eventRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "eventDataTable")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableevent")
            Me.ExtendedProperties.Add("Generator_UserTableName", "event")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NeweventRow() As eventRow
            Return CType(Me.NewRow,eventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New eventRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(eventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.eventRowChangedEvent) Is Nothing) Then
                RaiseEvent eventRowChanged(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.eventRowChangingEvent) Is Nothing) Then
                RaiseEvent eventRowChanging(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.eventRowDeletedEvent) Is Nothing) Then
                RaiseEvent eventRowDeleted(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.eventRowDeletingEvent) Is Nothing) Then
                RaiseEvent eventRowDeleting(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveeventRow(ByVal row As eventRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "eventDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class expansionDataTable
        Inherits Global.System.Data.TypedTableBase(Of expansionRow)
        
        Private columnexp As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columnrelease_date As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "expansion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property release_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrelease_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As expansionRow
            Get
                Return CType(Me.Rows(index),expansionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event expansionRowChanging As expansionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event expansionRowChanged As expansionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event expansionRowDeleting As expansionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event expansionRowDeleted As expansionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddexpansionRow(ByVal row As expansionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddexpansionRow(ByVal exp As String, ByVal expansion As String, ByVal release_date As Date) As expansionRow
            Dim rowexpansionRow As expansionRow = CType(Me.NewRow,expansionRow)
            Dim columnValuesArray() As Object = New Object() {exp, expansion, release_date}
            rowexpansionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowexpansionRow)
            Return rowexpansionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByexp(ByVal exp As String) As expansionRow
            Return CType(Me.Rows.Find(New Object() {exp}),expansionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As expansionDataTable = CType(MyBase.Clone,expansionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New expansionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnexp = MyBase.Columns("exp")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columnrelease_date = MyBase.Columns("release_date")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnexp = New Global.System.Data.DataColumn("exp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexp)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columnrelease_date = New Global.System.Data.DataColumn("release_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrelease_date)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnexp}, true))
            Me.columnexp.AllowDBNull = false
            Me.columnexp.Unique = true
            Me.columnexpansion.AllowDBNull = false
            Me.columnrelease_date.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewexpansionRow() As expansionRow
            Return CType(Me.NewRow,expansionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New expansionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(expansionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.expansionRowChangedEvent) Is Nothing) Then
                RaiseEvent expansionRowChanged(Me, New expansionRowChangeEvent(CType(e.Row,expansionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.expansionRowChangingEvent) Is Nothing) Then
                RaiseEvent expansionRowChanging(Me, New expansionRowChangeEvent(CType(e.Row,expansionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.expansionRowDeletedEvent) Is Nothing) Then
                RaiseEvent expansionRowDeleted(Me, New expansionRowChangeEvent(CType(e.Row,expansionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.expansionRowDeletingEvent) Is Nothing) Then
                RaiseEvent expansionRowDeleting(Me, New expansionRowChangeEvent(CType(e.Row,expansionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveexpansionRow(ByVal row As expansionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "expansionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class homebasesDataTable
        Inherits Global.System.Data.TypedTableBase(Of homebasesRow)
        
        Private columnhomebase_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnvariant As Global.System.Data.DataColumn
        
        Private columninherent As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "homebases"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property homebase_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhomebase_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property variantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvariant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property inherentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninherent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As homebasesRow
            Get
                Return CType(Me.Rows(index),homebasesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebasesRowChanging As homebasesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebasesRowChanged As homebasesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebasesRowDeleting As homebasesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebasesRowDeleted As homebasesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddhomebasesRow(ByVal row As homebasesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddhomebasesRow(ByVal homebase_id As Object, ByVal name As String, ByVal _variant As String, ByVal inherent As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As homebasesRow
            Dim rowhomebasesRow As homebasesRow = CType(Me.NewRow,homebasesRow)
            Dim columnValuesArray() As Object = New Object() {homebase_id, name, _variant, inherent, image, image_back, expansion, commonname, comment, rarity}
            rowhomebasesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhomebasesRow)
            Return rowhomebasesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As homebasesDataTable = CType(MyBase.Clone,homebasesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New homebasesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnhomebase_id = MyBase.Columns("homebase_id")
            Me.columnname = MyBase.Columns("name")
            Me.columnvariant = MyBase.Columns("variant")
            Me.columninherent = MyBase.Columns("inherent")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnhomebase_id = New Global.System.Data.DataColumn("homebase_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhomebase_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnvariant = New Global.System.Data.DataColumn("variant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnvariant.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "variantColumn")
            Me.columnvariant.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnvariant")
            Me.columnvariant.ExtendedProperties.Add("Generator_UserColumnName", "variant")
            MyBase.Columns.Add(Me.columnvariant)
            Me.columninherent = New Global.System.Data.DataColumn("inherent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninherent)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.columnname.AllowDBNull = false
            Me.columnvariant.AllowDBNull = false
            Me.columninherent.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewhomebasesRow() As homebasesRow
            Return CType(Me.NewRow,homebasesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New homebasesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(homebasesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.homebasesRowChangedEvent) Is Nothing) Then
                RaiseEvent homebasesRowChanged(Me, New homebasesRowChangeEvent(CType(e.Row,homebasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.homebasesRowChangingEvent) Is Nothing) Then
                RaiseEvent homebasesRowChanging(Me, New homebasesRowChangeEvent(CType(e.Row,homebasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.homebasesRowDeletedEvent) Is Nothing) Then
                RaiseEvent homebasesRowDeleted(Me, New homebasesRowChangeEvent(CType(e.Row,homebasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.homebasesRowDeletingEvent) Is Nothing) Then
                RaiseEvent homebasesRowDeleting(Me, New homebasesRowChangeEvent(CType(e.Row,homebasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovehomebasesRow(ByVal row As homebasesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "homebasesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class homebases_charactersDataTable
        Inherits Global.System.Data.TypedTableBase(Of homebases_charactersRow)
        
        Private columnhomebase_id As Global.System.Data.DataColumn
        
        Private columncid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "homebases_characters"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property homebase_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhomebase_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As homebases_charactersRow
            Get
                Return CType(Me.Rows(index),homebases_charactersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_charactersRowChanging As homebases_charactersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_charactersRowChanged As homebases_charactersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_charactersRowDeleting As homebases_charactersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_charactersRowDeleted As homebases_charactersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addhomebases_charactersRow(ByVal row As homebases_charactersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addhomebases_charactersRow(ByVal homebase_id As Integer, ByVal cid As Integer) As homebases_charactersRow
            Dim rowhomebases_charactersRow As homebases_charactersRow = CType(Me.NewRow,homebases_charactersRow)
            Dim columnValuesArray() As Object = New Object() {homebase_id, cid}
            rowhomebases_charactersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhomebases_charactersRow)
            Return rowhomebases_charactersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByhomebase_idcid(ByVal homebase_id As Integer, ByVal cid As Integer) As homebases_charactersRow
            Return CType(Me.Rows.Find(New Object() {homebase_id, cid}),homebases_charactersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As homebases_charactersDataTable = CType(MyBase.Clone,homebases_charactersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New homebases_charactersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnhomebase_id = MyBase.Columns("homebase_id")
            Me.columncid = MyBase.Columns("cid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnhomebase_id = New Global.System.Data.DataColumn("homebase_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhomebase_id)
            Me.columncid = New Global.System.Data.DataColumn("cid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnhomebase_id, Me.columncid}, true))
            Me.columnhomebase_id.AllowDBNull = false
            Me.columncid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newhomebases_charactersRow() As homebases_charactersRow
            Return CType(Me.NewRow,homebases_charactersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New homebases_charactersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(homebases_charactersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.homebases_charactersRowChangedEvent) Is Nothing) Then
                RaiseEvent homebases_charactersRowChanged(Me, New homebases_charactersRowChangeEvent(CType(e.Row,homebases_charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.homebases_charactersRowChangingEvent) Is Nothing) Then
                RaiseEvent homebases_charactersRowChanging(Me, New homebases_charactersRowChangeEvent(CType(e.Row,homebases_charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.homebases_charactersRowDeletedEvent) Is Nothing) Then
                RaiseEvent homebases_charactersRowDeleted(Me, New homebases_charactersRowChangeEvent(CType(e.Row,homebases_charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.homebases_charactersRowDeletingEvent) Is Nothing) Then
                RaiseEvent homebases_charactersRowDeleting(Me, New homebases_charactersRowChangeEvent(CType(e.Row,homebases_charactersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removehomebases_charactersRow(ByVal row As homebases_charactersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "homebases_charactersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class homebases_nameDataTable
        Inherits Global.System.Data.TypedTableBase(Of homebases_nameRow)
        
        Private columnhomebase_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "homebases_name"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property homebase_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhomebase_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As homebases_nameRow
            Get
                Return CType(Me.Rows(index),homebases_nameRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_nameRowChanging As homebases_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_nameRowChanged As homebases_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_nameRowDeleting As homebases_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event homebases_nameRowDeleted As homebases_nameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addhomebases_nameRow(ByVal row As homebases_nameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addhomebases_nameRow(ByVal homebase_id As Object, ByVal name As String) As homebases_nameRow
            Dim rowhomebases_nameRow As homebases_nameRow = CType(Me.NewRow,homebases_nameRow)
            Dim columnValuesArray() As Object = New Object() {homebase_id, name}
            rowhomebases_nameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhomebases_nameRow)
            Return rowhomebases_nameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByhomebase_id(ByVal homebase_id As Object) As homebases_nameRow
            Return CType(Me.Rows.Find(New Object() {homebase_id}),homebases_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As homebases_nameDataTable = CType(MyBase.Clone,homebases_nameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New homebases_nameDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnhomebase_id = MyBase.Columns("homebase_id")
            Me.columnname = MyBase.Columns("name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnhomebase_id = New Global.System.Data.DataColumn("homebase_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhomebase_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnhomebase_id}, true))
            Me.columnhomebase_id.AllowDBNull = false
            Me.columnhomebase_id.Unique = true
            Me.columnname.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newhomebases_nameRow() As homebases_nameRow
            Return CType(Me.NewRow,homebases_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New homebases_nameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(homebases_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.homebases_nameRowChangedEvent) Is Nothing) Then
                RaiseEvent homebases_nameRowChanged(Me, New homebases_nameRowChangeEvent(CType(e.Row,homebases_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.homebases_nameRowChangingEvent) Is Nothing) Then
                RaiseEvent homebases_nameRowChanging(Me, New homebases_nameRowChangeEvent(CType(e.Row,homebases_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.homebases_nameRowDeletedEvent) Is Nothing) Then
                RaiseEvent homebases_nameRowDeleted(Me, New homebases_nameRowChangeEvent(CType(e.Row,homebases_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.homebases_nameRowDeletingEvent) Is Nothing) Then
                RaiseEvent homebases_nameRowDeleting(Me, New homebases_nameRowChangeEvent(CType(e.Row,homebases_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removehomebases_nameRow(ByVal row As homebases_nameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "homebases_nameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class missionsDataTable
        Inherits Global.System.Data.TypedTableBase(Of missionsRow)
        
        Private columnmissions_id As Global.System.Data.DataColumn
        
        Private columnmission_id As Global.System.Data.DataColumn
        
        Private columnnumber As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columnmission_title As Global.System.Data.DataColumn
        
        Private columnmission_text As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "missions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property missions_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmissions_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mission_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmission_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mission_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmission_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mission_textColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmission_text
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As missionsRow
            Get
                Return CType(Me.Rows(index),missionsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missionsRowChanging As missionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missionsRowChanged As missionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missionsRowDeleting As missionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missionsRowDeleted As missionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddmissionsRow(ByVal row As missionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddmissionsRow(ByVal missions_id As Object, ByVal mission_id As Integer, ByVal number As Integer, ByVal hero As String, ByVal mission_title As String, ByVal mission_text As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As missionsRow
            Dim rowmissionsRow As missionsRow = CType(Me.NewRow,missionsRow)
            Dim columnValuesArray() As Object = New Object() {missions_id, mission_id, number, hero, mission_title, mission_text, image, image_back, expansion, commonname, comment, rarity}
            rowmissionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmissionsRow)
            Return rowmissionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBymissions_id(ByVal missions_id As Object) As missionsRow
            Return CType(Me.Rows.Find(New Object() {missions_id}),missionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As missionsDataTable = CType(MyBase.Clone,missionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New missionsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnmissions_id = MyBase.Columns("missions_id")
            Me.columnmission_id = MyBase.Columns("mission_id")
            Me.columnnumber = MyBase.Columns("number")
            Me.columnhero = MyBase.Columns("hero")
            Me.columnmission_title = MyBase.Columns("mission_title")
            Me.columnmission_text = MyBase.Columns("mission_text")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnmissions_id = New Global.System.Data.DataColumn("missions_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmissions_id)
            Me.columnmission_id = New Global.System.Data.DataColumn("mission_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmission_id)
            Me.columnnumber = New Global.System.Data.DataColumn("number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumber)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columnmission_title = New Global.System.Data.DataColumn("mission_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmission_title)
            Me.columnmission_text = New Global.System.Data.DataColumn("mission_text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmission_text)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnmissions_id}, true))
            Me.columnmissions_id.AllowDBNull = false
            Me.columnmissions_id.Unique = true
            Me.columnmission_id.AllowDBNull = false
            Me.columnnumber.AllowDBNull = false
            Me.columnhero.AllowDBNull = false
            Me.columnmission_title.AllowDBNull = false
            Me.columnmission_text.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewmissionsRow() As missionsRow
            Return CType(Me.NewRow,missionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New missionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(missionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.missionsRowChangedEvent) Is Nothing) Then
                RaiseEvent missionsRowChanged(Me, New missionsRowChangeEvent(CType(e.Row,missionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.missionsRowChangingEvent) Is Nothing) Then
                RaiseEvent missionsRowChanging(Me, New missionsRowChangeEvent(CType(e.Row,missionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.missionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent missionsRowDeleted(Me, New missionsRowChangeEvent(CType(e.Row,missionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.missionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent missionsRowDeleting(Me, New missionsRowChangeEvent(CType(e.Row,missionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovemissionsRow(ByVal row As missionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "missionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class missions_nameDataTable
        Inherits Global.System.Data.TypedTableBase(Of missions_nameRow)
        
        Private columnmission_id As Global.System.Data.DataColumn
        
        Private columnmission_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "missions_name"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mission_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmission_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mission_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmission_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As missions_nameRow
            Get
                Return CType(Me.Rows(index),missions_nameRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missions_nameRowChanging As missions_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missions_nameRowChanged As missions_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missions_nameRowDeleting As missions_nameRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event missions_nameRowDeleted As missions_nameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addmissions_nameRow(ByVal row As missions_nameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addmissions_nameRow(ByVal mission_id As Object, ByVal mission_name As String) As missions_nameRow
            Dim rowmissions_nameRow As missions_nameRow = CType(Me.NewRow,missions_nameRow)
            Dim columnValuesArray() As Object = New Object() {mission_id, mission_name}
            rowmissions_nameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmissions_nameRow)
            Return rowmissions_nameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBymission_id(ByVal mission_id As Object) As missions_nameRow
            Return CType(Me.Rows.Find(New Object() {mission_id}),missions_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As missions_nameDataTable = CType(MyBase.Clone,missions_nameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New missions_nameDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnmission_id = MyBase.Columns("mission_id")
            Me.columnmission_name = MyBase.Columns("mission_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnmission_id = New Global.System.Data.DataColumn("mission_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmission_id)
            Me.columnmission_name = New Global.System.Data.DataColumn("mission_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmission_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnmission_id}, true))
            Me.columnmission_id.AllowDBNull = false
            Me.columnmission_id.Unique = true
            Me.columnmission_name.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newmissions_nameRow() As missions_nameRow
            Return CType(Me.NewRow,missions_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New missions_nameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(missions_nameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.missions_nameRowChangedEvent) Is Nothing) Then
                RaiseEvent missions_nameRowChanged(Me, New missions_nameRowChangeEvent(CType(e.Row,missions_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.missions_nameRowChangingEvent) Is Nothing) Then
                RaiseEvent missions_nameRowChanging(Me, New missions_nameRowChangeEvent(CType(e.Row,missions_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.missions_nameRowDeletedEvent) Is Nothing) Then
                RaiseEvent missions_nameRowDeleted(Me, New missions_nameRowChangeEvent(CType(e.Row,missions_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.missions_nameRowDeletingEvent) Is Nothing) Then
                RaiseEvent missions_nameRowDeleting(Me, New missions_nameRowChangeEvent(CType(e.Row,missions_nameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removemissions_nameRow(ByVal row As missions_nameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "missions_nameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class powerDataTable
        Inherits Global.System.Data.TypedTableBase(Of powerRow)
        
        Private columnpower_id As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columnvalue As Global.System.Data.DataColumn
        
        Private columnskill As Global.System.Data.DataColumn
        
        Private columnopd As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "power"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property power_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpower_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property opdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnopd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As powerRow
            Get
                Return CType(Me.Rows(index),powerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event powerRowChanging As powerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event powerRowChanged As powerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event powerRowDeleting As powerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event powerRowDeleted As powerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddpowerRow(ByVal row As powerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddpowerRow(ByVal power_id As Object, ByVal expansion As String, ByVal hero As String, ByVal value As Integer, ByVal skill As String, ByVal opd As Integer, ByVal image As String, ByVal image_back As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As powerRow
            Dim rowpowerRow As powerRow = CType(Me.NewRow,powerRow)
            Dim columnValuesArray() As Object = New Object() {power_id, expansion, hero, value, skill, opd, image, image_back, commonname, comment, rarity}
            rowpowerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpowerRow)
            Return rowpowerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBypower_id(ByVal power_id As Object) As powerRow
            Return CType(Me.Rows.Find(New Object() {power_id}),powerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As powerDataTable = CType(MyBase.Clone,powerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New powerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpower_id = MyBase.Columns("power_id")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columnhero = MyBase.Columns("hero")
            Me.columnvalue = MyBase.Columns("value")
            Me.columnskill = MyBase.Columns("skill")
            Me.columnopd = MyBase.Columns("opd")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpower_id = New Global.System.Data.DataColumn("power_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpower_id)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columnvalue = New Global.System.Data.DataColumn("value", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalue)
            Me.columnskill = New Global.System.Data.DataColumn("skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskill)
            Me.columnopd = New Global.System.Data.DataColumn("opd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopd)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnpower_id}, true))
            Me.columnpower_id.AllowDBNull = false
            Me.columnpower_id.Unique = true
            Me.columnexpansion.AllowDBNull = false
            Me.columnhero.AllowDBNull = false
            Me.columnvalue.AllowDBNull = false
            Me.columnskill.AllowDBNull = false
            Me.columnopd.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewpowerRow() As powerRow
            Return CType(Me.NewRow,powerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New powerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(powerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.powerRowChangedEvent) Is Nothing) Then
                RaiseEvent powerRowChanged(Me, New powerRowChangeEvent(CType(e.Row,powerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.powerRowChangingEvent) Is Nothing) Then
                RaiseEvent powerRowChanging(Me, New powerRowChangeEvent(CType(e.Row,powerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.powerRowDeletedEvent) Is Nothing) Then
                RaiseEvent powerRowDeleted(Me, New powerRowChangeEvent(CType(e.Row,powerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.powerRowDeletingEvent) Is Nothing) Then
                RaiseEvent powerRowDeleting(Me, New powerRowChangeEvent(CType(e.Row,powerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovepowerRow(ByVal row As powerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "powerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rarityDataTable
        Inherits Global.System.Data.TypedTableBase(Of rarityRow)
        
        Private columnrarity As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnvalue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rarity"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rarityRow
            Get
                Return CType(Me.Rows(index),rarityRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rarityRowChanging As rarityRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rarityRowChanged As rarityRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rarityRowDeleting As rarityRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rarityRowDeleted As rarityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddrarityRow(ByVal row As rarityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddrarityRow(ByVal rarity As String, ByVal description As String, ByVal value As Integer) As rarityRow
            Dim rowrarityRow As rarityRow = CType(Me.NewRow,rarityRow)
            Dim columnValuesArray() As Object = New Object() {rarity, description, value}
            rowrarityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrarityRow)
            Return rowrarityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByrarity(ByVal rarity As String) As rarityRow
            Return CType(Me.Rows.Find(New Object() {rarity}),rarityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rarityDataTable = CType(MyBase.Clone,rarityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rarityDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnrarity = MyBase.Columns("rarity")
            Me.columndescription = MyBase.Columns("description")
            Me.columnvalue = MyBase.Columns("value")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnvalue = New Global.System.Data.DataColumn("value", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalue)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnrarity}, true))
            Me.columnrarity.AllowDBNull = false
            Me.columnrarity.Unique = true
            Me.columndescription.AllowDBNull = false
            Me.columnvalue.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewrarityRow() As rarityRow
            Return CType(Me.NewRow,rarityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rarityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rarityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rarityRowChangedEvent) Is Nothing) Then
                RaiseEvent rarityRowChanged(Me, New rarityRowChangeEvent(CType(e.Row,rarityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rarityRowChangingEvent) Is Nothing) Then
                RaiseEvent rarityRowChanging(Me, New rarityRowChangeEvent(CType(e.Row,rarityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rarityRowDeletedEvent) Is Nothing) Then
                RaiseEvent rarityRowDeleted(Me, New rarityRowChangeEvent(CType(e.Row,rarityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rarityRowDeletingEvent) Is Nothing) Then
                RaiseEvent rarityRowDeleting(Me, New rarityRowChangeEvent(CType(e.Row,rarityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoverarityRow(ByVal row As rarityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rarityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class skillDataTable
        Inherits Global.System.Data.TypedTableBase(Of skillRow)
        
        Private columnskill As Global.System.Data.DataColumn
        
        Private columnskill_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "skill"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skill_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskill_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As skillRow
            Get
                Return CType(Me.Rows(index),skillRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event skillRowChanging As skillRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event skillRowChanged As skillRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event skillRowDeleting As skillRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event skillRowDeleted As skillRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddskillRow(ByVal row As skillRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddskillRow(ByVal skill As String, ByVal skill_name As String) As skillRow
            Dim rowskillRow As skillRow = CType(Me.NewRow,skillRow)
            Dim columnValuesArray() As Object = New Object() {skill, skill_name}
            rowskillRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowskillRow)
            Return rowskillRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByskill(ByVal skill As String) As skillRow
            Return CType(Me.Rows.Find(New Object() {skill}),skillRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As skillDataTable = CType(MyBase.Clone,skillDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New skillDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnskill = MyBase.Columns("skill")
            Me.columnskill_name = MyBase.Columns("skill_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnskill = New Global.System.Data.DataColumn("skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskill)
            Me.columnskill_name = New Global.System.Data.DataColumn("skill_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskill_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnskill}, true))
            Me.columnskill.AllowDBNull = false
            Me.columnskill.Unique = true
            Me.columnskill_name.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewskillRow() As skillRow
            Return CType(Me.NewRow,skillRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New skillRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(skillRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.skillRowChangedEvent) Is Nothing) Then
                RaiseEvent skillRowChanged(Me, New skillRowChangeEvent(CType(e.Row,skillRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.skillRowChangingEvent) Is Nothing) Then
                RaiseEvent skillRowChanging(Me, New skillRowChangeEvent(CType(e.Row,skillRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.skillRowDeletedEvent) Is Nothing) Then
                RaiseEvent skillRowDeleted(Me, New skillRowChangeEvent(CType(e.Row,skillRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.skillRowDeletingEvent) Is Nothing) Then
                RaiseEvent skillRowDeleting(Me, New skillRowChangeEvent(CType(e.Row,skillRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveskillRow(ByVal row As skillRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "skillDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class specialsDataTable
        Inherits Global.System.Data.TypedTableBase(Of specialsRow)
        
        Private columnspecials_id As Global.System.Data.DataColumn
        
        Private columnuid As Global.System.Data.DataColumn
        
        Private columnname_of_card As Global.System.Data.DataColumn
        
        Private columneffect As Global.System.Data.DataColumn
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columncode_variant As Global.System.Data.DataColumn
        
        Private columnopd As Global.System.Data.DataColumn
        
        Private columnventurevalue As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "specials"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property specials_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspecials_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property uidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property name_of_cardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname_of_card
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property effectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property code_variantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode_variant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property opdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnopd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property venturevalueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnventurevalue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As specialsRow
            Get
                Return CType(Me.Rows(index),specialsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event specialsRowChanging As specialsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event specialsRowChanged As specialsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event specialsRowDeleting As specialsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event specialsRowDeleted As specialsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddspecialsRow(ByVal row As specialsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddspecialsRow(ByVal specials_id As Object, ByVal uid As Integer, ByVal name_of_card As String, ByVal effect As String, ByVal code As String, ByVal code_variant As String, ByVal opd As Integer, ByVal venturevalue As Integer, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As specialsRow
            Dim rowspecialsRow As specialsRow = CType(Me.NewRow,specialsRow)
            Dim columnValuesArray() As Object = New Object() {specials_id, uid, name_of_card, effect, code, code_variant, opd, venturevalue, image, image_back, expansion, commonname, comment, rarity}
            rowspecialsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowspecialsRow)
            Return rowspecialsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByspecials_id(ByVal specials_id As Object) As specialsRow
            Return CType(Me.Rows.Find(New Object() {specials_id}),specialsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As specialsDataTable = CType(MyBase.Clone,specialsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New specialsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnspecials_id = MyBase.Columns("specials_id")
            Me.columnuid = MyBase.Columns("uid")
            Me.columnname_of_card = MyBase.Columns("name_of_card")
            Me.columneffect = MyBase.Columns("effect")
            Me.columncode = MyBase.Columns("code")
            Me.columncode_variant = MyBase.Columns("code_variant")
            Me.columnopd = MyBase.Columns("opd")
            Me.columnventurevalue = MyBase.Columns("venturevalue")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnspecials_id = New Global.System.Data.DataColumn("specials_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspecials_id)
            Me.columnuid = New Global.System.Data.DataColumn("uid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuid)
            Me.columnname_of_card = New Global.System.Data.DataColumn("name_of_card", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname_of_card)
            Me.columneffect = New Global.System.Data.DataColumn("effect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffect)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columncode_variant = New Global.System.Data.DataColumn("code_variant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode_variant)
            Me.columnopd = New Global.System.Data.DataColumn("opd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopd)
            Me.columnventurevalue = New Global.System.Data.DataColumn("venturevalue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnventurevalue)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnspecials_id}, true))
            Me.columnspecials_id.AllowDBNull = false
            Me.columnspecials_id.Unique = true
            Me.columnuid.AllowDBNull = false
            Me.columnname_of_card.AllowDBNull = false
            Me.columneffect.AllowDBNull = false
            Me.columncode.AllowDBNull = false
            Me.columncode_variant.AllowDBNull = false
            Me.columnopd.AllowDBNull = false
            Me.columnventurevalue.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewspecialsRow() As specialsRow
            Return CType(Me.NewRow,specialsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New specialsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(specialsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.specialsRowChangedEvent) Is Nothing) Then
                RaiseEvent specialsRowChanged(Me, New specialsRowChangeEvent(CType(e.Row,specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.specialsRowChangingEvent) Is Nothing) Then
                RaiseEvent specialsRowChanging(Me, New specialsRowChangeEvent(CType(e.Row,specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.specialsRowDeletedEvent) Is Nothing) Then
                RaiseEvent specialsRowDeleted(Me, New specialsRowChangeEvent(CType(e.Row,specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.specialsRowDeletingEvent) Is Nothing) Then
                RaiseEvent specialsRowDeleting(Me, New specialsRowChangeEvent(CType(e.Row,specialsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovespecialsRow(ByVal row As specialsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "specialsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class teamworkDataTable
        Inherits Global.System.Data.TypedTableBase(Of teamworkRow)
        
        Private columnteamwork_id As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columntouse_power As Global.System.Data.DataColumn
        
        Private columntouse_skill As Global.System.Data.DataColumn
        
        Private columnactas_power As Global.System.Data.DataColumn
        
        Private columnactas_skill As Global.System.Data.DataColumn
        
        Private columnteammate1_bonus As Global.System.Data.DataColumn
        
        Private columnteammate1_skill As Global.System.Data.DataColumn
        
        Private columnteammate2_bonus As Global.System.Data.DataColumn
        
        Private columnteammate2_skill As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "teamwork"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teamwork_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteamwork_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property touse_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntouse_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actas_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactas_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actas_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactas_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate1_bonusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate1_bonus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate1_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate1_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate2_bonusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate2_bonus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property teammate2_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteammate2_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As teamworkRow
            Get
                Return CType(Me.Rows(index),teamworkRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event teamworkRowChanging As teamworkRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event teamworkRowChanged As teamworkRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event teamworkRowDeleting As teamworkRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event teamworkRowDeleted As teamworkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddteamworkRow(ByVal row As teamworkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddteamworkRow( _
                    ByVal teamwork_id As Object,  _
                    ByVal hero As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal actas_power As Integer,  _
                    ByVal actas_skill As String,  _
                    ByVal teammate1_bonus As Integer,  _
                    ByVal teammate1_skill As String,  _
                    ByVal teammate2_bonus As Integer,  _
                    ByVal teammate2_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String) As teamworkRow
            Dim rowteamworkRow As teamworkRow = CType(Me.NewRow,teamworkRow)
            Dim columnValuesArray() As Object = New Object() {teamwork_id, hero, touse_power, touse_skill, actas_power, actas_skill, teammate1_bonus, teammate1_skill, teammate2_bonus, teammate2_skill, image, image_back, expansion, commonname, comment, rarity}
            rowteamworkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowteamworkRow)
            Return rowteamworkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByteamwork_id(ByVal teamwork_id As Object) As teamworkRow
            Return CType(Me.Rows.Find(New Object() {teamwork_id}),teamworkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As teamworkDataTable = CType(MyBase.Clone,teamworkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New teamworkDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnteamwork_id = MyBase.Columns("teamwork_id")
            Me.columnhero = MyBase.Columns("hero")
            Me.columntouse_power = MyBase.Columns("touse_power")
            Me.columntouse_skill = MyBase.Columns("touse_skill")
            Me.columnactas_power = MyBase.Columns("actas_power")
            Me.columnactas_skill = MyBase.Columns("actas_skill")
            Me.columnteammate1_bonus = MyBase.Columns("teammate1_bonus")
            Me.columnteammate1_skill = MyBase.Columns("teammate1_skill")
            Me.columnteammate2_bonus = MyBase.Columns("teammate2_bonus")
            Me.columnteammate2_skill = MyBase.Columns("teammate2_skill")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnteamwork_id = New Global.System.Data.DataColumn("teamwork_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteamwork_id)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columntouse_power = New Global.System.Data.DataColumn("touse_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_power)
            Me.columntouse_skill = New Global.System.Data.DataColumn("touse_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntouse_skill)
            Me.columnactas_power = New Global.System.Data.DataColumn("actas_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactas_power)
            Me.columnactas_skill = New Global.System.Data.DataColumn("actas_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactas_skill)
            Me.columnteammate1_bonus = New Global.System.Data.DataColumn("teammate1_bonus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate1_bonus)
            Me.columnteammate1_skill = New Global.System.Data.DataColumn("teammate1_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate1_skill)
            Me.columnteammate2_bonus = New Global.System.Data.DataColumn("teammate2_bonus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate2_bonus)
            Me.columnteammate2_skill = New Global.System.Data.DataColumn("teammate2_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteammate2_skill)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnteamwork_id}, true))
            Me.columnteamwork_id.AllowDBNull = false
            Me.columnteamwork_id.Unique = true
            Me.columnhero.AllowDBNull = false
            Me.columntouse_power.AllowDBNull = false
            Me.columntouse_skill.AllowDBNull = false
            Me.columnactas_power.AllowDBNull = false
            Me.columnactas_skill.AllowDBNull = false
            Me.columnteammate1_bonus.AllowDBNull = false
            Me.columnteammate1_skill.AllowDBNull = false
            Me.columnteammate2_bonus.AllowDBNull = false
            Me.columnteammate2_skill.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewteamworkRow() As teamworkRow
            Return CType(Me.NewRow,teamworkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New teamworkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(teamworkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.teamworkRowChangedEvent) Is Nothing) Then
                RaiseEvent teamworkRowChanged(Me, New teamworkRowChangeEvent(CType(e.Row,teamworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.teamworkRowChangingEvent) Is Nothing) Then
                RaiseEvent teamworkRowChanging(Me, New teamworkRowChangeEvent(CType(e.Row,teamworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.teamworkRowDeletedEvent) Is Nothing) Then
                RaiseEvent teamworkRowDeleted(Me, New teamworkRowChangeEvent(CType(e.Row,teamworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.teamworkRowDeletingEvent) Is Nothing) Then
                RaiseEvent teamworkRowDeleting(Me, New teamworkRowChangeEvent(CType(e.Row,teamworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveteamworkRow(ByVal row As teamworkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "teamworkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trainingDataTable
        Inherits Global.System.Data.TypedTableBase(Of trainingRow)
        
        Private columntraining_id As Global.System.Data.DataColumn
        
        Private columnhero As Global.System.Data.DataColumn
        
        Private columnbonus1_power As Global.System.Data.DataColumn
        
        Private columnbonus1_skill As Global.System.Data.DataColumn
        
        Private columnbonus2_power As Global.System.Data.DataColumn
        
        Private columnbonus2_skill As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columnimage_back As Global.System.Data.DataColumn
        
        Private columnexpansion As Global.System.Data.DataColumn
        
        Private columncommonname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        Private columnrarity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "training"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property training_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntraining_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property heroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonus1_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonus1_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonus1_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonus1_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonus2_powerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonus2_power
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonus2_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonus2_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property image_backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property expansionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpansion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commonnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncommonname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trainingRow
            Get
                Return CType(Me.Rows(index),trainingRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trainingRowChanging As trainingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trainingRowChanged As trainingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trainingRowDeleting As trainingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trainingRowDeleted As trainingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtrainingRow(ByVal row As trainingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtrainingRow(ByVal training_id As Object, ByVal hero As String, ByVal bonus1_power As Integer, ByVal bonus1_skill As String, ByVal bonus2_power As Integer, ByVal bonus2_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As trainingRow
            Dim rowtrainingRow As trainingRow = CType(Me.NewRow,trainingRow)
            Dim columnValuesArray() As Object = New Object() {training_id, hero, bonus1_power, bonus1_skill, bonus2_power, bonus2_skill, image, image_back, expansion, commonname, comment, rarity}
            rowtrainingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrainingRow)
            Return rowtrainingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBytraining_id(ByVal training_id As Object) As trainingRow
            Return CType(Me.Rows.Find(New Object() {training_id}),trainingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trainingDataTable = CType(MyBase.Clone,trainingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trainingDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columntraining_id = MyBase.Columns("training_id")
            Me.columnhero = MyBase.Columns("hero")
            Me.columnbonus1_power = MyBase.Columns("bonus1_power")
            Me.columnbonus1_skill = MyBase.Columns("bonus1_skill")
            Me.columnbonus2_power = MyBase.Columns("bonus2_power")
            Me.columnbonus2_skill = MyBase.Columns("bonus2_skill")
            Me.columnimage = MyBase.Columns("image")
            Me.columnimage_back = MyBase.Columns("image_back")
            Me.columnexpansion = MyBase.Columns("expansion")
            Me.columncommonname = MyBase.Columns("commonname")
            Me.columncomment = MyBase.Columns("comment")
            Me.columnrarity = MyBase.Columns("rarity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columntraining_id = New Global.System.Data.DataColumn("training_id", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntraining_id)
            Me.columnhero = New Global.System.Data.DataColumn("hero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhero)
            Me.columnbonus1_power = New Global.System.Data.DataColumn("bonus1_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonus1_power)
            Me.columnbonus1_skill = New Global.System.Data.DataColumn("bonus1_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonus1_skill)
            Me.columnbonus2_power = New Global.System.Data.DataColumn("bonus2_power", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonus2_power)
            Me.columnbonus2_skill = New Global.System.Data.DataColumn("bonus2_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonus2_skill)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columnimage_back = New Global.System.Data.DataColumn("image_back", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_back)
            Me.columnexpansion = New Global.System.Data.DataColumn("expansion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpansion)
            Me.columncommonname = New Global.System.Data.DataColumn("commonname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncommonname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.columnrarity = New Global.System.Data.DataColumn("rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrarity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncommonname}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columntraining_id}, true))
            Me.columntraining_id.AllowDBNull = false
            Me.columntraining_id.Unique = true
            Me.columnhero.AllowDBNull = false
            Me.columnbonus1_power.AllowDBNull = false
            Me.columnbonus1_skill.AllowDBNull = false
            Me.columnbonus2_power.AllowDBNull = false
            Me.columnbonus2_skill.AllowDBNull = false
            Me.columnimage.AllowDBNull = false
            Me.columnimage_back.AllowDBNull = false
            Me.columnexpansion.AllowDBNull = false
            Me.columncommonname.AllowDBNull = false
            Me.columncommonname.Unique = true
            Me.columncomment.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtrainingRow() As trainingRow
            Return CType(Me.NewRow,trainingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trainingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trainingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trainingRowChangedEvent) Is Nothing) Then
                RaiseEvent trainingRowChanged(Me, New trainingRowChangeEvent(CType(e.Row,trainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trainingRowChangingEvent) Is Nothing) Then
                RaiseEvent trainingRowChanging(Me, New trainingRowChangeEvent(CType(e.Row,trainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trainingRowDeletedEvent) Is Nothing) Then
                RaiseEvent trainingRowDeleted(Me, New trainingRowChangeEvent(CType(e.Row,trainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trainingRowDeletingEvent) Is Nothing) Then
                RaiseEvent trainingRowDeleting(Me, New trainingRowChangeEvent(CType(e.Row,trainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetrainingRow(ByVal row As trainingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As OPCardsDataSet = New OPCardsDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trainingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class allyRow
        Inherits Global.System.Data.DataRow
        
        Private tableally As allyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableally = CType(Me.Table,allyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ally_id() As Object
            Get
                Return CType(Me(Me.tableally.ally_idColumn),Object)
            End Get
            Set
                Me(Me.tableally.ally_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tableally.heroColumn),String)
            End Get
            Set
                Me(Me.tableally.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_ltgt() As String
            Get
                Return CType(Me(Me.tableally.touse_ltgtColumn),String)
            End Get
            Set
                Me(Me.tableally.touse_ltgtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_power() As Integer
            Get
                Return CType(Me(Me.tableally.touse_powerColumn),Integer)
            End Get
            Set
                Me(Me.tableally.touse_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_skill() As String
            Get
                Return CType(Me(Me.tableally.touse_skillColumn),String)
            End Get
            Set
                Me(Me.tableally.touse_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actas_power() As Integer
            Get
                Return CType(Me(Me.tableally.actas_powerColumn),Integer)
            End Get
            Set
                Me(Me.tableally.actas_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actas_skill() As String
            Get
                Return CType(Me(Me.tableally.actas_skillColumn),String)
            End Get
            Set
                Me(Me.tableally.actas_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tableally.imageColumn),String)
            End Get
            Set
                Me(Me.tableally.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tableally.image_backColumn),String)
            End Get
            Set
                Me(Me.tableally.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tableally.expansionColumn),String)
            End Get
            Set
                Me(Me.tableally.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dccode() As String
            Get
                Return CType(Me(Me.tableally.dccodeColumn),String)
            End Get
            Set
                Me(Me.tableally.dccodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tableally.commonnameColumn),String)
            End Get
            Set
                Me(Me.tableally.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tableally.commentColumn),String)
            End Get
            Set
                Me(Me.tableally.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tableally.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'ally' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableally.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tableally.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tableally.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class artifactRow
        Inherits Global.System.Data.DataRow
        
        Private tableartifact As artifactDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableartifact = CType(Me.Table,artifactDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property artifact_id() As Object
            Get
                Return CType(Me(Me.tableartifact.artifact_idColumn),Object)
            End Get
            Set
                Me(Me.tableartifact.artifact_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tableartifact.nameColumn),String)
            End Get
            Set
                Me(Me.tableartifact.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property effect() As String
            Get
                Return CType(Me(Me.tableartifact.effectColumn),String)
            End Get
            Set
                Me(Me.tableartifact.effectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_power() As Integer
            Get
                Return CType(Me(Me.tableartifact.touse_powerColumn),Integer)
            End Get
            Set
                Me(Me.tableartifact.touse_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_skill() As String
            Get
                Return CType(Me(Me.tableartifact.touse_skillColumn),String)
            End Get
            Set
                Me(Me.tableartifact.touse_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate_power() As Integer
            Get
                Return CType(Me(Me.tableartifact.teammate_powerColumn),Integer)
            End Get
            Set
                Me(Me.tableartifact.teammate_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate_skill() As String
            Get
                Return CType(Me(Me.tableartifact.teammate_skillColumn),String)
            End Get
            Set
                Me(Me.tableartifact.teammate_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate_ltgt() As String
            Get
                Return CType(Me(Me.tableartifact.teammate_ltgtColumn),String)
            End Get
            Set
                Me(Me.tableartifact.teammate_ltgtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tableartifact.imageColumn),String)
            End Get
            Set
                Me(Me.tableartifact.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tableartifact.image_backColumn),String)
            End Get
            Set
                Me(Me.tableartifact.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tableartifact.expansionColumn),String)
            End Get
            Set
                Me(Me.tableartifact.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property opd() As Integer
            Get
                Return CType(Me(Me.tableartifact.opdColumn),Integer)
            End Get
            Set
                Me(Me.tableartifact.opdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tableartifact.commonnameColumn),String)
            End Get
            Set
                Me(Me.tableartifact.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tableartifact.commentColumn),String)
            End Get
            Set
                Me(Me.tableartifact.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tableartifact.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'artifact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableartifact.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tableartifact.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tableartifact.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class aspectRow
        Inherits Global.System.Data.DataRow
        
        Private tableaspect As aspectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaspect = CType(Me.Table,aspectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property aspect_id() As Object
            Get
                Return CType(Me(Me.tableaspect.aspect_idColumn),Object)
            End Get
            Set
                Me(Me.tableaspect.aspect_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tableaspect.nameColumn),String)
            End Get
            Set
                Me(Me.tableaspect.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property code() As String
            Get
                Return CType(Me(Me.tableaspect.codeColumn),String)
            End Get
            Set
                Me(Me.tableaspect.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property homebase_id() As Integer
            Get
                Return CType(Me(Me.tableaspect.homebase_idColumn),Integer)
            End Get
            Set
                Me(Me.tableaspect.homebase_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property effect() As String
            Get
                Return CType(Me(Me.tableaspect.effectColumn),String)
            End Get
            Set
                Me(Me.tableaspect.effectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tableaspect.imageColumn),String)
            End Get
            Set
                Me(Me.tableaspect.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_alt() As String
            Get
                Return CType(Me(Me.tableaspect.image_altColumn),String)
            End Get
            Set
                Me(Me.tableaspect.image_altColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tableaspect.image_backColumn),String)
            End Get
            Set
                Me(Me.tableaspect.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tableaspect.expansionColumn),String)
            End Get
            Set
                Me(Me.tableaspect.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property opd() As Integer
            Get
                Return CType(Me(Me.tableaspect.opdColumn),Integer)
            End Get
            Set
                Me(Me.tableaspect.opdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tableaspect.commonnameColumn),String)
            End Get
            Set
                Me(Me.tableaspect.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tableaspect.commentColumn),String)
            End Get
            Set
                Me(Me.tableaspect.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tableaspect.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'aspect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaspect.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tableaspect.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tableaspect.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class basic_universeRow
        Inherits Global.System.Data.DataRow
        
        Private tablebasic_universe As basic_universeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebasic_universe = CType(Me.Table,basic_universeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property basic_universe_id() As Object
            Get
                Return CType(Me(Me.tablebasic_universe.basic_universe_idColumn),Object)
            End Get
            Set
                Me(Me.tablebasic_universe.basic_universe_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tablebasic_universe.heroColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablebasic_universe.nameColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_power() As Integer
            Get
                Return CType(Me(Me.tablebasic_universe.touse_powerColumn),Integer)
            End Get
            Set
                Me(Me.tablebasic_universe.touse_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_skill() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasic_universe.touse_skillColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'touse_skill' in table 'basic_universe' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasic_universe.touse_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonus_power() As Integer
            Get
                Return CType(Me(Me.tablebasic_universe.bonus_powerColumn),Integer)
            End Get
            Set
                Me(Me.tablebasic_universe.bonus_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonus_skill() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasic_universe.bonus_skillColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bonus_skill' in table 'basic_universe' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasic_universe.bonus_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tablebasic_universe.imageColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tablebasic_universe.image_backColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tablebasic_universe.expansionColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tablebasic_universe.commonnameColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablebasic_universe.commentColumn),String)
            End Get
            Set
                Me(Me.tablebasic_universe.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasic_universe.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'basic_universe' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasic_universe.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istouse_skillNull() As Boolean
            Return Me.IsNull(Me.tablebasic_universe.touse_skillColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settouse_skillNull()
            Me(Me.tablebasic_universe.touse_skillColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbonus_skillNull() As Boolean
            Return Me.IsNull(Me.tablebasic_universe.bonus_skillColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbonus_skillNull()
            Me(Me.tablebasic_universe.bonus_skillColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tablebasic_universe.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tablebasic_universe.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class charactersRow
        Inherits Global.System.Data.DataRow
        
        Private tablecharacters As charactersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecharacters = CType(Me.Table,charactersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cid() As Object
            Get
                Return CType(Me(Me.tablecharacters.cidColumn),Object)
            End Get
            Set
                Me(Me.tablecharacters.cidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property uid() As Integer
            Get
                Return CType(Me(Me.tablecharacters.uidColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters.uidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name_on_card() As String
            Get
                Return CType(Me(Me.tablecharacters.name_on_cardColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.name_on_cardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property e() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecharacters.eColumn),Integer)
                Catch e1 As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'e' in table 'characters' is DBNull.", e1)
                End Try
            End Get
            Set
                Me(Me.tablecharacters.eColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property f() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecharacters.fColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'f' in table 'characters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecharacters.fColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property s() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecharacters.sColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 's' in table 'characters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecharacters.sColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property i() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecharacters.iColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'i' in table 'characters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecharacters.iColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property total() As Integer
            Get
                Return CType(Me(Me.tablecharacters.totalColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tablecharacters.expansionColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dccode() As String
            Get
                Return CType(Me(Me.tablecharacters.dccodeColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.dccodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property inherent() As String
            Get
                Return CType(Me(Me.tablecharacters.inherentColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.inherentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tablecharacters.imageColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tablecharacters.image_backColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tablecharacters.commonnameColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablecharacters.commentColumn),String)
            End Get
            Set
                Me(Me.tablecharacters.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tablecharacters.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'characters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecharacters.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IseNull() As Boolean
            Return Me.IsNull(Me.tablecharacters.eColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SeteNull()
            Me(Me.tablecharacters.eColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsfNull() As Boolean
            Return Me.IsNull(Me.tablecharacters.fColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetfNull()
            Me(Me.tablecharacters.fColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IssNull() As Boolean
            Return Me.IsNull(Me.tablecharacters.sColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetsNull()
            Me(Me.tablecharacters.sColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsiNull() As Boolean
            Return Me.IsNull(Me.tablecharacters.iColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetiNull()
            Me(Me.tablecharacters.iColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tablecharacters.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tablecharacters.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class characters_nameRow
        Inherits Global.System.Data.DataRow
        
        Private tablecharacters_name As characters_nameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecharacters_name = CType(Me.Table,characters_nameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property uid() As Object
            Get
                Return CType(Me(Me.tablecharacters_name.uidColumn),Object)
            End Get
            Set
                Me(Me.tablecharacters_name.uidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablecharacters_name.nameColumn),String)
            End Get
            Set
                Me(Me.tablecharacters_name.nameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class characters_specialsRow
        Inherits Global.System.Data.DataRow
        
        Private tablecharacters_specials As characters_specialsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecharacters_specials = CType(Me.Table,characters_specialsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cid() As Integer
            Get
                Return CType(Me(Me.tablecharacters_specials.cidColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters_specials.cidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property uid() As Integer
            Get
                Return CType(Me(Me.tablecharacters_specials.uidColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters_specials.uidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property can_play_opd() As Integer
            Get
                Return CType(Me(Me.tablecharacters_specials.can_play_opdColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters_specials.can_play_opdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property can_play_non_opd() As Integer
            Get
                Return CType(Me(Me.tablecharacters_specials.can_play_non_opdColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters_specials.can_play_non_opdColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class characters_specials_singleRow
        Inherits Global.System.Data.DataRow
        
        Private tablecharacters_specials_single As characters_specials_singleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecharacters_specials_single = CType(Me.Table,characters_specials_singleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cid() As Integer
            Get
                Return CType(Me(Me.tablecharacters_specials_single.cidColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters_specials_single.cidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property specials_id() As Integer
            Get
                Return CType(Me(Me.tablecharacters_specials_single.specials_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecharacters_specials_single.specials_idColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class code_variantRow
        Inherits Global.System.Data.DataRow
        
        Private tablecode_variant As code_variantDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecode_variant = CType(Me.Table,code_variantDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property code_variant() As String
            Get
                Return CType(Me(Me.tablecode_variant.code_variantColumn),String)
            End Get
            Set
                Me(Me.tablecode_variant.code_variantColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dccodeRow
        Inherits Global.System.Data.DataRow
        
        Private tabledccode As dccodeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledccode = CType(Me.Table,dccodeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dccode() As String
            Get
                Return CType(Me(Me.tabledccode.dccodeColumn),String)
            End Get
            Set
                Me(Me.tabledccode.dccodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property type() As String
            Get
                Return CType(Me(Me.tabledccode.typeColumn),String)
            End Get
            Set
                Me(Me.tabledccode.typeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class doubleshotRow
        Inherits Global.System.Data.DataRow
        
        Private tabledoubleshot As doubleshotDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledoubleshot = CType(Me.Table,doubleshotDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property doubleshot_id() As Object
            Get
                Return CType(Me(Me.tabledoubleshot.doubleshot_idColumn),Object)
            End Get
            Set
                Me(Me.tabledoubleshot.doubleshot_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tabledoubleshot.heroColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_power() As Integer
            Get
                Return CType(Me(Me.tabledoubleshot.touse_powerColumn),Integer)
            End Get
            Set
                Me(Me.tabledoubleshot.touse_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_skill() As String
            Get
                Return CType(Me(Me.tabledoubleshot.touse_skillColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.touse_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate_power() As Integer
            Get
                Return CType(Me(Me.tabledoubleshot.teammate_powerColumn),Integer)
            End Get
            Set
                Me(Me.tabledoubleshot.teammate_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate_skill() As String
            Get
                Return CType(Me(Me.tabledoubleshot.teammate_skillColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.teammate_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actas_skill() As String
            Get
                Return CType(Me(Me.tabledoubleshot.actas_skillColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.actas_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tabledoubleshot.imageColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tabledoubleshot.image_backColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tabledoubleshot.expansionColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tabledoubleshot.commonnameColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tabledoubleshot.commentColumn),String)
            End Get
            Set
                Me(Me.tabledoubleshot.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tabledoubleshot.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'doubleshot' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoubleshot.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tabledoubleshot.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tabledoubleshot.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class eventRow
        Inherits Global.System.Data.DataRow
        
        Private tableevent As eventDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableevent = CType(Me.Table,eventDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property event_id() As Object
            Get
                Return CType(Me(Me.tableevent.event_idColumn),Object)
            End Get
            Set
                Me(Me.tableevent.event_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mission_id() As Integer
            Get
                Return CType(Me(Me.tableevent.mission_idColumn),Integer)
            End Get
            Set
                Me(Me.tableevent.mission_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tableevent.nameColumn),String)
            End Get
            Set
                Me(Me.tableevent.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tableevent.heroColumn),String)
            End Get
            Set
                Me(Me.tableevent.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property event_text() As String
            Get
                Return CType(Me(Me.tableevent.event_textColumn),String)
            End Get
            Set
                Me(Me.tableevent.event_textColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property effect() As String
            Get
                Return CType(Me(Me.tableevent.effectColumn),String)
            End Get
            Set
                Me(Me.tableevent.effectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tableevent.imageColumn),String)
            End Get
            Set
                Me(Me.tableevent.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tableevent.image_backColumn),String)
            End Get
            Set
                Me(Me.tableevent.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tableevent.expansionColumn),String)
            End Get
            Set
                Me(Me.tableevent.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tableevent.commonnameColumn),String)
            End Get
            Set
                Me(Me.tableevent.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tableevent.commentColumn),String)
            End Get
            Set
                Me(Me.tableevent.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tableevent.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'event' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableevent.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tableevent.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tableevent.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class expansionRow
        Inherits Global.System.Data.DataRow
        
        Private tableexpansion As expansionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableexpansion = CType(Me.Table,expansionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property exp() As String
            Get
                Return CType(Me(Me.tableexpansion.expColumn),String)
            End Get
            Set
                Me(Me.tableexpansion.expColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tableexpansion.expansionColumn),String)
            End Get
            Set
                Me(Me.tableexpansion.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property release_date() As Date
            Get
                Return CType(Me(Me.tableexpansion.release_dateColumn),Date)
            End Get
            Set
                Me(Me.tableexpansion.release_dateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class homebasesRow
        Inherits Global.System.Data.DataRow
        
        Private tablehomebases As homebasesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehomebases = CType(Me.Table,homebasesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property homebase_id() As Object
            Get
                Try 
                    Return CType(Me(Me.tablehomebases.homebase_idColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'homebase_id' in table 'homebases' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehomebases.homebase_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablehomebases.nameColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _variant() As String
            Get
                Return CType(Me(Me.tablehomebases.variantColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.variantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property inherent() As String
            Get
                Return CType(Me(Me.tablehomebases.inherentColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.inherentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tablehomebases.imageColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tablehomebases.image_backColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tablehomebases.expansionColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tablehomebases.commonnameColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablehomebases.commentColumn),String)
            End Get
            Set
                Me(Me.tablehomebases.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tablehomebases.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'homebases' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehomebases.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ishomebase_idNull() As Boolean
            Return Me.IsNull(Me.tablehomebases.homebase_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Sethomebase_idNull()
            Me(Me.tablehomebases.homebase_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tablehomebases.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tablehomebases.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class homebases_charactersRow
        Inherits Global.System.Data.DataRow
        
        Private tablehomebases_characters As homebases_charactersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehomebases_characters = CType(Me.Table,homebases_charactersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property homebase_id() As Integer
            Get
                Return CType(Me(Me.tablehomebases_characters.homebase_idColumn),Integer)
            End Get
            Set
                Me(Me.tablehomebases_characters.homebase_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cid() As Integer
            Get
                Return CType(Me(Me.tablehomebases_characters.cidColumn),Integer)
            End Get
            Set
                Me(Me.tablehomebases_characters.cidColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class homebases_nameRow
        Inherits Global.System.Data.DataRow
        
        Private tablehomebases_name As homebases_nameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehomebases_name = CType(Me.Table,homebases_nameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property homebase_id() As Object
            Get
                Return CType(Me(Me.tablehomebases_name.homebase_idColumn),Object)
            End Get
            Set
                Me(Me.tablehomebases_name.homebase_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablehomebases_name.nameColumn),String)
            End Get
            Set
                Me(Me.tablehomebases_name.nameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class missionsRow
        Inherits Global.System.Data.DataRow
        
        Private tablemissions As missionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemissions = CType(Me.Table,missionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property missions_id() As Object
            Get
                Return CType(Me(Me.tablemissions.missions_idColumn),Object)
            End Get
            Set
                Me(Me.tablemissions.missions_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mission_id() As Integer
            Get
                Return CType(Me(Me.tablemissions.mission_idColumn),Integer)
            End Get
            Set
                Me(Me.tablemissions.mission_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property number() As Integer
            Get
                Return CType(Me(Me.tablemissions.numberColumn),Integer)
            End Get
            Set
                Me(Me.tablemissions.numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tablemissions.heroColumn),String)
            End Get
            Set
                Me(Me.tablemissions.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mission_title() As String
            Get
                Return CType(Me(Me.tablemissions.mission_titleColumn),String)
            End Get
            Set
                Me(Me.tablemissions.mission_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mission_text() As String
            Get
                Return CType(Me(Me.tablemissions.mission_textColumn),String)
            End Get
            Set
                Me(Me.tablemissions.mission_textColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tablemissions.imageColumn),String)
            End Get
            Set
                Me(Me.tablemissions.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tablemissions.image_backColumn),String)
            End Get
            Set
                Me(Me.tablemissions.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tablemissions.expansionColumn),String)
            End Get
            Set
                Me(Me.tablemissions.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tablemissions.commonnameColumn),String)
            End Get
            Set
                Me(Me.tablemissions.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablemissions.commentColumn),String)
            End Get
            Set
                Me(Me.tablemissions.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tablemissions.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'missions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemissions.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tablemissions.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tablemissions.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class missions_nameRow
        Inherits Global.System.Data.DataRow
        
        Private tablemissions_name As missions_nameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemissions_name = CType(Me.Table,missions_nameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mission_id() As Object
            Get
                Return CType(Me(Me.tablemissions_name.mission_idColumn),Object)
            End Get
            Set
                Me(Me.tablemissions_name.mission_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mission_name() As String
            Get
                Return CType(Me(Me.tablemissions_name.mission_nameColumn),String)
            End Get
            Set
                Me(Me.tablemissions_name.mission_nameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class powerRow
        Inherits Global.System.Data.DataRow
        
        Private tablepower As powerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepower = CType(Me.Table,powerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property power_id() As Object
            Get
                Return CType(Me(Me.tablepower.power_idColumn),Object)
            End Get
            Set
                Me(Me.tablepower.power_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tablepower.expansionColumn),String)
            End Get
            Set
                Me(Me.tablepower.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tablepower.heroColumn),String)
            End Get
            Set
                Me(Me.tablepower.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property value() As Integer
            Get
                Return CType(Me(Me.tablepower.valueColumn),Integer)
            End Get
            Set
                Me(Me.tablepower.valueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skill() As String
            Get
                Return CType(Me(Me.tablepower.skillColumn),String)
            End Get
            Set
                Me(Me.tablepower.skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property opd() As Integer
            Get
                Return CType(Me(Me.tablepower.opdColumn),Integer)
            End Get
            Set
                Me(Me.tablepower.opdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tablepower.imageColumn),String)
            End Get
            Set
                Me(Me.tablepower.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tablepower.image_backColumn),String)
            End Get
            Set
                Me(Me.tablepower.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tablepower.commonnameColumn),String)
            End Get
            Set
                Me(Me.tablepower.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablepower.commentColumn),String)
            End Get
            Set
                Me(Me.tablepower.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tablepower.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'power' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepower.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tablepower.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tablepower.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class rarityRow
        Inherits Global.System.Data.DataRow
        
        Private tablerarity As rarityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerarity = CType(Me.Table,rarityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Return CType(Me(Me.tablerarity.rarityColumn),String)
            End Get
            Set
                Me(Me.tablerarity.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tablerarity.descriptionColumn),String)
            End Get
            Set
                Me(Me.tablerarity.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property value() As Integer
            Get
                Return CType(Me(Me.tablerarity.valueColumn),Integer)
            End Get
            Set
                Me(Me.tablerarity.valueColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class skillRow
        Inherits Global.System.Data.DataRow
        
        Private tableskill As skillDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableskill = CType(Me.Table,skillDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skill() As String
            Get
                Return CType(Me(Me.tableskill.skillColumn),String)
            End Get
            Set
                Me(Me.tableskill.skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skill_name() As String
            Get
                Return CType(Me(Me.tableskill.skill_nameColumn),String)
            End Get
            Set
                Me(Me.tableskill.skill_nameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class specialsRow
        Inherits Global.System.Data.DataRow
        
        Private tablespecials As specialsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablespecials = CType(Me.Table,specialsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property specials_id() As Object
            Get
                Return CType(Me(Me.tablespecials.specials_idColumn),Object)
            End Get
            Set
                Me(Me.tablespecials.specials_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property uid() As Integer
            Get
                Return CType(Me(Me.tablespecials.uidColumn),Integer)
            End Get
            Set
                Me(Me.tablespecials.uidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name_of_card() As String
            Get
                Return CType(Me(Me.tablespecials.name_of_cardColumn),String)
            End Get
            Set
                Me(Me.tablespecials.name_of_cardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property effect() As String
            Get
                Return CType(Me(Me.tablespecials.effectColumn),String)
            End Get
            Set
                Me(Me.tablespecials.effectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property code() As String
            Get
                Return CType(Me(Me.tablespecials.codeColumn),String)
            End Get
            Set
                Me(Me.tablespecials.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property code_variant() As String
            Get
                Return CType(Me(Me.tablespecials.code_variantColumn),String)
            End Get
            Set
                Me(Me.tablespecials.code_variantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property opd() As Integer
            Get
                Return CType(Me(Me.tablespecials.opdColumn),Integer)
            End Get
            Set
                Me(Me.tablespecials.opdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property venturevalue() As Integer
            Get
                Return CType(Me(Me.tablespecials.venturevalueColumn),Integer)
            End Get
            Set
                Me(Me.tablespecials.venturevalueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tablespecials.imageColumn),String)
            End Get
            Set
                Me(Me.tablespecials.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tablespecials.image_backColumn),String)
            End Get
            Set
                Me(Me.tablespecials.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tablespecials.expansionColumn),String)
            End Get
            Set
                Me(Me.tablespecials.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tablespecials.commonnameColumn),String)
            End Get
            Set
                Me(Me.tablespecials.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tablespecials.commentColumn),String)
            End Get
            Set
                Me(Me.tablespecials.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tablespecials.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'specials' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespecials.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tablespecials.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tablespecials.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class teamworkRow
        Inherits Global.System.Data.DataRow
        
        Private tableteamwork As teamworkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableteamwork = CType(Me.Table,teamworkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teamwork_id() As Object
            Get
                Return CType(Me(Me.tableteamwork.teamwork_idColumn),Object)
            End Get
            Set
                Me(Me.tableteamwork.teamwork_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tableteamwork.heroColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_power() As Integer
            Get
                Return CType(Me(Me.tableteamwork.touse_powerColumn),Integer)
            End Get
            Set
                Me(Me.tableteamwork.touse_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property touse_skill() As String
            Get
                Return CType(Me(Me.tableteamwork.touse_skillColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.touse_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actas_power() As Integer
            Get
                Return CType(Me(Me.tableteamwork.actas_powerColumn),Integer)
            End Get
            Set
                Me(Me.tableteamwork.actas_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actas_skill() As String
            Get
                Return CType(Me(Me.tableteamwork.actas_skillColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.actas_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate1_bonus() As Integer
            Get
                Return CType(Me(Me.tableteamwork.teammate1_bonusColumn),Integer)
            End Get
            Set
                Me(Me.tableteamwork.teammate1_bonusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate1_skill() As String
            Get
                Return CType(Me(Me.tableteamwork.teammate1_skillColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.teammate1_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate2_bonus() As Integer
            Get
                Return CType(Me(Me.tableteamwork.teammate2_bonusColumn),Integer)
            End Get
            Set
                Me(Me.tableteamwork.teammate2_bonusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property teammate2_skill() As String
            Get
                Return CType(Me(Me.tableteamwork.teammate2_skillColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.teammate2_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tableteamwork.imageColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tableteamwork.image_backColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tableteamwork.expansionColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tableteamwork.commonnameColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tableteamwork.commentColumn),String)
            End Get
            Set
                Me(Me.tableteamwork.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tableteamwork.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'teamwork' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableteamwork.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tableteamwork.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tableteamwork.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trainingRow
        Inherits Global.System.Data.DataRow
        
        Private tabletraining As trainingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletraining = CType(Me.Table,trainingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property training_id() As Object
            Get
                Return CType(Me(Me.tabletraining.training_idColumn),Object)
            End Get
            Set
                Me(Me.tabletraining.training_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property hero() As String
            Get
                Return CType(Me(Me.tabletraining.heroColumn),String)
            End Get
            Set
                Me(Me.tabletraining.heroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonus1_power() As Integer
            Get
                Return CType(Me(Me.tabletraining.bonus1_powerColumn),Integer)
            End Get
            Set
                Me(Me.tabletraining.bonus1_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonus1_skill() As String
            Get
                Return CType(Me(Me.tabletraining.bonus1_skillColumn),String)
            End Get
            Set
                Me(Me.tabletraining.bonus1_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonus2_power() As Integer
            Get
                Return CType(Me(Me.tabletraining.bonus2_powerColumn),Integer)
            End Get
            Set
                Me(Me.tabletraining.bonus2_powerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonus2_skill() As String
            Get
                Return CType(Me(Me.tabletraining.bonus2_skillColumn),String)
            End Get
            Set
                Me(Me.tabletraining.bonus2_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image() As String
            Get
                Return CType(Me(Me.tabletraining.imageColumn),String)
            End Get
            Set
                Me(Me.tabletraining.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property image_back() As String
            Get
                Return CType(Me(Me.tabletraining.image_backColumn),String)
            End Get
            Set
                Me(Me.tabletraining.image_backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property expansion() As String
            Get
                Return CType(Me(Me.tabletraining.expansionColumn),String)
            End Get
            Set
                Me(Me.tabletraining.expansionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property commonname() As String
            Get
                Return CType(Me(Me.tabletraining.commonnameColumn),String)
            End Get
            Set
                Me(Me.tabletraining.commonnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Return CType(Me(Me.tabletraining.commentColumn),String)
            End Get
            Set
                Me(Me.tabletraining.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletraining.rarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rarity' in table 'training' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletraining.rarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsrarityNull() As Boolean
            Return Me.IsNull(Me.tabletraining.rarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetrarityNull()
            Me(Me.tabletraining.rarityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class allyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As allyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As allyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As allyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class artifactRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As artifactRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As artifactRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As artifactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class aspectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As aspectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As aspectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As aspectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class basic_universeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As basic_universeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As basic_universeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As basic_universeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class charactersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As charactersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As charactersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As charactersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class characters_nameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As characters_nameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As characters_nameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As characters_nameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class characters_specialsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As characters_specialsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As characters_specialsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As characters_specialsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class characters_specials_singleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As characters_specials_singleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As characters_specials_singleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As characters_specials_singleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class code_variantRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As code_variantRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As code_variantRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As code_variantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class dccodeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dccodeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As dccodeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As dccodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class doubleshotRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As doubleshotRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As doubleshotRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As doubleshotRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class eventRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As eventRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As eventRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As eventRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class expansionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As expansionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As expansionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As expansionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class homebasesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As homebasesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As homebasesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As homebasesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class homebases_charactersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As homebases_charactersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As homebases_charactersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As homebases_charactersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class homebases_nameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As homebases_nameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As homebases_nameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As homebases_nameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class missionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As missionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As missionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As missionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class missions_nameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As missions_nameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As missions_nameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As missions_nameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class powerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As powerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As powerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As powerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class rarityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rarityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As rarityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As rarityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class skillRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As skillRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As skillRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As skillRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class specialsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As specialsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As specialsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As specialsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class teamworkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As teamworkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As teamworkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As teamworkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trainingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trainingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trainingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trainingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace OPCardsDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class allyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ally"
            tableMapping.ColumnMappings.Add("ally_id", "ally_id")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("touse_ltgt", "touse_ltgt")
            tableMapping.ColumnMappings.Add("touse_power", "touse_power")
            tableMapping.ColumnMappings.Add("touse_skill", "touse_skill")
            tableMapping.ColumnMappings.Add("actas_power", "actas_power")
            tableMapping.ColumnMappings.Add("actas_skill", "actas_skill")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("dccode", "dccode")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""ally"" WHERE ((""ally_id"" = :Original_ally_id) AND (""hero"" = :O"& _ 
                "riginal_hero) AND (""touse_ltgt"" = :Original_touse_ltgt) AND (""touse_power"" = :Or"& _ 
                "iginal_touse_power) AND (""touse_skill"" = :Original_touse_skill) AND (""actas_powe"& _ 
                "r"" = :Original_actas_power) AND (""actas_skill"" = :Original_actas_skill) AND (""im"& _ 
                "age"" = :Original_image) AND (""image_back"" = :Original_image_back) AND (""expansio"& _ 
                "n"" = :Original_expansion) AND (""dccode"" = :Original_dccode) AND (""commonname"" = "& _ 
                ":Original_commonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity ="& _ 
                " 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ally_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ally_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_ltgt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""ally"" (""ally_id"", ""hero"", ""touse_ltgt"", ""touse_power"", ""touse"& _ 
                "_skill"", ""actas_power"", ""actas_skill"", ""image"", ""image_back"", ""expansion"", ""dcco"& _ 
                "de"", ""commonname"", ""comment"", ""rarity"") VALUES (:ally_id, :hero, :touse_ltgt, :t"& _ 
                "ouse_power, :touse_skill, :actas_power, :actas_skill, :image, :image_back, :expa"& _ 
                "nsion, :dccode, :commonname, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ally_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ally_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_ltgt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""ally"" SET ""ally_id"" = :ally_id, ""hero"" = :hero, ""touse_ltgt"" = :to"& _ 
                "use_ltgt, ""touse_power"" = :touse_power, ""touse_skill"" = :touse_skill, ""actas_pow"& _ 
                "er"" = :actas_power, ""actas_skill"" = :actas_skill, ""image"" = :image, ""image_back"""& _ 
                " = :image_back, ""expansion"" = :expansion, ""dccode"" = :dccode, ""commonname"" = :co"& _ 
                "mmonname, ""comment"" = :comment, ""rarity"" = :rarity WHERE ((""ally_id"" = :Original"& _ 
                "_ally_id) AND (""hero"" = :Original_hero) AND (""touse_ltgt"" = :Original_touse_ltgt"& _ 
                ") AND (""touse_power"" = :Original_touse_power) AND (""touse_skill"" = :Original_tou"& _ 
                "se_skill) AND (""actas_power"" = :Original_actas_power) AND (""actas_skill"" = :Orig"& _ 
                "inal_actas_skill) AND (""image"" = :Original_image) AND (""image_back"" = :Original_"& _ 
                "image_back) AND (""expansion"" = :Original_expansion) AND (""dccode"" = :Original_dc"& _ 
                "code) AND (""commonname"" = :Original_commonname) AND (""comment"" = :Original_comme"& _ 
                "nt) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rari"& _ 
                "ty)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ally_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ally_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_ltgt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ally_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ally_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_ltgt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ally_id, hero, touse_ltgt, touse_power, touse_skill, actas_power, actas_sk"& _ 
                "ill, image, image_back, expansion, dccode, commonname, comment, rarity FROM ""mai"& _ 
                "n"".ally"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ally_id, hero, touse_ltgt, touse_power, touse_skill, actas_power, a"& _ 
                "ctas_skill, image, image_back, expansion, dccode, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"F"& _ 
                "ROM            ally"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ally_id LIKE :ally_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ally_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "ally_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.allyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.allyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.allyDataTable = New OPCardsDataSet.allyDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.allyDataTable, ByVal ally_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ally_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ally_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ally_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal ally_id As Object) As OPCardsDataSet.allyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ally_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ally_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ally_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.allyDataTable = New OPCardsDataSet.allyDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.allyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ally")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ally_id As Long, ByVal Original_hero As String, ByVal Original_touse_ltgt As String, ByVal Original_touse_power As Integer, ByVal Original_touse_skill As String, ByVal Original_actas_power As Integer, ByVal Original_actas_skill As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_dccode As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ally_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_hero,String)
            End If
            If (Original_touse_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_ltgt")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_touse_ltgt,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_actas_power,Integer)
            If (Original_actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_actas_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_actas_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_expansion,String)
            End If
            If (Original_dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dccode")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_dccode,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ally_id As Long, ByVal hero As String, ByVal touse_ltgt As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal actas_power As Integer, ByVal actas_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal dccode As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ally_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(hero,String)
            End If
            If (touse_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_ltgt")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(touse_ltgt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(touse_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(actas_power,Integer)
            If (actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actas_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(actas_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(expansion,String)
            End If
            If (dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dccode")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(dccode,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ally_id As Long,  _
                    ByVal hero As String,  _
                    ByVal touse_ltgt As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal actas_power As Integer,  _
                    ByVal actas_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal dccode As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_ally_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_ltgt As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_actas_power As Integer,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_dccode As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ally_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(hero,String)
            End If
            If (touse_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_ltgt")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(touse_ltgt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(actas_power,Integer)
            If (actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actas_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(actas_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(expansion,String)
            End If
            If (dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(dccode,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ally_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_hero,String)
            End If
            If (Original_touse_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_ltgt")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_touse_ltgt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_actas_power,Integer)
            If (Original_actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_actas_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_actas_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_expansion,String)
            End If
            If (Original_dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_dccode,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal hero As String,  _
                    ByVal touse_ltgt As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal actas_power As Integer,  _
                    ByVal actas_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal dccode As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_ally_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_ltgt As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_actas_power As Integer,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_dccode As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_ally_id, hero, touse_ltgt, touse_power, touse_skill, actas_power, actas_skill, image, image_back, expansion, dccode, commonname, comment, rarity, Original_ally_id, Original_hero, Original_touse_ltgt, Original_touse_power, Original_touse_skill, Original_actas_power, Original_actas_skill, Original_image, Original_image_back, Original_expansion, Original_dccode, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class artifactTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "artifact"
            tableMapping.ColumnMappings.Add("artifact_id", "artifact_id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("effect", "effect")
            tableMapping.ColumnMappings.Add("touse_power", "touse_power")
            tableMapping.ColumnMappings.Add("touse_skill", "touse_skill")
            tableMapping.ColumnMappings.Add("teammate_power", "teammate_power")
            tableMapping.ColumnMappings.Add("teammate_skill", "teammate_skill")
            tableMapping.ColumnMappings.Add("teammate_ltgt", "teammate_ltgt")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("opd", "opd")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""artifact"" WHERE ((""artifact_id"" = :Original_artifact_id) AND "& _ 
                "(""name"" = :Original_name) AND (""effect"" = :Original_effect) AND (""touse_power"" ="& _ 
                " :Original_touse_power) AND (""touse_skill"" = :Original_touse_skill) AND (""teamma"& _ 
                "te_power"" = :Original_teammate_power) AND (""teammate_skill"" = :Original_teammate"& _ 
                "_skill) AND (""teammate_ltgt"" = :Original_teammate_ltgt) AND (""image"" = :Original"& _ 
                "_image) AND (""image_back"" = :Original_image_back) AND (""expansion"" = :Original_e"& _ 
                "xpansion) AND (""opd"" = :Original_opd) AND (""commonname"" = :Original_commonname) "& _ 
                "AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NUL"& _ 
                "L) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_artifact_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "artifact_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_ltgt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""artifact"" (""artifact_id"", ""name"", ""effect"", ""touse_power"", ""t"& _ 
                "ouse_skill"", ""teammate_power"", ""teammate_skill"", ""teammate_ltgt"", ""image"", ""imag"& _ 
                "e_back"", ""expansion"", ""opd"", ""commonname"", ""comment"", ""rarity"") VALUES (:artifac"& _ 
                "t_id, :name, :effect, :touse_power, :touse_skill, :teammate_power, :teammate_ski"& _ 
                "ll, :teammate_ltgt, :image, :image_back, :expansion, :opd, :commonname, :comment"& _ 
                ", :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "artifact_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "artifact_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_ltgt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""artifact"" SET ""artifact_id"" = :artifact_id, ""name"" = :name, ""effec"& _ 
                "t"" = :effect, ""touse_power"" = :touse_power, ""touse_skill"" = :touse_skill, ""teamm"& _ 
                "ate_power"" = :teammate_power, ""teammate_skill"" = :teammate_skill, ""teammate_ltgt"& _ 
                """ = :teammate_ltgt, ""image"" = :image, ""image_back"" = :image_back, ""expansion"" = "& _ 
                ":expansion, ""opd"" = :opd, ""commonname"" = :commonname, ""comment"" = :comment, ""rar"& _ 
                "ity"" = :rarity WHERE ((""artifact_id"" = :Original_artifact_id) AND (""name"" = :Ori"& _ 
                "ginal_name) AND (""effect"" = :Original_effect) AND (""touse_power"" = :Original_tou"& _ 
                "se_power) AND (""touse_skill"" = :Original_touse_skill) AND (""teammate_power"" = :O"& _ 
                "riginal_teammate_power) AND (""teammate_skill"" = :Original_teammate_skill) AND ("""& _ 
                "teammate_ltgt"" = :Original_teammate_ltgt) AND (""image"" = :Original_image) AND ("""& _ 
                "image_back"" = :Original_image_back) AND (""expansion"" = :Original_expansion) AND "& _ 
                "(""opd"" = :Original_opd) AND (""commonname"" = :Original_commonname) AND (""comment"""& _ 
                " = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"& _ 
                """ = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "artifact_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "artifact_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_ltgt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_artifact_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "artifact_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_ltgt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_ltgt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT artifact_id, name, effect, touse_power, touse_skill, teammate_power, teamm"& _ 
                "ate_skill, teammate_ltgt, image, image_back, expansion, opd, commonname, comment"& _ 
                ", rarity FROM ""main"".artifact"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        artifact_id, name, effect, touse_power, touse_skill, teammate_power"& _ 
                ", teammate_skill, image, image_back, opd, teammate_ltgt, expansion, commonname, "& _ 
                "comment, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            artifact"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     "& _ 
                "   (artifact_id LIKE :artifact_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "artifact_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "artifact_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.artifactDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.artifactDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.artifactDataTable = New OPCardsDataSet.artifactDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.artifactDataTable, ByVal artifact_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (artifact_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("artifact_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(artifact_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal artifact_id As Object) As OPCardsDataSet.artifactDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (artifact_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("artifact_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(artifact_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.artifactDataTable = New OPCardsDataSet.artifactDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.artifactDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "artifact")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_artifact_id As Long, ByVal Original_name As String, ByVal Original_effect As String, ByVal Original_touse_power As Integer, ByVal Original_touse_skill As String, ByVal Original_teammate_power As Integer, ByVal Original_teammate_skill As String, ByVal Original_teammate_ltgt As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_opd As Integer, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_artifact_id,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_name,String)
            End If
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_effect,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_teammate_power,Integer)
            If (Original_teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_teammate_skill,String)
            End If
            If (Original_teammate_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate_ltgt")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_teammate_ltgt,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_expansion,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_opd,Integer)
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal artifact_id As Long, ByVal name As String, ByVal effect As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal teammate_power As Integer, ByVal teammate_skill As String, ByVal teammate_ltgt As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal opd As Integer, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(artifact_id,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(effect,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(touse_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(teammate_power,Integer)
            If (teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(teammate_skill,String)
            End If
            If (teammate_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate_ltgt")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(teammate_ltgt,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(expansion,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(opd,Integer)
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal artifact_id As Long,  _
                    ByVal name As String,  _
                    ByVal effect As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal teammate_power As Integer,  _
                    ByVal teammate_skill As String,  _
                    ByVal teammate_ltgt As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal opd As Integer,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_artifact_id As Long,  _
                    ByVal Original_name As String,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_teammate_power As Integer,  _
                    ByVal Original_teammate_skill As String,  _
                    ByVal Original_teammate_ltgt As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(artifact_id,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(effect,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(teammate_power,Integer)
            If (teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(teammate_skill,String)
            End If
            If (teammate_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate_ltgt")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(teammate_ltgt,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(expansion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(opd,Integer)
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_artifact_id,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_name,String)
            End If
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_effect,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_teammate_power,Integer)
            If (Original_teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_teammate_skill,String)
            End If
            If (Original_teammate_ltgt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate_ltgt")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_teammate_ltgt,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_expansion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_opd,Integer)
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal name As String,  _
                    ByVal effect As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal teammate_power As Integer,  _
                    ByVal teammate_skill As String,  _
                    ByVal teammate_ltgt As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal opd As Integer,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_artifact_id As Long,  _
                    ByVal Original_name As String,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_teammate_power As Integer,  _
                    ByVal Original_teammate_skill As String,  _
                    ByVal Original_teammate_ltgt As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_artifact_id, name, effect, touse_power, touse_skill, teammate_power, teammate_skill, teammate_ltgt, image, image_back, expansion, opd, commonname, comment, rarity, Original_artifact_id, Original_name, Original_effect, Original_touse_power, Original_touse_skill, Original_teammate_power, Original_teammate_skill, Original_teammate_ltgt, Original_image, Original_image_back, Original_expansion, Original_opd, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class aspectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "aspect"
            tableMapping.ColumnMappings.Add("aspect_id", "aspect_id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("code", "code")
            tableMapping.ColumnMappings.Add("homebase_id", "homebase_id")
            tableMapping.ColumnMappings.Add("effect", "effect")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_alt", "image_alt")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("opd", "opd")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""aspect"" WHERE ((""aspect_id"" = :Original_aspect_id) AND (""name"& _ 
                """ = :Original_name) AND (""code"" = :Original_code) AND (""homebase_id"" = :Original"& _ 
                "_homebase_id) AND (""effect"" = :Original_effect) AND (""image"" = :Original_image) "& _ 
                "AND (""image_alt"" = :Original_image_alt) AND (""image_back"" = :Original_image_back"& _ 
                ") AND (""expansion"" = :Original_expansion) AND (""opd"" = :Original_opd) AND (""comm"& _ 
                "onname"" = :Original_commonname) AND (""comment"" = :Original_comment) AND ((:IsNul"& _ 
                "l_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_aspect_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "aspect_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_alt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_alt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""aspect"" (""aspect_id"", ""name"", ""code"", ""homebase_id"", ""effect"""& _ 
                ", ""image"", ""image_alt"", ""image_back"", ""expansion"", ""opd"", ""commonname"", ""comment"& _ 
                """, ""rarity"") VALUES (:aspect_id, :name, :code, :homebase_id, :effect, :image, :i"& _ 
                "mage_alt, :image_back, :expansion, :opd, :commonname, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "aspect_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "aspect_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_alt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_alt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""aspect"" SET ""aspect_id"" = :aspect_id, ""name"" = :name, ""code"" = :co"& _ 
                "de, ""homebase_id"" = :homebase_id, ""effect"" = :effect, ""image"" = :image, ""image_a"& _ 
                "lt"" = :image_alt, ""image_back"" = :image_back, ""expansion"" = :expansion, ""opd"" = "& _ 
                ":opd, ""commonname"" = :commonname, ""comment"" = :comment, ""rarity"" = :rarity WHERE"& _ 
                " ((""aspect_id"" = :Original_aspect_id) AND (""name"" = :Original_name) AND (""code"" "& _ 
                "= :Original_code) AND (""homebase_id"" = :Original_homebase_id) AND (""effect"" = :O"& _ 
                "riginal_effect) AND (""image"" = :Original_image) AND (""image_alt"" = :Original_ima"& _ 
                "ge_alt) AND (""image_back"" = :Original_image_back) AND (""expansion"" = :Original_e"& _ 
                "xpansion) AND (""opd"" = :Original_opd) AND (""commonname"" = :Original_commonname) "& _ 
                "AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NUL"& _ 
                "L) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "aspect_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "aspect_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_alt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_alt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_aspect_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "aspect_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_alt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_alt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT aspect_id, name, code, homebase_id, effect, image, image_alt, image_back, "& _ 
                "expansion, opd, commonname, comment, rarity FROM ""main"".aspect"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        aspect_id, name, homebase_id, effect, image, image_alt, image_back,"& _ 
                " opd, code, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            aspect"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E        (aspect_id LIKE :aspect_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "aspect_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "aspect_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.aspectDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.aspectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.aspectDataTable = New OPCardsDataSet.aspectDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.aspectDataTable, ByVal aspect_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (aspect_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("aspect_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(aspect_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal aspect_id As Object) As OPCardsDataSet.aspectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (aspect_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("aspect_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(aspect_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.aspectDataTable = New OPCardsDataSet.aspectDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.aspectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "aspect")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_aspect_id As Long, ByVal Original_name As String, ByVal Original_code As String, ByVal Original_homebase_id As Integer, ByVal Original_effect As String, ByVal Original_image As String, ByVal Original_image_alt As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_opd As Integer, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_aspect_id,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_name,String)
            End If
            If (Original_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_code,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_homebase_id,Integer)
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_effect,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_image,String)
            End If
            If (Original_image_alt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_alt")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_image_alt,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_expansion,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_opd,Integer)
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal aspect_id As Long, ByVal name As String, ByVal code As String, ByVal homebase_id As Integer, ByVal effect As String, ByVal image As String, ByVal image_alt As String, ByVal image_back As String, ByVal expansion As String, ByVal opd As Integer, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(aspect_id,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            If (code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(code,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(homebase_id,Integer)
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(effect,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(image,String)
            End If
            If (image_alt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_alt")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(image_alt,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(expansion,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(opd,Integer)
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal aspect_id As Long,  _
                    ByVal name As String,  _
                    ByVal code As String,  _
                    ByVal homebase_id As Integer,  _
                    ByVal effect As String,  _
                    ByVal image As String,  _
                    ByVal image_alt As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal opd As Integer,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_aspect_id As Long,  _
                    ByVal Original_name As String,  _
                    ByVal Original_code As String,  _
                    ByVal Original_homebase_id As Integer,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_alt As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(aspect_id,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            If (code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(code,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(homebase_id,Integer)
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(effect,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(image,String)
            End If
            If (image_alt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_alt")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(image_alt,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(expansion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(opd,Integer)
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_aspect_id,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_name,String)
            End If
            If (Original_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_code,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_homebase_id,Integer)
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_effect,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_image,String)
            End If
            If (Original_image_alt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_alt")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_image_alt,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_expansion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_opd,Integer)
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal name As String,  _
                    ByVal code As String,  _
                    ByVal homebase_id As Integer,  _
                    ByVal effect As String,  _
                    ByVal image As String,  _
                    ByVal image_alt As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal opd As Integer,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_aspect_id As Long,  _
                    ByVal Original_name As String,  _
                    ByVal Original_code As String,  _
                    ByVal Original_homebase_id As Integer,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_alt As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_aspect_id, name, code, homebase_id, effect, image, image_alt, image_back, expansion, opd, commonname, comment, rarity, Original_aspect_id, Original_name, Original_code, Original_homebase_id, Original_effect, Original_image, Original_image_alt, Original_image_back, Original_expansion, Original_opd, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class basic_universeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "basic_universe"
            tableMapping.ColumnMappings.Add("basic_universe_id", "basic_universe_id")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("touse_power", "touse_power")
            tableMapping.ColumnMappings.Add("touse_skill", "touse_skill")
            tableMapping.ColumnMappings.Add("bonus_power", "bonus_power")
            tableMapping.ColumnMappings.Add("bonus_skill", "bonus_skill")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""basic_universe"" WHERE ((""basic_universe_id"" = :Original_basic"& _ 
                "_universe_id) AND (""hero"" = :Original_hero) AND (""name"" = :Original_name) AND ("""& _ 
                "touse_power"" = :Original_touse_power) AND ((:IsNull_touse_skill = 1 AND ""touse_s"& _ 
                "kill"" IS NULL) OR (""touse_skill"" = :Original_touse_skill)) AND (""bonus_power"" = "& _ 
                ":Original_bonus_power) AND ((:IsNull_bonus_skill = 1 AND ""bonus_skill"" IS NULL) "& _ 
                "OR (""bonus_skill"" = :Original_bonus_skill)) AND (""image"" = :Original_image) AND "& _ 
                "(""image_back"" = :Original_image_back) AND (""expansion"" = :Original_expansion) AN"& _ 
                "D (""commonname"" = :Original_commonname) AND (""comment"" = :Original_comment) AND "& _ 
                "((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_basic_universe_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "basic_universe_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_touse_skill"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_bonus_skill"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""basic_universe"" (""basic_universe_id"", ""hero"", ""name"", ""touse_"& _ 
                "power"", ""touse_skill"", ""bonus_power"", ""bonus_skill"", ""image"", ""image_back"", ""exp"& _ 
                "ansion"", ""commonname"", ""comment"", ""rarity"") VALUES (:basic_universe_id, :hero, :"& _ 
                "name, :touse_power, :touse_skill, :bonus_power, :bonus_skill, :image, :image_bac"& _ 
                "k, :expansion, :commonname, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "basic_universe_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "basic_universe_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""basic_universe"" SET ""basic_universe_id"" = :basic_universe_id, ""her"& _ 
                "o"" = :hero, ""name"" = :name, ""touse_power"" = :touse_power, ""touse_skill"" = :touse"& _ 
                "_skill, ""bonus_power"" = :bonus_power, ""bonus_skill"" = :bonus_skill, ""image"" = :i"& _ 
                "mage, ""image_back"" = :image_back, ""expansion"" = :expansion, ""commonname"" = :comm"& _ 
                "onname, ""comment"" = :comment, ""rarity"" = :rarity WHERE ((""basic_universe_id"" = :"& _ 
                "Original_basic_universe_id) AND (""hero"" = :Original_hero) AND (""name"" = :Origina"& _ 
                "l_name) AND (""touse_power"" = :Original_touse_power) AND ((:IsNull_touse_skill = "& _ 
                "1 AND ""touse_skill"" IS NULL) OR (""touse_skill"" = :Original_touse_skill)) AND (""b"& _ 
                "onus_power"" = :Original_bonus_power) AND ((:IsNull_bonus_skill = 1 AND ""bonus_sk"& _ 
                "ill"" IS NULL) OR (""bonus_skill"" = :Original_bonus_skill)) AND (""image"" = :Origin"& _ 
                "al_image) AND (""image_back"" = :Original_image_back) AND (""expansion"" = :Original"& _ 
                "_expansion) AND (""commonname"" = :Original_commonname) AND (""comment"" = :Original"& _ 
                "_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Origina"& _ 
                "l_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "basic_universe_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "basic_universe_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_basic_universe_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "basic_universe_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_touse_skill"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_bonus_skill"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT basic_universe_id, hero, name, touse_power, touse_skill, bonus_power, bonu"& _ 
                "s_skill, image, image_back, expansion, commonname, comment, rarity FROM ""main"".b"& _ 
                "asic_universe"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        basic_universe_id, name, touse_power, touse_skill, bonus_power, bon"& _ 
                "us_skill, image, image_back, hero, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "           basic_universe"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (basic_universe_id LIKE :basic_universe_"& _ 
                "id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "basic_universe_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "basic_universe_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.basic_universeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.basic_universeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.basic_universeDataTable = New OPCardsDataSet.basic_universeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.basic_universeDataTable, ByVal basic_universe_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (basic_universe_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("basic_universe_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basic_universe_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal basic_universe_id As Object) As OPCardsDataSet.basic_universeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (basic_universe_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("basic_universe_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basic_universe_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.basic_universeDataTable = New OPCardsDataSet.basic_universeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.basic_universeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "basic_universe")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_basic_universe_id As Long, ByVal Original_hero As String, ByVal Original_name As String, ByVal Original_touse_power As Integer, ByVal Original_touse_skill As String, ByVal Original_bonus_power As Integer, ByVal Original_bonus_skill As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_basic_universe_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_hero,String)
            End If
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_bonus_power,Integer)
            If (Original_bonus_skill Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_bonus_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal basic_universe_id As Long, ByVal hero As String, ByVal name As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal bonus_power As Integer, ByVal bonus_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(basic_universe_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(hero,String)
            End If
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(touse_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(bonus_power,Integer)
            If (bonus_skill Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(bonus_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal basic_universe_id As Long,  _
                    ByVal hero As String,  _
                    ByVal name As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal bonus_power As Integer,  _
                    ByVal bonus_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_basic_universe_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_name As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_bonus_power As Integer,  _
                    ByVal Original_bonus_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(basic_universe_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(hero,String)
            End If
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(bonus_power,Integer)
            If (bonus_skill Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(bonus_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_basic_universe_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_hero,String)
            End If
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_bonus_power,Integer)
            If (Original_bonus_skill Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_bonus_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal hero As String,  _
                    ByVal name As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal bonus_power As Integer,  _
                    ByVal bonus_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_basic_universe_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_name As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_bonus_power As Integer,  _
                    ByVal Original_bonus_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_basic_universe_id, hero, name, touse_power, touse_skill, bonus_power, bonus_skill, image, image_back, expansion, commonname, comment, rarity, Original_basic_universe_id, Original_hero, Original_name, Original_touse_power, Original_touse_skill, Original_bonus_power, Original_bonus_skill, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class charactersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "characters"
            tableMapping.ColumnMappings.Add("cid", "cid")
            tableMapping.ColumnMappings.Add("uid", "uid")
            tableMapping.ColumnMappings.Add("name_on_card", "name_on_card")
            tableMapping.ColumnMappings.Add("e", "e")
            tableMapping.ColumnMappings.Add("f", "f")
            tableMapping.ColumnMappings.Add("s", "s")
            tableMapping.ColumnMappings.Add("i", "i")
            tableMapping.ColumnMappings.Add("total", "total")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("dccode", "dccode")
            tableMapping.ColumnMappings.Add("inherent", "inherent")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""characters"" WHERE ((""cid"" = :Original_cid) AND (""uid"" = :Orig"& _ 
                "inal_uid) AND (""name_on_card"" = :Original_name_on_card) AND ((:IsNull_e = 1 AND "& _ 
                """e"" IS NULL) OR (""e"" = :Original_e)) AND ((:IsNull_f = 1 AND ""f"" IS NULL) OR (""f"& _ 
                """ = :Original_f)) AND ((:IsNull_s = 1 AND ""s"" IS NULL) OR (""s"" = :Original_s)) A"& _ 
                "ND ((:IsNull_i = 1 AND ""i"" IS NULL) OR (""i"" = :Original_i)) AND (""total"" = :Orig"& _ 
                "inal_total) AND (""expansion"" = :Original_expansion) AND (""dccode"" = :Original_dc"& _ 
                "code) AND (""inherent"" = :Original_inherent) AND (""image"" = :Original_image) AND "& _ 
                "(""image_back"" = :Original_image_back) AND (""commonname"" = :Original_commonname) "& _ 
                "AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NUL"& _ 
                "L) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_cid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "cid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name_on_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_on_card"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_e"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "e"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_e"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "e"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_f"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "f"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_f"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "f"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_s"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "s"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_s"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "s"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_i"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "i"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_i"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "i"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_total"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_inherent"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "inherent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""characters"" (""cid"", ""uid"", ""name_on_card"", ""e"", ""f"", ""s"", ""i"""& _ 
                ", ""total"", ""expansion"", ""dccode"", ""inherent"", ""image"", ""image_back"", ""commonname"& _ 
                """, ""comment"", ""rarity"") VALUES (:cid, :uid, :name_on_card, :e, :f, :s, :i, :tota"& _ 
                "l, :expansion, :dccode, :inherent, :image, :image_back, :commonname, :comment, :"& _ 
                "rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name_on_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_on_card"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "e"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "e"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "f"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "f"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "s"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "s"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "i"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "i"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "total"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "total"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "inherent"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "inherent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""characters"" SET ""cid"" = :cid, ""uid"" = :uid, ""name_on_card"" = :name"& _ 
                "_on_card, ""e"" = :e, ""f"" = :f, ""s"" = :s, ""i"" = :i, ""total"" = :total, ""expansion"" "& _ 
                "= :expansion, ""dccode"" = :dccode, ""inherent"" = :inherent, ""image"" = :image, ""ima"& _ 
                "ge_back"" = :image_back, ""commonname"" = :commonname, ""comment"" = :comment, ""rarit"& _ 
                "y"" = :rarity WHERE ((""cid"" = :Original_cid) AND (""uid"" = :Original_uid) AND (""na"& _ 
                "me_on_card"" = :Original_name_on_card) AND ((:IsNull_e = 1 AND ""e"" IS NULL) OR ("""& _ 
                "e"" = :Original_e)) AND ((:IsNull_f = 1 AND ""f"" IS NULL) OR (""f"" = :Original_f)) "& _ 
                "AND ((:IsNull_s = 1 AND ""s"" IS NULL) OR (""s"" = :Original_s)) AND ((:IsNull_i = 1"& _ 
                " AND ""i"" IS NULL) OR (""i"" = :Original_i)) AND (""total"" = :Original_total) AND ("""& _ 
                "expansion"" = :Original_expansion) AND (""dccode"" = :Original_dccode) AND (""inhere"& _ 
                "nt"" = :Original_inherent) AND (""image"" = :Original_image) AND (""image_back"" = :O"& _ 
                "riginal_image_back) AND (""commonname"" = :Original_commonname) AND (""comment"" = :"& _ 
                "Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = "& _ 
                ":Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name_on_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_on_card"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "e"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "e"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "f"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "f"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "s"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "s"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "i"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "i"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "total"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "total"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "inherent"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "inherent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_cid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "cid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name_on_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_on_card"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_e"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "e"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_e"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "e"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_f"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "f"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_f"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "f"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_s"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "s"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_s"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "s"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_i"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "i"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_i"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "i"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_total"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_inherent"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "inherent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cid, uid, name_on_card, e, f, s, i, total, expansion, dccode, inherent, im"& _ 
                "age, image_back, commonname, comment, rarity FROM ""main"".characters"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        cid, uid, name_on_card, e, f, s, i, total, expansion, dccode, inher"& _ 
                "ent, image, image_back, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            characters"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (cid LIKE :cid)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.charactersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.charactersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.charactersDataTable = New OPCardsDataSet.charactersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.charactersDataTable, ByVal cid As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (cid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cid")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cid,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal cid As Object) As OPCardsDataSet.charactersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (cid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cid")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cid,Object)
            End If
            Dim dataTable As OPCardsDataSet.charactersDataTable = New OPCardsDataSet.charactersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.charactersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "characters")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_cid As Long,  _
                    ByVal Original_uid As Integer,  _
                    ByVal Original_name_on_card As String,  _
                    ByVal Original_e As Global.System.Nullable(Of Integer),  _
                    ByVal Original_f As Global.System.Nullable(Of Integer),  _
                    ByVal Original_s As Global.System.Nullable(Of Integer),  _
                    ByVal Original_i As Global.System.Nullable(Of Integer),  _
                    ByVal Original_total As Integer,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_dccode As String,  _
                    ByVal Original_inherent As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cid,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_uid,Integer)
            If (Original_name_on_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name_on_card")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name_on_card,String)
            End If
            If (Original_e.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_e.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_f.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_f.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_s.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_s.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_i.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_i.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_total,Integer)
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_expansion,String)
            End If
            If (Original_dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dccode")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_dccode,String)
            End If
            If (Original_inherent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_inherent")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_inherent,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_image_back,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal cid As Long,  _
                    ByVal uid As Integer,  _
                    ByVal name_on_card As String,  _
                    ByVal e As Global.System.Nullable(Of Integer),  _
                    ByVal f As Global.System.Nullable(Of Integer),  _
                    ByVal s As Global.System.Nullable(Of Integer),  _
                    ByVal i As Global.System.Nullable(Of Integer),  _
                    ByVal total As Integer,  _
                    ByVal expansion As String,  _
                    ByVal dccode As String,  _
                    ByVal inherent As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cid,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(uid,Integer)
            If (name_on_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name_on_card")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name_on_card,String)
            End If
            If (e.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(e.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (f.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(f.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (s.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(s.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (i.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(i.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(total,Integer)
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dccode")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(dccode,String)
            End If
            If (inherent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("inherent")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(inherent,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(image_back,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cid As Long,  _
                    ByVal uid As Integer,  _
                    ByVal name_on_card As String,  _
                    ByVal e As Global.System.Nullable(Of Integer),  _
                    ByVal f As Global.System.Nullable(Of Integer),  _
                    ByVal s As Global.System.Nullable(Of Integer),  _
                    ByVal i As Global.System.Nullable(Of Integer),  _
                    ByVal total As Integer,  _
                    ByVal expansion As String,  _
                    ByVal dccode As String,  _
                    ByVal inherent As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_cid As Long,  _
                    ByVal Original_uid As Integer,  _
                    ByVal Original_name_on_card As String,  _
                    ByVal Original_e As Global.System.Nullable(Of Integer),  _
                    ByVal Original_f As Global.System.Nullable(Of Integer),  _
                    ByVal Original_s As Global.System.Nullable(Of Integer),  _
                    ByVal Original_i As Global.System.Nullable(Of Integer),  _
                    ByVal Original_total As Integer,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_dccode As String,  _
                    ByVal Original_inherent As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cid,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(uid,Integer)
            If (name_on_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name_on_card")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name_on_card,String)
            End If
            If (e.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(e.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (f.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(f.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (s.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(s.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (i.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(i.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(total,Integer)
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(dccode,String)
            End If
            If (inherent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("inherent")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(inherent,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(image_back,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_cid,Long)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_uid,Integer)
            If (Original_name_on_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name_on_card")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_name_on_card,String)
            End If
            If (Original_e.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_e.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_f.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_f.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_s.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_s.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_i.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_i.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_total,Integer)
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_expansion,String)
            End If
            If (Original_dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_dccode,String)
            End If
            If (Original_inherent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_inherent")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_inherent,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_image_back,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal uid As Integer,  _
                    ByVal name_on_card As String,  _
                    ByVal e As Global.System.Nullable(Of Integer),  _
                    ByVal f As Global.System.Nullable(Of Integer),  _
                    ByVal s As Global.System.Nullable(Of Integer),  _
                    ByVal i As Global.System.Nullable(Of Integer),  _
                    ByVal total As Integer,  _
                    ByVal expansion As String,  _
                    ByVal dccode As String,  _
                    ByVal inherent As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_cid As Long,  _
                    ByVal Original_uid As Integer,  _
                    ByVal Original_name_on_card As String,  _
                    ByVal Original_e As Global.System.Nullable(Of Integer),  _
                    ByVal Original_f As Global.System.Nullable(Of Integer),  _
                    ByVal Original_s As Global.System.Nullable(Of Integer),  _
                    ByVal Original_i As Global.System.Nullable(Of Integer),  _
                    ByVal Original_total As Integer,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_dccode As String,  _
                    ByVal Original_inherent As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_cid, uid, name_on_card, e, f, s, i, total, expansion, dccode, inherent, image, image_back, commonname, comment, rarity, Original_cid, Original_uid, Original_name_on_card, Original_e, Original_f, Original_s, Original_i, Original_total, Original_expansion, Original_dccode, Original_inherent, Original_image, Original_image_back, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class characters_nameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "characters_name"
            tableMapping.ColumnMappings.Add("uid", "uid")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""characters_name"" WHERE ((""uid"" = :Original_uid) AND (""name"" ="& _ 
                " :Original_name))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_uid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "uid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""characters_name"" (""uid"", ""name"") VALUES (:uid, :name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""characters_name"" SET ""uid"" = :uid, ""name"" = :name WHERE ((""uid"" = "& _ 
                ":Original_uid) AND (""name"" = :Original_name))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_uid"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "uid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT uid, name FROM ""main"".characters_name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.characters_nameDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.characters_nameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.characters_nameDataTable = New OPCardsDataSet.characters_nameDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.characters_nameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "characters_name")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_uid As Long, ByVal Original_name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_uid,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal uid As Long, ByVal name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(uid,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal uid As Long, ByVal name As String, ByVal Original_uid As Long, ByVal Original_name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(uid,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_uid,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal Original_uid As Long, ByVal Original_name As String) As Integer
            Return Me.Update(Original_uid, name, Original_uid, Original_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class characters_specialsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "characters_specials"
            tableMapping.ColumnMappings.Add("cid", "cid")
            tableMapping.ColumnMappings.Add("uid", "uid")
            tableMapping.ColumnMappings.Add("can_play_opd", "can_play_opd")
            tableMapping.ColumnMappings.Add("can_play_non_opd", "can_play_non_opd")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""characters_specials"" (""cid"", ""uid"", ""can_play_opd"", ""can_play"& _ 
                "_non_opd"") VALUES (:cid, :uid, :can_play_opd, :can_play_non_opd)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "can_play_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "can_play_opd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "can_play_non_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "can_play_non_opd"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cid, uid, can_play_opd, can_play_non_opd FROM ""main"".characters_specials"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.characters_specialsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.characters_specialsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.characters_specialsDataTable = New OPCardsDataSet.characters_specialsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.characters_specialsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "characters_specials")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cid As Integer, ByVal uid As Integer, ByVal can_play_opd As Integer, ByVal can_play_non_opd As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cid,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(uid,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(can_play_opd,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(can_play_non_opd,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class characters_specials_singleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "characters_specials_single"
            tableMapping.ColumnMappings.Add("cid", "cid")
            tableMapping.ColumnMappings.Add("specials_id", "specials_id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""characters_specials_single"" (""cid"", ""specials_id"") VALUES (:c"& _ 
                "id, :specials_id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "specials_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "specials_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cid, specials_id FROM ""main"".characters_specials_single"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.characters_specials_singleDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.characters_specials_singleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.characters_specials_singleDataTable = New OPCardsDataSet.characters_specials_singleDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.characters_specials_singleDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "characters_specials_single")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cid As Integer, ByVal specials_id As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(cid,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(specials_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class code_variantTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "code_variant"
            tableMapping.ColumnMappings.Add("code_variant", "code_variant")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""code_variant"" WHERE ((""code_variant"" = :Original_code_variant"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""code_variant"" (""code_variant"") VALUES (:code_variant)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""code_variant"" SET ""code_variant"" = :code_variant WHERE ((""code_var"& _ 
                "iant"" = :Original_code_variant))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT code_variant FROM ""main"".code_variant"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.code_variantDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.code_variantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.code_variantDataTable = New OPCardsDataSet.code_variantDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.code_variantDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "code_variant")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_code_variant As String) As Integer
            If (Original_code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code_variant")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_code_variant,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal code_variant As String) As Integer
            If (code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code_variant")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(code_variant,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal code_variant As String, ByVal Original_code_variant As String) As Integer
            If (code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code_variant")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(code_variant,String)
            End If
            If (Original_code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code_variant")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_code_variant,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_code_variant As String) As Integer
            Return Me.Update(Original_code_variant, Original_code_variant)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dccodeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dccode"
            tableMapping.ColumnMappings.Add("dccode", "dccode")
            tableMapping.ColumnMappings.Add("type", "type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dccode"" WHERE ((""dccode"" = :Original_dccode) AND (""type"" = :O"& _ 
                "riginal_type))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_type"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dccode"" (""dccode"", ""type"") VALUES (:dccode, :type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "type"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dccode"" SET ""dccode"" = :dccode, ""type"" = :type WHERE ((""dccode"" = "& _ 
                ":Original_dccode) AND (""type"" = :Original_type))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "type"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dccode"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "dccode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_type"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT dccode, type FROM ""main"".dccode"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.dccodeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.dccodeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.dccodeDataTable = New OPCardsDataSet.dccodeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.dccodeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "dccode")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_dccode As String, ByVal Original_type As String) As Integer
            If (Original_dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dccode")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_dccode,String)
            End If
            If (Original_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal dccode As String, ByVal type As String) As Integer
            If (dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dccode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(dccode,String)
            End If
            If (type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("type")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal dccode As String, ByVal type As String, ByVal Original_dccode As String, ByVal Original_type As String) As Integer
            If (dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(dccode,String)
            End If
            If (type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("type")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(type,String)
            End If
            If (Original_dccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_dccode,String)
            End If
            If (Original_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal type As String, ByVal Original_dccode As String, ByVal Original_type As String) As Integer
            Return Me.Update(Original_dccode, type, Original_dccode, Original_type)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class doubleshotTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "doubleshot"
            tableMapping.ColumnMappings.Add("doubleshot_id", "doubleshot_id")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("touse_power", "touse_power")
            tableMapping.ColumnMappings.Add("touse_skill", "touse_skill")
            tableMapping.ColumnMappings.Add("teammate_power", "teammate_power")
            tableMapping.ColumnMappings.Add("teammate_skill", "teammate_skill")
            tableMapping.ColumnMappings.Add("actas_skill", "actas_skill")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""doubleshot"" WHERE ((""doubleshot_id"" = :Original_doubleshot_id"& _ 
                ") AND (""hero"" = :Original_hero) AND (""touse_power"" = :Original_touse_power) AND "& _ 
                "(""touse_skill"" = :Original_touse_skill) AND (""teammate_power"" = :Original_teamma"& _ 
                "te_power) AND (""teammate_skill"" = :Original_teammate_skill) AND (""actas_skill"" ="& _ 
                " :Original_actas_skill) AND (""image"" = :Original_image) AND (""image_back"" = :Ori"& _ 
                "ginal_image_back) AND (""expansion"" = :Original_expansion) AND (""commonname"" = :O"& _ 
                "riginal_commonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1"& _ 
                " AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_doubleshot_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "doubleshot_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""doubleshot"" (""doubleshot_id"", ""hero"", ""touse_power"", ""touse_s"& _ 
                "kill"", ""teammate_power"", ""teammate_skill"", ""actas_skill"", ""image"", ""image_back"","& _ 
                " ""expansion"", ""commonname"", ""comment"", ""rarity"") VALUES (:doubleshot_id, :hero, "& _ 
                ":touse_power, :touse_skill, :teammate_power, :teammate_skill, :actas_skill, :ima"& _ 
                "ge, :image_back, :expansion, :commonname, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "doubleshot_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "doubleshot_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""doubleshot"" SET ""doubleshot_id"" = :doubleshot_id, ""hero"" = :hero, "& _ 
                """touse_power"" = :touse_power, ""touse_skill"" = :touse_skill, ""teammate_power"" = :"& _ 
                "teammate_power, ""teammate_skill"" = :teammate_skill, ""actas_skill"" = :actas_skill"& _ 
                ", ""image"" = :image, ""image_back"" = :image_back, ""expansion"" = :expansion, ""commo"& _ 
                "nname"" = :commonname, ""comment"" = :comment, ""rarity"" = :rarity WHERE ((""doublesh"& _ 
                "ot_id"" = :Original_doubleshot_id) AND (""hero"" = :Original_hero) AND (""touse_powe"& _ 
                "r"" = :Original_touse_power) AND (""touse_skill"" = :Original_touse_skill) AND (""te"& _ 
                "ammate_power"" = :Original_teammate_power) AND (""teammate_skill"" = :Original_team"& _ 
                "mate_skill) AND (""actas_skill"" = :Original_actas_skill) AND (""image"" = :Original"& _ 
                "_image) AND (""image_back"" = :Original_image_back) AND (""expansion"" = :Original_e"& _ 
                "xpansion) AND (""commonname"" = :Original_commonname) AND (""comment"" = :Original_c"& _ 
                "omment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_"& _ 
                "rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "doubleshot_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "doubleshot_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_doubleshot_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "doubleshot_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT doubleshot_id, hero, touse_power, touse_skill, teammate_power, teammate_sk"& _ 
                "ill, actas_skill, image, image_back, expansion, commonname, comment, rarity FROM"& _ 
                " ""main"".doubleshot"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        doubleshot_id, touse_power, touse_skill, teammate_power, teammate_s"& _ 
                "kill, actas_skill, image, image_back, hero, expansion, commonname, comment, rari"& _ 
                "ty"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            doubleshot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (doubleshot_id LIKE :doubleshot_id)"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "doubleshot_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "doubleshot_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.doubleshotDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.doubleshotDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.doubleshotDataTable = New OPCardsDataSet.doubleshotDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.doubleshotDataTable, ByVal doubleshot_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (doubleshot_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doubleshot_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(doubleshot_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal doubleshot_id As Object) As OPCardsDataSet.doubleshotDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (doubleshot_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doubleshot_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(doubleshot_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.doubleshotDataTable = New OPCardsDataSet.doubleshotDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.doubleshotDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "doubleshot")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_doubleshot_id As Long, ByVal Original_hero As String, ByVal Original_touse_power As Integer, ByVal Original_touse_skill As String, ByVal Original_teammate_power As Integer, ByVal Original_teammate_skill As String, ByVal Original_actas_skill As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_doubleshot_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_hero,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_teammate_power,Integer)
            If (Original_teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_teammate_skill,String)
            End If
            If (Original_actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_actas_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_actas_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal doubleshot_id As Long, ByVal hero As String, ByVal touse_power As Integer, ByVal touse_skill As String, ByVal teammate_power As Integer, ByVal teammate_skill As String, ByVal actas_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(doubleshot_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(hero,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(touse_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(teammate_power,Integer)
            If (teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(teammate_skill,String)
            End If
            If (actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actas_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(actas_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doubleshot_id As Long,  _
                    ByVal hero As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal teammate_power As Integer,  _
                    ByVal teammate_skill As String,  _
                    ByVal actas_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_doubleshot_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_teammate_power As Integer,  _
                    ByVal Original_teammate_skill As String,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(doubleshot_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(teammate_power,Integer)
            If (teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(teammate_skill,String)
            End If
            If (actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actas_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(actas_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_doubleshot_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_teammate_power,Integer)
            If (Original_teammate_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_teammate_skill,String)
            End If
            If (Original_actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_actas_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_actas_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal hero As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal teammate_power As Integer,  _
                    ByVal teammate_skill As String,  _
                    ByVal actas_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_doubleshot_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_teammate_power As Integer,  _
                    ByVal Original_teammate_skill As String,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_doubleshot_id, hero, touse_power, touse_skill, teammate_power, teammate_skill, actas_skill, image, image_back, expansion, commonname, comment, rarity, Original_doubleshot_id, Original_hero, Original_touse_power, Original_touse_skill, Original_teammate_power, Original_teammate_skill, Original_actas_skill, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class eventTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "event"
            tableMapping.ColumnMappings.Add("event_id", "event_id")
            tableMapping.ColumnMappings.Add("mission_id", "mission_id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("event_text", "event_text")
            tableMapping.ColumnMappings.Add("effect", "effect")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""event"" WHERE ((""event_id"" = :Original_event_id) AND (""mission"& _ 
                "_id"" = :Original_mission_id) AND (""name"" = :Original_name) AND (""hero"" = :Origin"& _ 
                "al_hero) AND (""event_text"" = :Original_event_text) AND (""effect"" = :Original_eff"& _ 
                "ect) AND (""image"" = :Original_image) AND (""image_back"" = :Original_image_back) A"& _ 
                "ND (""expansion"" = :Original_expansion) AND (""commonname"" = :Original_commonname)"& _ 
                " AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NU"& _ 
                "LL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_event_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "event_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_event_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "event_text"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""event"" (""event_id"", ""mission_id"", ""name"", ""hero"", ""event_text"& _ 
                """, ""effect"", ""image"", ""image_back"", ""expansion"", ""commonname"", ""comment"", ""rarit"& _ 
                "y"") VALUES (:event_id, :mission_id, :name, :hero, :event_text, :effect, :image, "& _ 
                ":image_back, :expansion, :commonname, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "event_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "event_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "event_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "event_text"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""event"" SET ""event_id"" = :event_id, ""mission_id"" = :mission_id, ""na"& _ 
                "me"" = :name, ""hero"" = :hero, ""event_text"" = :event_text, ""effect"" = :effect, ""im"& _ 
                "age"" = :image, ""image_back"" = :image_back, ""expansion"" = :expansion, ""commonname"& _ 
                """ = :commonname, ""comment"" = :comment, ""rarity"" = :rarity WHERE ((""event_id"" = :"& _ 
                "Original_event_id) AND (""mission_id"" = :Original_mission_id) AND (""name"" = :Orig"& _ 
                "inal_name) AND (""hero"" = :Original_hero) AND (""event_text"" = :Original_event_tex"& _ 
                "t) AND (""effect"" = :Original_effect) AND (""image"" = :Original_image) AND (""image"& _ 
                "_back"" = :Original_image_back) AND (""expansion"" = :Original_expansion) AND (""com"& _ 
                "monname"" = :Original_commonname) AND (""comment"" = :Original_comment) AND ((:IsNu"& _ 
                "ll_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "event_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "event_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "event_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "event_text"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_event_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "event_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_event_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "event_text"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT event_id, mission_id, name, hero, event_text, effect, image, image_back, e"& _ 
                "xpansion, commonname, comment, rarity FROM ""main"".event"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        event_id, mission_id, name, effect, image, image_back, hero, event_"& _ 
                "text, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            event"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE      "& _ 
                "  (event_id LIKE :event_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "event_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "event_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.eventDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.eventDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.eventDataTable = New OPCardsDataSet.eventDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.eventDataTable, ByVal event_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (event_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("event_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(event_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal event_id As Object) As OPCardsDataSet.eventDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (event_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("event_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(event_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.eventDataTable = New OPCardsDataSet.eventDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.eventDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "event")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_event_id As Long, ByVal Original_mission_id As Integer, ByVal Original_name As String, ByVal Original_hero As String, ByVal Original_event_text As String, ByVal Original_effect As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_event_id,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_mission_id,Integer)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name,String)
            End If
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_hero,String)
            End If
            If (Original_event_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_event_text")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_event_text,String)
            End If
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_effect,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal event_id As Long, ByVal mission_id As Integer, ByVal name As String, ByVal hero As String, ByVal event_text As String, ByVal effect As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(event_id,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(mission_id,Integer)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name,String)
            End If
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(hero,String)
            End If
            If (event_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("event_text")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(event_text,String)
            End If
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(effect,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal event_id As Long,  _
                    ByVal mission_id As Integer,  _
                    ByVal name As String,  _
                    ByVal hero As String,  _
                    ByVal event_text As String,  _
                    ByVal effect As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_event_id As Long,  _
                    ByVal Original_mission_id As Integer,  _
                    ByVal Original_name As String,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_event_text As String,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(event_id,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(mission_id,Integer)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name,String)
            End If
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(hero,String)
            End If
            If (event_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("event_text")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(event_text,String)
            End If
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(effect,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_event_id,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_mission_id,Integer)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_name,String)
            End If
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_hero,String)
            End If
            If (Original_event_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_event_text")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_event_text,String)
            End If
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_effect,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal mission_id As Integer,  _
                    ByVal name As String,  _
                    ByVal hero As String,  _
                    ByVal event_text As String,  _
                    ByVal effect As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_event_id As Long,  _
                    ByVal Original_mission_id As Integer,  _
                    ByVal Original_name As String,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_event_text As String,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_event_id, mission_id, name, hero, event_text, effect, image, image_back, expansion, commonname, comment, rarity, Original_event_id, Original_mission_id, Original_name, Original_hero, Original_event_text, Original_effect, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class expansionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "expansion"
            tableMapping.ColumnMappings.Add("exp", "exp")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("release_date", "release_date")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""expansion"" WHERE ((""exp"" = :Original_exp) AND (""expansion"" = "& _ 
                ":Original_expansion) AND (""release_date"" = :Original_release_date))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_exp"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "exp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_release_date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "release_date"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""expansion"" (""exp"", ""expansion"", ""release_date"") VALUES (:exp,"& _ 
                " :expansion, :release_date)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "exp"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "exp"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "release_date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "release_date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""expansion"" SET ""exp"" = :exp, ""expansion"" = :expansion, ""release_da"& _ 
                "te"" = :release_date WHERE ((""exp"" = :Original_exp) AND (""expansion"" = :Original_"& _ 
                "expansion) AND (""release_date"" = :Original_release_date))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "exp"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "exp"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "release_date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "release_date"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_exp"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "exp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_release_date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "release_date"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT exp, expansion, release_date FROM ""main"".expansion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.expansionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.expansionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.expansionDataTable = New OPCardsDataSet.expansionDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.expansionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "expansion")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_exp As String, ByVal Original_expansion As String, ByVal Original_release_date As Date) As Integer
            If (Original_exp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exp")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_exp,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_expansion,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_release_date,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal exp As String, ByVal expansion As String, ByVal release_date As Date) As Integer
            If (exp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exp")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(exp,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(expansion,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(release_date,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal exp As String, ByVal expansion As String, ByVal release_date As Date, ByVal Original_exp As String, ByVal Original_expansion As String, ByVal Original_release_date As Date) As Integer
            If (exp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exp")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(exp,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(expansion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(release_date,Date)
            If (Original_exp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exp")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_exp,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_expansion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_release_date,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal expansion As String, ByVal release_date As Date, ByVal Original_exp As String, ByVal Original_expansion As String, ByVal Original_release_date As Date) As Integer
            Return Me.Update(Original_exp, expansion, release_date, Original_exp, Original_expansion, Original_release_date)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class homebasesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "homebases"
            tableMapping.ColumnMappings.Add("homebase_id", "homebase_id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("variant", "variant")
            tableMapping.ColumnMappings.Add("inherent", "inherent")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""homebases"" (""homebase_id"", ""name"", ""variant"", ""inherent"", ""im"& _ 
                "age"", ""image_back"", ""expansion"", ""commonname"", ""comment"", ""rarity"") VALUES (:hom"& _ 
                "ebase_id, :name, :variant, :inherent, :image, :image_back, :expansion, :commonna"& _ 
                "me, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "variant"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "inherent"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "inherent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT homebase_id, name, variant, inherent, image, image_back, expansion, common"& _ 
                "name, comment, rarity FROM ""main"".homebases"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        homebase_id, name, inherent, image, image_back, variant, expansion,"& _ 
                " commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            homebases"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (homebase_"& _ 
                "id LIKE :homebase_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.homebasesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.homebasesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.homebasesDataTable = New OPCardsDataSet.homebasesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.homebasesDataTable, ByVal homebase_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (homebase_id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(homebase_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal homebase_id As Object) As OPCardsDataSet.homebasesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (homebase_id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(homebase_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.homebasesDataTable = New OPCardsDataSet.homebasesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.homebasesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "homebases")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal homebase_id As Global.System.Nullable(Of Long), ByVal name As String, ByVal _variant As String, ByVal inherent As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            If (homebase_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(homebase_id.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            If (_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_variant")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_variant,String)
            End If
            If (inherent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("inherent")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(inherent,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class homebases_charactersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "homebases_characters"
            tableMapping.ColumnMappings.Add("homebase_id", "homebase_id")
            tableMapping.ColumnMappings.Add("cid", "cid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""homebases_characters"" WHERE ((""homebase_id"" = :Original_homeb"& _ 
                "ase_id) AND (""cid"" = :Original_cid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_cid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "cid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""homebases_characters"" (""homebase_id"", ""cid"") VALUES (:homebas"& _ 
                "e_id, :cid)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""homebases_characters"" SET ""homebase_id"" = :homebase_id, ""cid"" = :c"& _ 
                "id WHERE ((""homebase_id"" = :Original_homebase_id) AND (""cid"" = :Original_cid))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "cid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "cid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_homebase_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_cid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "cid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT homebase_id, cid FROM ""main"".homebases_characters"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.homebases_charactersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.homebases_charactersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.homebases_charactersDataTable = New OPCardsDataSet.homebases_charactersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.homebases_charactersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "homebases_characters")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_homebase_id As Integer, ByVal Original_cid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_homebase_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal homebase_id As Integer, ByVal cid As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(homebase_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(cid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal homebase_id As Integer, ByVal cid As Integer, ByVal Original_homebase_id As Integer, ByVal Original_cid As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(homebase_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cid,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_homebase_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_cid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_homebase_id As Integer, ByVal Original_cid As Integer) As Integer
            Return Me.Update(Original_homebase_id, Original_cid, Original_homebase_id, Original_cid)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class homebases_nameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "homebases_name"
            tableMapping.ColumnMappings.Add("homebase_id", "homebase_id")
            tableMapping.ColumnMappings.Add("name", "name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""homebases_name"" WHERE ((""homebase_id"" = :Original_homebase_id"& _ 
                ") AND (""name"" = :Original_name))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_homebase_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""homebases_name"" (""homebase_id"", ""name"") VALUES (:homebase_id,"& _ 
                " :name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""homebases_name"" SET ""homebase_id"" = :homebase_id, ""name"" = :name W"& _ 
                "HERE ((""homebase_id"" = :Original_homebase_id) AND (""name"" = :Original_name))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "homebase_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_homebase_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "homebase_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT homebase_id, name FROM ""main"".homebases_name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.homebases_nameDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.homebases_nameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.homebases_nameDataTable = New OPCardsDataSet.homebases_nameDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.homebases_nameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "homebases_name")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_homebase_id As Long, ByVal Original_name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_homebase_id,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal homebase_id As Long, ByVal name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(homebase_id,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal homebase_id As Long, ByVal name As String, ByVal Original_homebase_id As Long, ByVal Original_name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(homebase_id,Long)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_homebase_id,Long)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal Original_homebase_id As Long, ByVal Original_name As String) As Integer
            Return Me.Update(Original_homebase_id, name, Original_homebase_id, Original_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class missionsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "missions"
            tableMapping.ColumnMappings.Add("missions_id", "missions_id")
            tableMapping.ColumnMappings.Add("mission_id", "mission_id")
            tableMapping.ColumnMappings.Add("number", "number")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("mission_title", "mission_title")
            tableMapping.ColumnMappings.Add("mission_text", "mission_text")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""missions"" WHERE ((""missions_id"" = :Original_missions_id) AND "& _ 
                "(""mission_id"" = :Original_mission_id) AND (""number"" = :Original_number) AND (""he"& _ 
                "ro"" = :Original_hero) AND (""mission_title"" = :Original_mission_title) AND (""miss"& _ 
                "ion_text"" = :Original_mission_text) AND (""image"" = :Original_image) AND (""image_"& _ 
                "back"" = :Original_image_back) AND (""expansion"" = :Original_expansion) AND (""comm"& _ 
                "onname"" = :Original_commonname) AND (""comment"" = :Original_comment) AND ((:IsNul"& _ 
                "l_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_missions_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "missions_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_number"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "number"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_title"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_title"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_text"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""missions"" (""missions_id"", ""mission_id"", ""number"", ""hero"", ""mi"& _ 
                "ssion_title"", ""mission_text"", ""image"", ""image_back"", ""expansion"", ""commonname"", "& _ 
                """comment"", ""rarity"") VALUES (:missions_id, :mission_id, :number, :hero, :mission"& _ 
                "_title, :mission_text, :image, :image_back, :expansion, :commonname, :comment, :"& _ 
                "rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "missions_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "missions_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "number"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "number"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_title"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_title"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_text"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""missions"" SET ""missions_id"" = :missions_id, ""mission_id"" = :missio"& _ 
                "n_id, ""number"" = :number, ""hero"" = :hero, ""mission_title"" = :mission_title, ""mis"& _ 
                "sion_text"" = :mission_text, ""image"" = :image, ""image_back"" = :image_back, ""expan"& _ 
                "sion"" = :expansion, ""commonname"" = :commonname, ""comment"" = :comment, ""rarity"" ="& _ 
                " :rarity WHERE ((""missions_id"" = :Original_missions_id) AND (""mission_id"" = :Ori"& _ 
                "ginal_mission_id) AND (""number"" = :Original_number) AND (""hero"" = :Original_hero"& _ 
                ") AND (""mission_title"" = :Original_mission_title) AND (""mission_text"" = :Origina"& _ 
                "l_mission_text) AND (""image"" = :Original_image) AND (""image_back"" = :Original_im"& _ 
                "age_back) AND (""expansion"" = :Original_expansion) AND (""commonname"" = :Original_"& _ 
                "commonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""ra"& _ 
                "rity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "missions_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "missions_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "number"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "number"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_title"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_title"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_text"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_missions_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "missions_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_number"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "number"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_title"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_title"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_text"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_text"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT missions_id, mission_id, number, hero, mission_title, mission_text, image,"& _ 
                " image_back, expansion, commonname, comment, rarity FROM ""main"".missions"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        missions_id, mission_id, number, image, image_back, mission_title, "& _ 
                "hero, mission_text, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            miss"& _ 
                "ions"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (mission_id LIKE :mission_id) AND (number LIKE :number)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "number"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "number"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.missionsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.missionsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.missionsDataTable = New OPCardsDataSet.missionsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDandNumber(ByVal dataTable As OPCardsDataSet.missionsDataTable, ByVal mission_id As Integer, ByVal number As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(mission_id,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(number,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDandNumber(ByVal mission_id As Integer, ByVal number As Integer) As OPCardsDataSet.missionsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(mission_id,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(number,Integer)
            Dim dataTable As OPCardsDataSet.missionsDataTable = New OPCardsDataSet.missionsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.missionsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "missions")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_missions_id As Long, ByVal Original_mission_id As Integer, ByVal Original_number As Integer, ByVal Original_hero As String, ByVal Original_mission_title As String, ByVal Original_mission_text As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_missions_id,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_mission_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_number,Integer)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_hero,String)
            End If
            If (Original_mission_title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mission_title")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_mission_title,String)
            End If
            If (Original_mission_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mission_text")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_mission_text,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal missions_id As Long, ByVal mission_id As Integer, ByVal number As Integer, ByVal hero As String, ByVal mission_title As String, ByVal mission_text As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(missions_id,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(mission_id,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(number,Integer)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(hero,String)
            End If
            If (mission_title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mission_title")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(mission_title,String)
            End If
            If (mission_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mission_text")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(mission_text,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal missions_id As Long,  _
                    ByVal mission_id As Integer,  _
                    ByVal number As Integer,  _
                    ByVal hero As String,  _
                    ByVal mission_title As String,  _
                    ByVal mission_text As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_missions_id As Long,  _
                    ByVal Original_mission_id As Integer,  _
                    ByVal Original_number As Integer,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_mission_title As String,  _
                    ByVal Original_mission_text As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(missions_id,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(mission_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(number,Integer)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(hero,String)
            End If
            If (mission_title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mission_title")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(mission_title,String)
            End If
            If (mission_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mission_text")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(mission_text,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_missions_id,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_mission_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_number,Integer)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_hero,String)
            End If
            If (Original_mission_title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mission_title")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_mission_title,String)
            End If
            If (Original_mission_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mission_text")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_mission_text,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal mission_id As Integer,  _
                    ByVal number As Integer,  _
                    ByVal hero As String,  _
                    ByVal mission_title As String,  _
                    ByVal mission_text As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_missions_id As Long,  _
                    ByVal Original_mission_id As Integer,  _
                    ByVal Original_number As Integer,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_mission_title As String,  _
                    ByVal Original_mission_text As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_missions_id, mission_id, number, hero, mission_title, mission_text, image, image_back, expansion, commonname, comment, rarity, Original_missions_id, Original_mission_id, Original_number, Original_hero, Original_mission_title, Original_mission_text, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class missions_nameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "missions_name"
            tableMapping.ColumnMappings.Add("mission_id", "mission_id")
            tableMapping.ColumnMappings.Add("mission_name", "mission_name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""missions_name"" WHERE ((""mission_id"" = :Original_mission_id) A"& _ 
                "ND (""mission_name"" = :Original_mission_name))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""missions_name"" (""mission_id"", ""mission_name"") VALUES (:missio"& _ 
                "n_id, :mission_name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""missions_name"" SET ""mission_id"" = :mission_id, ""mission_name"" = :m"& _ 
                "ission_name WHERE ((""mission_id"" = :Original_mission_id) AND (""mission_name"" = :"& _ 
                "Original_mission_name))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mission_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "mission_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mission_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mission_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT mission_id, mission_name FROM ""main"".missions_name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.missions_nameDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.missions_nameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.missions_nameDataTable = New OPCardsDataSet.missions_nameDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.missions_nameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "missions_name")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_mission_id As Long, ByVal Original_mission_name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_mission_id,Long)
            If (Original_mission_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mission_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_mission_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal mission_id As Long, ByVal mission_name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(mission_id,Long)
            If (mission_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mission_name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(mission_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal mission_id As Long, ByVal mission_name As String, ByVal Original_mission_id As Long, ByVal Original_mission_name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(mission_id,Long)
            If (mission_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mission_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(mission_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_mission_id,Long)
            If (Original_mission_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mission_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_mission_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal mission_name As String, ByVal Original_mission_id As Long, ByVal Original_mission_name As String) As Integer
            Return Me.Update(Original_mission_id, mission_name, Original_mission_id, Original_mission_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class powerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "power"
            tableMapping.ColumnMappings.Add("power_id", "power_id")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("value", "value")
            tableMapping.ColumnMappings.Add("skill", "skill")
            tableMapping.ColumnMappings.Add("opd", "opd")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""power"" WHERE ((""power_id"" = :Original_power_id) AND (""expansi"& _ 
                "on"" = :Original_expansion) AND (""hero"" = :Original_hero) AND (""value"" = :Origina"& _ 
                "l_value) AND (""skill"" = :Original_skill) AND (""opd"" = :Original_opd) AND (""image"& _ 
                """ = :Original_image) AND (""image_back"" = :Original_image_back) AND (""commonname"""& _ 
                " = :Original_commonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarit"& _ 
                "y = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_power_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "power_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""power"" (""power_id"", ""expansion"", ""hero"", ""value"", ""skill"", ""o"& _ 
                "pd"", ""image"", ""image_back"", ""commonname"", ""comment"", ""rarity"") VALUES (:power_id"& _ 
                ", :expansion, :hero, :value, :skill, :opd, :image, :image_back, :commonname, :co"& _ 
                "mment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "power_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "power_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""power"" SET ""power_id"" = :power_id, ""expansion"" = :expansion, ""hero"& _ 
                """ = :hero, ""value"" = :value, ""skill"" = :skill, ""opd"" = :opd, ""image"" = :image, """& _ 
                "image_back"" = :image_back, ""commonname"" = :commonname, ""comment"" = :comment, ""ra"& _ 
                "rity"" = :rarity WHERE ((""power_id"" = :Original_power_id) AND (""expansion"" = :Ori"& _ 
                "ginal_expansion) AND (""hero"" = :Original_hero) AND (""value"" = :Original_value) A"& _ 
                "ND (""skill"" = :Original_skill) AND (""opd"" = :Original_opd) AND (""image"" = :Origi"& _ 
                "nal_image) AND (""image_back"" = :Original_image_back) AND (""commonname"" = :Origin"& _ 
                "al_commonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND "& _ 
                """rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "power_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "power_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_power_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "power_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT power_id, expansion, hero, value, skill, opd, image, image_back, commonnam"& _ 
                "e, comment, rarity FROM ""main"".power"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        power_id, value, skill, opd, image, image_back, expansion, hero, co"& _ 
                "mmonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            power"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (power_id LIKE :p"& _ 
                "ower_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "power_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "power_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.powerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.powerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.powerDataTable = New OPCardsDataSet.powerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.powerDataTable, ByVal power_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (power_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("power_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(power_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal power_id As Object) As OPCardsDataSet.powerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (power_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("power_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(power_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.powerDataTable = New OPCardsDataSet.powerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.powerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "power")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_power_id As Long, ByVal Original_expansion As String, ByVal Original_hero As String, ByVal Original_value As Integer, ByVal Original_skill As String, ByVal Original_opd As Integer, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_power_id,Long)
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_expansion,String)
            End If
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_hero,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_value,Integer)
            If (Original_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_opd,Integer)
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image_back,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal power_id As Long, ByVal expansion As String, ByVal hero As String, ByVal value As Integer, ByVal skill As String, ByVal opd As Integer, ByVal image As String, ByVal image_back As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(power_id,Long)
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(expansion,String)
            End If
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(hero,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(value,Integer)
            If (skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("skill")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(opd,Integer)
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal power_id As Long,  _
                    ByVal expansion As String,  _
                    ByVal hero As String,  _
                    ByVal value As Integer,  _
                    ByVal skill As String,  _
                    ByVal opd As Integer,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_power_id As Long,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_value As Integer,  _
                    ByVal Original_skill As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(power_id,Long)
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(expansion,String)
            End If
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(value,Integer)
            If (skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(opd,Integer)
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_power_id,Long)
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_expansion,String)
            End If
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_value,Integer)
            If (Original_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_opd,Integer)
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_image_back,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal expansion As String,  _
                    ByVal hero As String,  _
                    ByVal value As Integer,  _
                    ByVal skill As String,  _
                    ByVal opd As Integer,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_power_id As Long,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_value As Integer,  _
                    ByVal Original_skill As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_power_id, expansion, hero, value, skill, opd, image, image_back, commonname, comment, rarity, Original_power_id, Original_expansion, Original_hero, Original_value, Original_skill, Original_opd, Original_image, Original_image_back, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rarityTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rarity"
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("value", "value")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""rarity"" WHERE ((""rarity"" = :Original_rarity) AND (""descriptio"& _ 
                "n"" = :Original_description) AND (""value"" = :Original_value))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""rarity"" (""rarity"", ""description"", ""value"") VALUES (:rarity, :"& _ 
                "description, :value)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""rarity"" SET ""rarity"" = :rarity, ""description"" = :description, ""val"& _ 
                "ue"" = :value WHERE ((""rarity"" = :Original_rarity) AND (""description"" = :Original"& _ 
                "_description) AND (""value"" = :Original_value))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_value"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "value"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT rarity, description, value FROM ""main"".rarity"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.rarityDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.rarityDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.rarityDataTable = New OPCardsDataSet.rarityDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.rarityDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "rarity")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_rarity As String, ByVal Original_description As String, ByVal Original_value As Integer) As Integer
            If (Original_rarity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rarity")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_rarity,String)
            End If
            If (Original_description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_description")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_description,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_value,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal rarity As String, ByVal description As String, ByVal value As Integer) As Integer
            If (rarity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rarity")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(rarity,String)
            End If
            If (description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("description")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(description,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(value,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal rarity As String, ByVal description As String, ByVal value As Integer, ByVal Original_rarity As String, ByVal Original_description As String, ByVal Original_value As Integer) As Integer
            If (rarity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rarity")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(rarity,String)
            End If
            If (description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("description")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(value,Integer)
            If (Original_rarity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rarity")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_rarity,String)
            End If
            If (Original_description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_description")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_value,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal description As String, ByVal value As Integer, ByVal Original_rarity As String, ByVal Original_description As String, ByVal Original_value As Integer) As Integer
            Return Me.Update(Original_rarity, description, value, Original_rarity, Original_description, Original_value)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class skillTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "skill"
            tableMapping.ColumnMappings.Add("skill", "skill")
            tableMapping.ColumnMappings.Add("skill_name", "skill_name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""skill"" WHERE ((""skill"" = :Original_skill) AND (""skill_name"" ="& _ 
                " :Original_skill_name))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_skill_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""skill"" (""skill"", ""skill_name"") VALUES (:skill, :skill_name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "skill_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""skill"" SET ""skill"" = :skill, ""skill_name"" = :skill_name WHERE ((""s"& _ 
                "kill"" = :Original_skill) AND (""skill_name"" = :Original_skill_name))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "skill_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_skill_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "skill_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT skill, skill_name FROM ""main"".skill"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.skillDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.skillDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.skillDataTable = New OPCardsDataSet.skillDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.skillDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "skill")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_skill As String, ByVal Original_skill_name As String) As Integer
            If (Original_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_skill,String)
            End If
            If (Original_skill_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_skill_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_skill_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal skill As String, ByVal skill_name As String) As Integer
            If (skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("skill")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(skill,String)
            End If
            If (skill_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("skill_name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(skill_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal skill As String, ByVal skill_name As String, ByVal Original_skill As String, ByVal Original_skill_name As String) As Integer
            If (skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(skill,String)
            End If
            If (skill_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("skill_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(skill_name,String)
            End If
            If (Original_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_skill,String)
            End If
            If (Original_skill_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_skill_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_skill_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal skill_name As String, ByVal Original_skill As String, ByVal Original_skill_name As String) As Integer
            Return Me.Update(Original_skill, skill_name, Original_skill, Original_skill_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class specialsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "specials"
            tableMapping.ColumnMappings.Add("specials_id", "specials_id")
            tableMapping.ColumnMappings.Add("uid", "uid")
            tableMapping.ColumnMappings.Add("name_of_card", "name_of_card")
            tableMapping.ColumnMappings.Add("effect", "effect")
            tableMapping.ColumnMappings.Add("code", "code")
            tableMapping.ColumnMappings.Add("code_variant", "code_variant")
            tableMapping.ColumnMappings.Add("opd", "opd")
            tableMapping.ColumnMappings.Add("venturevalue", "venturevalue")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""specials"" WHERE ((""specials_id"" = :Original_specials_id) AND "& _ 
                "(""uid"" = :Original_uid) AND (""name_of_card"" = :Original_name_of_card) AND (""effe"& _ 
                "ct"" = :Original_effect) AND (""code"" = :Original_code) AND (""code_variant"" = :Ori"& _ 
                "ginal_code_variant) AND (""opd"" = :Original_opd) AND (""venturevalue"" = :Original_"& _ 
                "venturevalue) AND (""image"" = :Original_image) AND (""image_back"" = :Original_imag"& _ 
                "e_back) AND (""expansion"" = :Original_expansion) AND (""commonname"" = :Original_co"& _ 
                "mmonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rari"& _ 
                "ty"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_specials_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "specials_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name_of_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_of_card"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_venturevalue"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "venturevalue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""specials"" (""specials_id"", ""uid"", ""name_of_card"", ""effect"", ""c"& _ 
                "ode"", ""code_variant"", ""opd"", ""venturevalue"", ""image"", ""image_back"", ""expansion"","& _ 
                " ""commonname"", ""comment"", ""rarity"") VALUES (:specials_id, :uid, :name_of_card, :"& _ 
                "effect, :code, :code_variant, :opd, :venturevalue, :image, :image_back, :expansi"& _ 
                "on, :commonname, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "specials_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "specials_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name_of_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_of_card"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "venturevalue"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "venturevalue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""specials"" SET ""specials_id"" = :specials_id, ""uid"" = :uid, ""name_of"& _ 
                "_card"" = :name_of_card, ""effect"" = :effect, ""code"" = :code, ""code_variant"" = :co"& _ 
                "de_variant, ""opd"" = :opd, ""venturevalue"" = :venturevalue, ""image"" = :image, ""ima"& _ 
                "ge_back"" = :image_back, ""expansion"" = :expansion, ""commonname"" = :commonname, ""c"& _ 
                "omment"" = :comment, ""rarity"" = :rarity WHERE ((""specials_id"" = :Original_special"& _ 
                "s_id) AND (""uid"" = :Original_uid) AND (""name_of_card"" = :Original_name_of_card) "& _ 
                "AND (""effect"" = :Original_effect) AND (""code"" = :Original_code) AND (""code_varia"& _ 
                "nt"" = :Original_code_variant) AND (""opd"" = :Original_opd) AND (""venturevalue"" = "& _ 
                ":Original_venturevalue) AND (""image"" = :Original_image) AND (""image_back"" = :Ori"& _ 
                "ginal_image_back) AND (""expansion"" = :Original_expansion) AND (""commonname"" = :O"& _ 
                "riginal_commonname) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1"& _ 
                " AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "specials_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "specials_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name_of_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_of_card"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "venturevalue"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "venturevalue"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_specials_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "specials_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_uid"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "uid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name_of_card"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name_of_card"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_effect"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "effect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_code_variant"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "code_variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_opd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "opd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_venturevalue"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "venturevalue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT specials_id, uid, name_of_card, effect, code, code_variant, opd, ventureva"& _ 
                "lue, image, image_back, expansion, commonname, comment, rarity FROM ""main"".speci"& _ 
                "als"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        specials_id, uid, name_of_card, effect, code, opd, venturevalue, im"& _ 
                "age, image_back, code_variant, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     "& _ 
                "       specials"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (specials_id LIKE :specials_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "specials_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "specials_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.specialsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.specialsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.specialsDataTable = New OPCardsDataSet.specialsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.specialsDataTable, ByVal specials_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (specials_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("specials_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(specials_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal specials_id As Object) As OPCardsDataSet.specialsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (specials_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("specials_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(specials_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.specialsDataTable = New OPCardsDataSet.specialsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.specialsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "specials")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_specials_id As Long, ByVal Original_uid As Integer, ByVal Original_name_of_card As String, ByVal Original_effect As String, ByVal Original_code As String, ByVal Original_code_variant As String, ByVal Original_opd As Integer, ByVal Original_venturevalue As Integer, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_specials_id,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_uid,Integer)
            If (Original_name_of_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name_of_card")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name_of_card,String)
            End If
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_effect,String)
            End If
            If (Original_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_code,String)
            End If
            If (Original_code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code_variant")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_code_variant,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_opd,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_venturevalue,Integer)
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal specials_id As Long, ByVal uid As Integer, ByVal name_of_card As String, ByVal effect As String, ByVal code As String, ByVal code_variant As String, ByVal opd As Integer, ByVal venturevalue As Integer, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(specials_id,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(uid,Integer)
            If (name_of_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name_of_card")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name_of_card,String)
            End If
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(effect,String)
            End If
            If (code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(code,String)
            End If
            If (code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code_variant")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(code_variant,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(opd,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(venturevalue,Integer)
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal specials_id As Long,  _
                    ByVal uid As Integer,  _
                    ByVal name_of_card As String,  _
                    ByVal effect As String,  _
                    ByVal code As String,  _
                    ByVal code_variant As String,  _
                    ByVal opd As Integer,  _
                    ByVal venturevalue As Integer,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_specials_id As Long,  _
                    ByVal Original_uid As Integer,  _
                    ByVal Original_name_of_card As String,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_code As String,  _
                    ByVal Original_code_variant As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_venturevalue As Integer,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(specials_id,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(uid,Integer)
            If (name_of_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name_of_card")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name_of_card,String)
            End If
            If (effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(effect,String)
            End If
            If (code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(code,String)
            End If
            If (code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("code_variant")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(code_variant,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(opd,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(venturevalue,Integer)
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_specials_id,Long)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_uid,Integer)
            If (Original_name_of_card Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name_of_card")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_name_of_card,String)
            End If
            If (Original_effect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_effect")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_effect,String)
            End If
            If (Original_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_code,String)
            End If
            If (Original_code_variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_code_variant")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_code_variant,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_opd,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_venturevalue,Integer)
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal uid As Integer,  _
                    ByVal name_of_card As String,  _
                    ByVal effect As String,  _
                    ByVal code As String,  _
                    ByVal code_variant As String,  _
                    ByVal opd As Integer,  _
                    ByVal venturevalue As Integer,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_specials_id As Long,  _
                    ByVal Original_uid As Integer,  _
                    ByVal Original_name_of_card As String,  _
                    ByVal Original_effect As String,  _
                    ByVal Original_code As String,  _
                    ByVal Original_code_variant As String,  _
                    ByVal Original_opd As Integer,  _
                    ByVal Original_venturevalue As Integer,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_specials_id, uid, name_of_card, effect, code, code_variant, opd, venturevalue, image, image_back, expansion, commonname, comment, rarity, Original_specials_id, Original_uid, Original_name_of_card, Original_effect, Original_code, Original_code_variant, Original_opd, Original_venturevalue, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class teamworkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "teamwork"
            tableMapping.ColumnMappings.Add("teamwork_id", "teamwork_id")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("touse_power", "touse_power")
            tableMapping.ColumnMappings.Add("touse_skill", "touse_skill")
            tableMapping.ColumnMappings.Add("actas_power", "actas_power")
            tableMapping.ColumnMappings.Add("actas_skill", "actas_skill")
            tableMapping.ColumnMappings.Add("teammate1_bonus", "teammate1_bonus")
            tableMapping.ColumnMappings.Add("teammate1_skill", "teammate1_skill")
            tableMapping.ColumnMappings.Add("teammate2_bonus", "teammate2_bonus")
            tableMapping.ColumnMappings.Add("teammate2_skill", "teammate2_skill")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""teamwork"" WHERE ((""teamwork_id"" = :Original_teamwork_id) AND "& _ 
                "(""hero"" = :Original_hero) AND (""touse_power"" = :Original_touse_power) AND (""tous"& _ 
                "e_skill"" = :Original_touse_skill) AND (""actas_power"" = :Original_actas_power) AN"& _ 
                "D (""actas_skill"" = :Original_actas_skill) AND (""teammate1_bonus"" = :Original_tea"& _ 
                "mmate1_bonus) AND (""teammate1_skill"" = :Original_teammate1_skill) AND (""teammate"& _ 
                "2_bonus"" = :Original_teammate2_bonus) AND (""teammate2_skill"" = :Original_teammat"& _ 
                "e2_skill) AND (""image"" = :Original_image) AND (""image_back"" = :Original_image_ba"& _ 
                "ck) AND (""expansion"" = :Original_expansion) AND (""commonname"" = :Original_common"& _ 
                "name) AND (""comment"" = :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" "& _ 
                "IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teamwork_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "teamwork_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate1_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate1_bonus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate1_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate2_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate2_bonus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate2_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""teamwork"" (""teamwork_id"", ""hero"", ""touse_power"", ""touse_skill"& _ 
                """, ""actas_power"", ""actas_skill"", ""teammate1_bonus"", ""teammate1_skill"", ""teammate"& _ 
                "2_bonus"", ""teammate2_skill"", ""image"", ""image_back"", ""expansion"", ""commonname"", """& _ 
                "comment"", ""rarity"") VALUES (:teamwork_id, :hero, :touse_power, :touse_skill, :ac"& _ 
                "tas_power, :actas_skill, :teammate1_bonus, :teammate1_skill, :teammate2_bonus, :"& _ 
                "teammate2_skill, :image, :image_back, :expansion, :commonname, :comment, :rarity"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teamwork_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "teamwork_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate1_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate1_bonus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate1_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate2_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate2_bonus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate2_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""teamwork"" SET ""teamwork_id"" = :teamwork_id, ""hero"" = :hero, ""touse"& _ 
                "_power"" = :touse_power, ""touse_skill"" = :touse_skill, ""actas_power"" = :actas_pow"& _ 
                "er, ""actas_skill"" = :actas_skill, ""teammate1_bonus"" = :teammate1_bonus, ""teammat"& _ 
                "e1_skill"" = :teammate1_skill, ""teammate2_bonus"" = :teammate2_bonus, ""teammate2_s"& _ 
                "kill"" = :teammate2_skill, ""image"" = :image, ""image_back"" = :image_back, ""expansi"& _ 
                "on"" = :expansion, ""commonname"" = :commonname, ""comment"" = :comment, ""rarity"" = :"& _ 
                "rarity WHERE ((""teamwork_id"" = :Original_teamwork_id) AND (""hero"" = :Original_he"& _ 
                "ro) AND (""touse_power"" = :Original_touse_power) AND (""touse_skill"" = :Original_t"& _ 
                "ouse_skill) AND (""actas_power"" = :Original_actas_power) AND (""actas_skill"" = :Or"& _ 
                "iginal_actas_skill) AND (""teammate1_bonus"" = :Original_teammate1_bonus) AND (""te"& _ 
                "ammate1_skill"" = :Original_teammate1_skill) AND (""teammate2_bonus"" = :Original_t"& _ 
                "eammate2_bonus) AND (""teammate2_skill"" = :Original_teammate2_skill) AND (""image"""& _ 
                " = :Original_image) AND (""image_back"" = :Original_image_back) AND (""expansion"" ="& _ 
                " :Original_expansion) AND (""commonname"" = :Original_commonname) AND (""comment"" ="& _ 
                " :Original_comment) AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" "& _ 
                "= :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teamwork_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "teamwork_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate1_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate1_bonus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate1_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate2_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate2_bonus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teammate2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate2_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teamwork_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "teamwork_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "touse_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_touse_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "touse_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "actas_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_actas_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "actas_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate1_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate1_bonus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate1_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate2_bonus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "teammate2_bonus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_teammate2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "teammate2_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT teamwork_id, hero, touse_power, touse_skill, actas_power, actas_skill, tea"& _ 
                "mmate1_bonus, teammate1_skill, teammate2_bonus, teammate2_skill, image, image_ba"& _ 
                "ck, expansion, commonname, comment, rarity FROM ""main"".teamwork"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        teamwork_id, touse_power, touse_skill, actas_power, actas_skill, te"& _ 
                "ammate1_bonus, teammate1_skill, teammate2_bonus, teammate2_skill, image, image_b"& _ 
                "ack, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         hero, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            teamwork"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (teamwork_id LIKE :teamwork_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "teamwork_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "teamwork_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.teamworkDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.teamworkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.teamworkDataTable = New OPCardsDataSet.teamworkDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.teamworkDataTable, ByVal teamwork_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (teamwork_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teamwork_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(teamwork_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal teamwork_id As Object) As OPCardsDataSet.teamworkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (teamwork_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teamwork_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(teamwork_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.teamworkDataTable = New OPCardsDataSet.teamworkDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.teamworkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "teamwork")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_teamwork_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_actas_power As Integer,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_teammate1_bonus As Integer,  _
                    ByVal Original_teammate1_skill As String,  _
                    ByVal Original_teammate2_bonus As Integer,  _
                    ByVal Original_teammate2_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_teamwork_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_hero,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_actas_power,Integer)
            If (Original_actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_actas_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_actas_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_teammate1_bonus,Integer)
            If (Original_teammate1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate1_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_teammate1_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_teammate2_bonus,Integer)
            If (Original_teammate2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate2_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_teammate2_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal teamwork_id As Long,  _
                    ByVal hero As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal actas_power As Integer,  _
                    ByVal actas_skill As String,  _
                    ByVal teammate1_bonus As Integer,  _
                    ByVal teammate1_skill As String,  _
                    ByVal teammate2_bonus As Integer,  _
                    ByVal teammate2_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(teamwork_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(hero,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(touse_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(actas_power,Integer)
            If (actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actas_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(actas_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(teammate1_bonus,Integer)
            If (teammate1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate1_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(teammate1_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(teammate2_bonus,Integer)
            If (teammate2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate2_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(teammate2_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal teamwork_id As Long,  _
                    ByVal hero As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal actas_power As Integer,  _
                    ByVal actas_skill As String,  _
                    ByVal teammate1_bonus As Integer,  _
                    ByVal teammate1_skill As String,  _
                    ByVal teammate2_bonus As Integer,  _
                    ByVal teammate2_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_teamwork_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_actas_power As Integer,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_teammate1_bonus As Integer,  _
                    ByVal Original_teammate1_skill As String,  _
                    ByVal Original_teammate2_bonus As Integer,  _
                    ByVal Original_teammate2_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(teamwork_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(touse_power,Integer)
            If (touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(actas_power,Integer)
            If (actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actas_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(actas_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(teammate1_bonus,Integer)
            If (teammate1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate1_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(teammate1_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(teammate2_bonus,Integer)
            If (teammate2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("teammate2_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(teammate2_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_teamwork_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_touse_power,Integer)
            If (Original_touse_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_touse_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_touse_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_actas_power,Integer)
            If (Original_actas_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_actas_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_actas_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_teammate1_bonus,Integer)
            If (Original_teammate1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate1_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_teammate1_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_teammate2_bonus,Integer)
            If (Original_teammate2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_teammate2_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_teammate2_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal hero As String,  _
                    ByVal touse_power As Integer,  _
                    ByVal touse_skill As String,  _
                    ByVal actas_power As Integer,  _
                    ByVal actas_skill As String,  _
                    ByVal teammate1_bonus As Integer,  _
                    ByVal teammate1_skill As String,  _
                    ByVal teammate2_bonus As Integer,  _
                    ByVal teammate2_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_teamwork_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_touse_power As Integer,  _
                    ByVal Original_touse_skill As String,  _
                    ByVal Original_actas_power As Integer,  _
                    ByVal Original_actas_skill As String,  _
                    ByVal Original_teammate1_bonus As Integer,  _
                    ByVal Original_teammate1_skill As String,  _
                    ByVal Original_teammate2_bonus As Integer,  _
                    ByVal Original_teammate2_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_teamwork_id, hero, touse_power, touse_skill, actas_power, actas_skill, teammate1_bonus, teammate1_skill, teammate2_bonus, teammate2_skill, image, image_back, expansion, commonname, comment, rarity, Original_teamwork_id, Original_hero, Original_touse_power, Original_touse_skill, Original_actas_power, Original_actas_skill, Original_teammate1_bonus, Original_teammate1_skill, Original_teammate2_bonus, Original_teammate2_skill, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trainingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "training"
            tableMapping.ColumnMappings.Add("training_id", "training_id")
            tableMapping.ColumnMappings.Add("hero", "hero")
            tableMapping.ColumnMappings.Add("bonus1_power", "bonus1_power")
            tableMapping.ColumnMappings.Add("bonus1_skill", "bonus1_skill")
            tableMapping.ColumnMappings.Add("bonus2_power", "bonus2_power")
            tableMapping.ColumnMappings.Add("bonus2_skill", "bonus2_skill")
            tableMapping.ColumnMappings.Add("image", "image")
            tableMapping.ColumnMappings.Add("image_back", "image_back")
            tableMapping.ColumnMappings.Add("expansion", "expansion")
            tableMapping.ColumnMappings.Add("commonname", "commonname")
            tableMapping.ColumnMappings.Add("comment", "comment")
            tableMapping.ColumnMappings.Add("rarity", "rarity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""training"" WHERE ((""training_id"" = :Original_training_id) AND "& _ 
                "(""hero"" = :Original_hero) AND (""bonus1_power"" = :Original_bonus1_power) AND (""bo"& _ 
                "nus1_skill"" = :Original_bonus1_skill) AND (""bonus2_power"" = :Original_bonus2_pow"& _ 
                "er) AND (""bonus2_skill"" = :Original_bonus2_skill) AND (""image"" = :Original_image"& _ 
                ") AND (""image_back"" = :Original_image_back) AND (""expansion"" = :Original_expansi"& _ 
                "on) AND (""commonname"" = :Original_commonname) AND (""comment"" = :Original_comment"& _ 
                ") AND ((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity"& _ 
                ")))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_training_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "training_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus1_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus1_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus1_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus2_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus2_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus2_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""training"" (""training_id"", ""hero"", ""bonus1_power"", ""bonus1_ski"& _ 
                "ll"", ""bonus2_power"", ""bonus2_skill"", ""image"", ""image_back"", ""expansion"", ""common"& _ 
                "name"", ""comment"", ""rarity"") VALUES (:training_id, :hero, :bonus1_power, :bonus1_"& _ 
                "skill, :bonus2_power, :bonus2_skill, :image, :image_back, :expansion, :commonnam"& _ 
                "e, :comment, :rarity)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "training_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "training_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus1_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus1_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus1_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus2_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus2_power"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus2_skill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""training"" SET ""training_id"" = :training_id, ""hero"" = :hero, ""bonus"& _ 
                "1_power"" = :bonus1_power, ""bonus1_skill"" = :bonus1_skill, ""bonus2_power"" = :bonu"& _ 
                "s2_power, ""bonus2_skill"" = :bonus2_skill, ""image"" = :image, ""image_back"" = :imag"& _ 
                "e_back, ""expansion"" = :expansion, ""commonname"" = :commonname, ""comment"" = :comme"& _ 
                "nt, ""rarity"" = :rarity WHERE ((""training_id"" = :Original_training_id) AND (""hero"& _ 
                """ = :Original_hero) AND (""bonus1_power"" = :Original_bonus1_power) AND (""bonus1_s"& _ 
                "kill"" = :Original_bonus1_skill) AND (""bonus2_power"" = :Original_bonus2_power) AN"& _ 
                "D (""bonus2_skill"" = :Original_bonus2_skill) AND (""image"" = :Original_image) AND "& _ 
                "(""image_back"" = :Original_image_back) AND (""expansion"" = :Original_expansion) AN"& _ 
                "D (""commonname"" = :Original_commonname) AND (""comment"" = :Original_comment) AND "& _ 
                "((:IsNull_rarity = 1 AND ""rarity"" IS NULL) OR (""rarity"" = :Original_rarity)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "training_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "training_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus1_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus1_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus1_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus2_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus2_power"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "bonus2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus2_skill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_training_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "training_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_hero"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "hero"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus1_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus1_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus1_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus1_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus2_power"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "bonus2_power"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_bonus2_skill"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "bonus2_skill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_image_back"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "image_back"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_expansion"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "expansion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_commonname"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "commonname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_rarity"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_rarity"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "rarity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.OverPower.My.MySettings.Default.OPCardsDataSetConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT training_id, hero, bonus1_power, bonus1_skill, bonus2_power, bonus2_skill,"& _ 
                " image, image_back, expansion, commonname, comment, rarity FROM ""main"".training"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        training_id, bonus1_power, bonus1_skill, bonus2_power, bonus2_skill"& _ 
                ", image, image_back, hero, expansion, commonname, comment, rarity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "   training"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (training_id LIKE :training_id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "training_id"
            param.DbType = Global.System.Data.DbType.[Object]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "training_id"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OPCardsDataSet.trainingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OPCardsDataSet.trainingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OPCardsDataSet.trainingDataTable = New OPCardsDataSet.trainingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As OPCardsDataSet.trainingDataTable, ByVal training_id As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (training_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("training_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(training_id,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal training_id As Object) As OPCardsDataSet.trainingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (training_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("training_id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(training_id,Object)
            End If
            Dim dataTable As OPCardsDataSet.trainingDataTable = New OPCardsDataSet.trainingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As OPCardsDataSet.trainingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As OPCardsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "training")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_training_id As Long, ByVal Original_hero As String, ByVal Original_bonus1_power As Integer, ByVal Original_bonus1_skill As String, ByVal Original_bonus2_power As Integer, ByVal Original_bonus2_skill As String, ByVal Original_image As String, ByVal Original_image_back As String, ByVal Original_expansion As String, ByVal Original_commonname As String, ByVal Original_comment As String, ByVal Original_rarity As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_training_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_hero,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_bonus1_power,Integer)
            If (Original_bonus1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bonus1_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_bonus1_skill,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_bonus2_power,Integer)
            If (Original_bonus2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bonus2_skill")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_bonus2_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal training_id As Long, ByVal hero As String, ByVal bonus1_power As Integer, ByVal bonus1_skill As String, ByVal bonus2_power As Integer, ByVal bonus2_skill As String, ByVal image As String, ByVal image_back As String, ByVal expansion As String, ByVal commonname As String, ByVal comment As String, ByVal rarity As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(training_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(hero,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(bonus1_power,Integer)
            If (bonus1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bonus1_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(bonus1_skill,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(bonus2_power,Integer)
            If (bonus2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bonus2_skill")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(bonus2_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal training_id As Long,  _
                    ByVal hero As String,  _
                    ByVal bonus1_power As Integer,  _
                    ByVal bonus1_skill As String,  _
                    ByVal bonus2_power As Integer,  _
                    ByVal bonus2_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_training_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_bonus1_power As Integer,  _
                    ByVal Original_bonus1_skill As String,  _
                    ByVal Original_bonus2_power As Integer,  _
                    ByVal Original_bonus2_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(training_id,Long)
            If (hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(bonus1_power,Integer)
            If (bonus1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bonus1_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(bonus1_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(bonus2_power,Integer)
            If (bonus2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bonus2_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(bonus2_skill,String)
            End If
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(image,String)
            End If
            If (image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(image_back,String)
            End If
            If (expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(expansion,String)
            End If
            If (commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(commonname,String)
            End If
            If (comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(comment,String)
            End If
            If (rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(rarity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_training_id,Long)
            If (Original_hero Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hero")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_hero,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_bonus1_power,Integer)
            If (Original_bonus1_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bonus1_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_bonus1_skill,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_bonus2_power,Integer)
            If (Original_bonus2_skill Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bonus2_skill")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_bonus2_skill,String)
            End If
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_image,String)
            End If
            If (Original_image_back Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image_back")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_image_back,String)
            End If
            If (Original_expansion Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_expansion")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_expansion,String)
            End If
            If (Original_commonname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_commonname")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_commonname,String)
            End If
            If (Original_comment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_comment")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_comment,String)
            End If
            If (Original_rarity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_rarity,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal hero As String,  _
                    ByVal bonus1_power As Integer,  _
                    ByVal bonus1_skill As String,  _
                    ByVal bonus2_power As Integer,  _
                    ByVal bonus2_skill As String,  _
                    ByVal image As String,  _
                    ByVal image_back As String,  _
                    ByVal expansion As String,  _
                    ByVal commonname As String,  _
                    ByVal comment As String,  _
                    ByVal rarity As String,  _
                    ByVal Original_training_id As Long,  _
                    ByVal Original_hero As String,  _
                    ByVal Original_bonus1_power As Integer,  _
                    ByVal Original_bonus1_skill As String,  _
                    ByVal Original_bonus2_power As Integer,  _
                    ByVal Original_bonus2_skill As String,  _
                    ByVal Original_image As String,  _
                    ByVal Original_image_back As String,  _
                    ByVal Original_expansion As String,  _
                    ByVal Original_commonname As String,  _
                    ByVal Original_comment As String,  _
                    ByVal Original_rarity As String) As Integer
            Return Me.Update(Original_training_id, hero, bonus1_power, bonus1_skill, bonus2_power, bonus2_skill, image, image_back, expansion, commonname, comment, rarity, Original_training_id, Original_hero, Original_bonus1_power, Original_bonus1_skill, Original_bonus2_power, Original_bonus2_skill, Original_image, Original_image_back, Original_expansion, Original_commonname, Original_comment, Original_rarity)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _allyTableAdapter As allyTableAdapter
        
        Private _artifactTableAdapter As artifactTableAdapter
        
        Private _aspectTableAdapter As aspectTableAdapter
        
        Private _basic_universeTableAdapter As basic_universeTableAdapter
        
        Private _charactersTableAdapter As charactersTableAdapter
        
        Private _characters_nameTableAdapter As characters_nameTableAdapter
        
        Private _characters_specialsTableAdapter As characters_specialsTableAdapter
        
        Private _characters_specials_singleTableAdapter As characters_specials_singleTableAdapter
        
        Private _code_variantTableAdapter As code_variantTableAdapter
        
        Private _dccodeTableAdapter As dccodeTableAdapter
        
        Private _doubleshotTableAdapter As doubleshotTableAdapter
        
        Private _eventTableAdapter As eventTableAdapter
        
        Private _expansionTableAdapter As expansionTableAdapter
        
        Private _homebasesTableAdapter As homebasesTableAdapter
        
        Private _homebases_charactersTableAdapter As homebases_charactersTableAdapter
        
        Private _homebases_nameTableAdapter As homebases_nameTableAdapter
        
        Private _missionsTableAdapter As missionsTableAdapter
        
        Private _missions_nameTableAdapter As missions_nameTableAdapter
        
        Private _powerTableAdapter As powerTableAdapter
        
        Private _rarityTableAdapter As rarityTableAdapter
        
        Private _skillTableAdapter As skillTableAdapter
        
        Private _specialsTableAdapter As specialsTableAdapter
        
        Private _teamworkTableAdapter As teamworkTableAdapter
        
        Private _trainingTableAdapter As trainingTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property allyTableAdapter() As allyTableAdapter
            Get
                Return Me._allyTableAdapter
            End Get
            Set
                Me._allyTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property artifactTableAdapter() As artifactTableAdapter
            Get
                Return Me._artifactTableAdapter
            End Get
            Set
                Me._artifactTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property aspectTableAdapter() As aspectTableAdapter
            Get
                Return Me._aspectTableAdapter
            End Get
            Set
                Me._aspectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property basic_universeTableAdapter() As basic_universeTableAdapter
            Get
                Return Me._basic_universeTableAdapter
            End Get
            Set
                Me._basic_universeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property charactersTableAdapter() As charactersTableAdapter
            Get
                Return Me._charactersTableAdapter
            End Get
            Set
                Me._charactersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property characters_nameTableAdapter() As characters_nameTableAdapter
            Get
                Return Me._characters_nameTableAdapter
            End Get
            Set
                Me._characters_nameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property characters_specialsTableAdapter() As characters_specialsTableAdapter
            Get
                Return Me._characters_specialsTableAdapter
            End Get
            Set
                Me._characters_specialsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property characters_specials_singleTableAdapter() As characters_specials_singleTableAdapter
            Get
                Return Me._characters_specials_singleTableAdapter
            End Get
            Set
                Me._characters_specials_singleTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property code_variantTableAdapter() As code_variantTableAdapter
            Get
                Return Me._code_variantTableAdapter
            End Get
            Set
                Me._code_variantTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dccodeTableAdapter() As dccodeTableAdapter
            Get
                Return Me._dccodeTableAdapter
            End Get
            Set
                Me._dccodeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property doubleshotTableAdapter() As doubleshotTableAdapter
            Get
                Return Me._doubleshotTableAdapter
            End Get
            Set
                Me._doubleshotTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property eventTableAdapter() As eventTableAdapter
            Get
                Return Me._eventTableAdapter
            End Get
            Set
                Me._eventTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property expansionTableAdapter() As expansionTableAdapter
            Get
                Return Me._expansionTableAdapter
            End Get
            Set
                Me._expansionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property homebasesTableAdapter() As homebasesTableAdapter
            Get
                Return Me._homebasesTableAdapter
            End Get
            Set
                Me._homebasesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property homebases_charactersTableAdapter() As homebases_charactersTableAdapter
            Get
                Return Me._homebases_charactersTableAdapter
            End Get
            Set
                Me._homebases_charactersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property homebases_nameTableAdapter() As homebases_nameTableAdapter
            Get
                Return Me._homebases_nameTableAdapter
            End Get
            Set
                Me._homebases_nameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property missionsTableAdapter() As missionsTableAdapter
            Get
                Return Me._missionsTableAdapter
            End Get
            Set
                Me._missionsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property missions_nameTableAdapter() As missions_nameTableAdapter
            Get
                Return Me._missions_nameTableAdapter
            End Get
            Set
                Me._missions_nameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property powerTableAdapter() As powerTableAdapter
            Get
                Return Me._powerTableAdapter
            End Get
            Set
                Me._powerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property rarityTableAdapter() As rarityTableAdapter
            Get
                Return Me._rarityTableAdapter
            End Get
            Set
                Me._rarityTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property skillTableAdapter() As skillTableAdapter
            Get
                Return Me._skillTableAdapter
            End Get
            Set
                Me._skillTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property specialsTableAdapter() As specialsTableAdapter
            Get
                Return Me._specialsTableAdapter
            End Get
            Set
                Me._specialsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property teamworkTableAdapter() As teamworkTableAdapter
            Get
                Return Me._teamworkTableAdapter
            End Get
            Set
                Me._teamworkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trainingTableAdapter() As trainingTableAdapter
            Get
                Return Me._trainingTableAdapter
            End Get
            Set
                Me._trainingTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._allyTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._allyTableAdapter.Connection) Is Nothing)) Then
                    Return Me._allyTableAdapter.Connection
                End If
                If ((Not (Me._artifactTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._artifactTableAdapter.Connection) Is Nothing)) Then
                    Return Me._artifactTableAdapter.Connection
                End If
                If ((Not (Me._aspectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aspectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aspectTableAdapter.Connection
                End If
                If ((Not (Me._basic_universeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._basic_universeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._basic_universeTableAdapter.Connection
                End If
                If ((Not (Me._charactersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._charactersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._charactersTableAdapter.Connection
                End If
                If ((Not (Me._characters_nameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._characters_nameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._characters_nameTableAdapter.Connection
                End If
                If ((Not (Me._characters_specialsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._characters_specialsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._characters_specialsTableAdapter.Connection
                End If
                If ((Not (Me._characters_specials_singleTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._characters_specials_singleTableAdapter.Connection) Is Nothing)) Then
                    Return Me._characters_specials_singleTableAdapter.Connection
                End If
                If ((Not (Me._code_variantTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._code_variantTableAdapter.Connection) Is Nothing)) Then
                    Return Me._code_variantTableAdapter.Connection
                End If
                If ((Not (Me._dccodeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dccodeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dccodeTableAdapter.Connection
                End If
                If ((Not (Me._doubleshotTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._doubleshotTableAdapter.Connection) Is Nothing)) Then
                    Return Me._doubleshotTableAdapter.Connection
                End If
                If ((Not (Me._eventTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eventTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eventTableAdapter.Connection
                End If
                If ((Not (Me._expansionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._expansionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._expansionTableAdapter.Connection
                End If
                If ((Not (Me._homebasesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._homebasesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._homebasesTableAdapter.Connection
                End If
                If ((Not (Me._homebases_charactersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._homebases_charactersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._homebases_charactersTableAdapter.Connection
                End If
                If ((Not (Me._homebases_nameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._homebases_nameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._homebases_nameTableAdapter.Connection
                End If
                If ((Not (Me._missionsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._missionsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._missionsTableAdapter.Connection
                End If
                If ((Not (Me._missions_nameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._missions_nameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._missions_nameTableAdapter.Connection
                End If
                If ((Not (Me._powerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._powerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._powerTableAdapter.Connection
                End If
                If ((Not (Me._rarityTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rarityTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rarityTableAdapter.Connection
                End If
                If ((Not (Me._skillTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._skillTableAdapter.Connection) Is Nothing)) Then
                    Return Me._skillTableAdapter.Connection
                End If
                If ((Not (Me._specialsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._specialsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._specialsTableAdapter.Connection
                End If
                If ((Not (Me._teamworkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._teamworkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._teamworkTableAdapter.Connection
                End If
                If ((Not (Me._trainingTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trainingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trainingTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._allyTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._artifactTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aspectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._basic_universeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._charactersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._characters_nameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._characters_specialsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._characters_specials_singleTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._code_variantTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dccodeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._doubleshotTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._expansionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._homebasesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._homebases_charactersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._homebases_nameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._missionsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._missions_nameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._powerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rarityTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._skillTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._specialsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._teamworkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trainingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As OPCardsDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._homebases_nameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.homebases_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._homebases_nameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._missionsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.missions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._missionsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._missions_nameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.missions_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._missions_nameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._expansionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.expansion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._expansionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._homebasesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.homebases.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._homebasesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._homebases_charactersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.homebases_characters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._homebases_charactersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._specialsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.specials.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._specialsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._teamworkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.teamwork.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._teamworkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trainingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.training.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trainingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._powerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.power.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._powerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rarityTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.rarity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rarityTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._skillTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.skill.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._skillTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._basic_universeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.basic_universe.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._basic_universeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._charactersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.characters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._charactersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._characters_nameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.characters_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._characters_nameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._allyTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ally.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._allyTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._artifactTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.artifact.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._artifactTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aspectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.aspect.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aspectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dccodeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dccode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dccodeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._doubleshotTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.doubleshot.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._doubleshotTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._characters_specialsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.characters_specials.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._characters_specialsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._characters_specials_singleTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.characters_specials_single.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._characters_specials_singleTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._code_variantTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.code_variant.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._code_variantTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As OPCardsDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._homebases_nameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.homebases_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._homebases_nameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._missionsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.missions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._missionsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._missions_nameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.missions_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._missions_nameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._expansionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.expansion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._expansionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._homebasesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.homebases.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._homebasesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._homebases_charactersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.homebases_characters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._homebases_charactersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._specialsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.specials.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._specialsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._teamworkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.teamwork.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._teamworkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trainingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.training.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trainingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._powerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.power.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._powerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rarityTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.rarity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rarityTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._skillTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.skill.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._skillTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._basic_universeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.basic_universe.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._basic_universeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._charactersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.characters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._charactersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._characters_nameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.characters_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._characters_nameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._allyTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ally.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._allyTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._artifactTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.artifact.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._artifactTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aspectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.aspect.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aspectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dccodeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dccode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dccodeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._doubleshotTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.doubleshot.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._doubleshotTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._characters_specialsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.characters_specials.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._characters_specialsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._characters_specials_singleTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.characters_specials_single.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._characters_specials_singleTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._code_variantTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.code_variant.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._code_variantTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As OPCardsDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._code_variantTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.code_variant.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._code_variantTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._characters_specials_singleTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.characters_specials_single.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._characters_specials_singleTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._characters_specialsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.characters_specials.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._characters_specialsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._doubleshotTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.doubleshot.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._doubleshotTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dccodeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dccode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dccodeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aspectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.aspect.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aspectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._artifactTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.artifact.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._artifactTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._allyTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ally.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._allyTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._characters_nameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.characters_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._characters_nameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._charactersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.characters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._charactersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._basic_universeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.basic_universe.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._basic_universeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._skillTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.skill.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._skillTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rarityTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.rarity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rarityTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._powerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.power.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._powerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trainingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.training.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trainingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._teamworkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.teamwork.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._teamworkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._specialsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.specials.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._specialsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._homebases_charactersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.homebases_characters.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._homebases_charactersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._homebasesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.homebases.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._homebasesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._expansionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.expansion.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._expansionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._missions_nameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.missions_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._missions_nameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._missionsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.missions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._missionsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._homebases_nameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.homebases_name.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._homebases_nameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As OPCardsDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._allyTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._allyTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._artifactTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._artifactTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aspectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aspectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._basic_universeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._basic_universeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._charactersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._charactersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._characters_nameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._characters_nameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._characters_specialsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._characters_specialsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._characters_specials_singleTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._characters_specials_singleTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._code_variantTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._code_variantTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dccodeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dccodeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._doubleshotTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._doubleshotTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eventTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eventTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._expansionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._expansionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._homebasesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._homebasesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._homebases_charactersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._homebases_charactersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._homebases_nameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._homebases_nameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._missionsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._missionsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._missions_nameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._missions_nameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._powerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._powerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rarityTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rarityTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._skillTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._skillTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._specialsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._specialsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._teamworkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._teamworkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trainingTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trainingTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._allyTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._allyTableAdapter, Me._allyTableAdapter.Connection)
                    Me._allyTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._allyTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._allyTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._allyTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._allyTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._artifactTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._artifactTableAdapter, Me._artifactTableAdapter.Connection)
                    Me._artifactTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._artifactTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._artifactTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._artifactTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._artifactTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aspectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aspectTableAdapter, Me._aspectTableAdapter.Connection)
                    Me._aspectTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._aspectTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._aspectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aspectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aspectTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._basic_universeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._basic_universeTableAdapter, Me._basic_universeTableAdapter.Connection)
                    Me._basic_universeTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._basic_universeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._basic_universeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._basic_universeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._basic_universeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._charactersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._charactersTableAdapter, Me._charactersTableAdapter.Connection)
                    Me._charactersTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._charactersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._charactersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._charactersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._charactersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._characters_nameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._characters_nameTableAdapter, Me._characters_nameTableAdapter.Connection)
                    Me._characters_nameTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._characters_nameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._characters_nameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._characters_nameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._characters_nameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._characters_specialsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._characters_specialsTableAdapter, Me._characters_specialsTableAdapter.Connection)
                    Me._characters_specialsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._characters_specialsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._characters_specialsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._characters_specialsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._characters_specialsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._characters_specials_singleTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._characters_specials_singleTableAdapter, Me._characters_specials_singleTableAdapter.Connection)
                    Me._characters_specials_singleTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._characters_specials_singleTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._characters_specials_singleTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._characters_specials_singleTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._characters_specials_singleTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._code_variantTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._code_variantTableAdapter, Me._code_variantTableAdapter.Connection)
                    Me._code_variantTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._code_variantTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._code_variantTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._code_variantTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._code_variantTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dccodeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dccodeTableAdapter, Me._dccodeTableAdapter.Connection)
                    Me._dccodeTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dccodeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dccodeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dccodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dccodeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._doubleshotTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._doubleshotTableAdapter, Me._doubleshotTableAdapter.Connection)
                    Me._doubleshotTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._doubleshotTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._doubleshotTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._doubleshotTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._doubleshotTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eventTableAdapter, Me._eventTableAdapter.Connection)
                    Me._eventTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._eventTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._eventTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eventTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eventTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._expansionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._expansionTableAdapter, Me._expansionTableAdapter.Connection)
                    Me._expansionTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._expansionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._expansionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._expansionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._expansionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._homebasesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._homebasesTableAdapter, Me._homebasesTableAdapter.Connection)
                    Me._homebasesTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._homebasesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._homebasesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._homebasesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._homebasesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._homebases_charactersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._homebases_charactersTableAdapter, Me._homebases_charactersTableAdapter.Connection)
                    Me._homebases_charactersTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._homebases_charactersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._homebases_charactersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._homebases_charactersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._homebases_charactersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._homebases_nameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._homebases_nameTableAdapter, Me._homebases_nameTableAdapter.Connection)
                    Me._homebases_nameTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._homebases_nameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._homebases_nameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._homebases_nameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._homebases_nameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._missionsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._missionsTableAdapter, Me._missionsTableAdapter.Connection)
                    Me._missionsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._missionsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._missionsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._missionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._missionsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._missions_nameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._missions_nameTableAdapter, Me._missions_nameTableAdapter.Connection)
                    Me._missions_nameTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._missions_nameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._missions_nameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._missions_nameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._missions_nameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._powerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._powerTableAdapter, Me._powerTableAdapter.Connection)
                    Me._powerTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._powerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._powerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._powerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._powerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rarityTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rarityTableAdapter, Me._rarityTableAdapter.Connection)
                    Me._rarityTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._rarityTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._rarityTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rarityTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rarityTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._skillTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._skillTableAdapter, Me._skillTableAdapter.Connection)
                    Me._skillTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._skillTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._skillTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._skillTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._skillTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._specialsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._specialsTableAdapter, Me._specialsTableAdapter.Connection)
                    Me._specialsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._specialsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._specialsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._specialsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._specialsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._teamworkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._teamworkTableAdapter, Me._teamworkTableAdapter.Connection)
                    Me._teamworkTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._teamworkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._teamworkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._teamworkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._teamworkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trainingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trainingTableAdapter, Me._trainingTableAdapter.Connection)
                    Me._trainingTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._trainingTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._trainingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trainingTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trainingTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._allyTableAdapter) Is Nothing) Then
                    Me._allyTableAdapter.Connection = CType(revertConnections(Me._allyTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._allyTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._artifactTableAdapter) Is Nothing) Then
                    Me._artifactTableAdapter.Connection = CType(revertConnections(Me._artifactTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._artifactTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aspectTableAdapter) Is Nothing) Then
                    Me._aspectTableAdapter.Connection = CType(revertConnections(Me._aspectTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._aspectTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._basic_universeTableAdapter) Is Nothing) Then
                    Me._basic_universeTableAdapter.Connection = CType(revertConnections(Me._basic_universeTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._basic_universeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._charactersTableAdapter) Is Nothing) Then
                    Me._charactersTableAdapter.Connection = CType(revertConnections(Me._charactersTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._charactersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._characters_nameTableAdapter) Is Nothing) Then
                    Me._characters_nameTableAdapter.Connection = CType(revertConnections(Me._characters_nameTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._characters_nameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._characters_specialsTableAdapter) Is Nothing) Then
                    Me._characters_specialsTableAdapter.Connection = CType(revertConnections(Me._characters_specialsTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._characters_specialsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._characters_specials_singleTableAdapter) Is Nothing) Then
                    Me._characters_specials_singleTableAdapter.Connection = CType(revertConnections(Me._characters_specials_singleTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._characters_specials_singleTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._code_variantTableAdapter) Is Nothing) Then
                    Me._code_variantTableAdapter.Connection = CType(revertConnections(Me._code_variantTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._code_variantTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dccodeTableAdapter) Is Nothing) Then
                    Me._dccodeTableAdapter.Connection = CType(revertConnections(Me._dccodeTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dccodeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._doubleshotTableAdapter) Is Nothing) Then
                    Me._doubleshotTableAdapter.Connection = CType(revertConnections(Me._doubleshotTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._doubleshotTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    Me._eventTableAdapter.Connection = CType(revertConnections(Me._eventTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._eventTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._expansionTableAdapter) Is Nothing) Then
                    Me._expansionTableAdapter.Connection = CType(revertConnections(Me._expansionTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._expansionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._homebasesTableAdapter) Is Nothing) Then
                    Me._homebasesTableAdapter.Connection = CType(revertConnections(Me._homebasesTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._homebasesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._homebases_charactersTableAdapter) Is Nothing) Then
                    Me._homebases_charactersTableAdapter.Connection = CType(revertConnections(Me._homebases_charactersTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._homebases_charactersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._homebases_nameTableAdapter) Is Nothing) Then
                    Me._homebases_nameTableAdapter.Connection = CType(revertConnections(Me._homebases_nameTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._homebases_nameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._missionsTableAdapter) Is Nothing) Then
                    Me._missionsTableAdapter.Connection = CType(revertConnections(Me._missionsTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._missionsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._missions_nameTableAdapter) Is Nothing) Then
                    Me._missions_nameTableAdapter.Connection = CType(revertConnections(Me._missions_nameTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._missions_nameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._powerTableAdapter) Is Nothing) Then
                    Me._powerTableAdapter.Connection = CType(revertConnections(Me._powerTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._powerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rarityTableAdapter) Is Nothing) Then
                    Me._rarityTableAdapter.Connection = CType(revertConnections(Me._rarityTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._rarityTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._skillTableAdapter) Is Nothing) Then
                    Me._skillTableAdapter.Connection = CType(revertConnections(Me._skillTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._skillTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._specialsTableAdapter) Is Nothing) Then
                    Me._specialsTableAdapter.Connection = CType(revertConnections(Me._specialsTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._specialsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._teamworkTableAdapter) Is Nothing) Then
                    Me._teamworkTableAdapter.Connection = CType(revertConnections(Me._teamworkTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._teamworkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trainingTableAdapter) Is Nothing) Then
                    Me._trainingTableAdapter.Connection = CType(revertConnections(Me._trainingTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._trainingTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
